{"ast":null,"code":"import { Component } from 'react';\n\nclass MaxSelection extends Component {\n  constructor(props) {\n    super(props);\n\n    this.set_conditions = () => {\n      if (this.localStorateMax == 0) {\n        console.log('localStorage = 0');\n        this.max_num = '0.12'; // localStorage.setItem('max', 1)\n      }\n\n      if (this.hours != 6) {\n        console.log('localStorage = 1'); // \tswitch (this.hour) {\n        // \tcase(this.hour < 18 && this.hour >6?this.hour : ''):\n        // \t\tconst remaining_time = this.hour\n        // \t\tthis.max_num = parseFloat(`0.0${remaining_time}`)\n        // \t\tbreak;\n        // \tcase (this.hour >= 18 && this.hour < 24 ? this.hour : ''):\n        // \t\tconst rem_time = (24 - this.hour) + 6\n        // \t\tthis.max_num = (rem_time > 9 ? this.max_num = parseFloat(`0.${rem_time}`) : parseFloat(`0.0${rem_time}`))\n        // \t\tbreak;\n        // \tcase(this.hour <6?this.hour : ''):\n        // \t\tconst rem_hr = this.hour\n        // \t\tthis.max_num = `0.0${rem_hr}`\n        // \t\tbreak;\n        // }\n      }\n\n      return this.max_num;\n    };\n\n    this.date = new Date();\n    this.getExpTime = localStorage.getItem('expTime').split(':');\n    this.hours = this.getExpTime[0];\n    this.hour = this.date.getHours();\n    this.localStorage = localStorage.getItem('max');\n    this.localStorateMax = localStorage.getItem('max');\n    this.max_num = 0.00;\n  }\n\n}\n\nexport default MaxSelection; // get the localstorage exp time and match it with 6\n// if match, we're going to assign the this.max_num variable to 12\n// if it is not 6, then we're going to switch case and return the result to this.max_num\n// \tif (localStorage_ == 1) {\n// \t\tthis.max_num = '0.12'\n// \t\tconsole.log('still shows under condition')\n// \t}\n// \tif (localStorage_ = 0){ \n// \t\tconsole.log('Not equal to 6')\n// \t}\n// }","map":{"version":3,"sources":["/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Components/max_selection/MaxSelection.js"],"names":["Component","MaxSelection","constructor","props","set_conditions","localStorateMax","console","log","max_num","hours","date","Date","getExpTime","localStorage","getItem","split","hour","getHours"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;;AAIA,MAAMC,YAAN,SAA2BD,SAA3B,CAAqC;AACjCE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAanBC,cAbmB,GAaF,MAAM;AACnB,UAAI,KAAKC,eAAL,IAAwB,CAA5B,EAA+B;AAC3BC,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACA,aAAKC,OAAL,GAAe,MAAf,CAF2B,CAI3B;AACH;;AACD,UAAI,KAAKC,KAAL,IAAc,CAAlB,EAAqB;AACjBH,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EADiB,CAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEL;;AAGD,aAAO,KAAKC,OAAZ;AAEH,KA3CkB;;AAEf,SAAKE,IAAL,GAAY,IAAIC,IAAJ,EAAZ;AACA,SAAKC,UAAL,GAAkBC,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAgCC,KAAhC,CAAsC,GAAtC,CAAlB;AACA,SAAKN,KAAL,GAAa,KAAKG,UAAL,CAAgB,CAAhB,CAAb;AACA,SAAKI,IAAL,GAAY,KAAKN,IAAL,CAAUO,QAAV,EAAZ;AACA,SAAKJ,YAAL,GAAoBA,YAAY,CAACC,OAAb,CAAqB,KAArB,CAApB;AACA,SAAKT,eAAL,GAAuBQ,YAAY,CAACC,OAAb,CAAqB,KAArB,CAAvB;AACA,SAAKN,OAAL,GAAe,IAAf;AACH;;AAVgC;;AA+CrC,eAAeP,YAAf,C,CAEE;AACA;AACA;AACD;AACA;AACA;AACA;AACA;AAEA;AACA;AACA","sourcesContent":["import { Component } from 'react'\n\n\n\nclass MaxSelection extends Component {\n    constructor(props) {\n        super(props)\n        this.date = new Date()\n        this.getExpTime = localStorage.getItem('expTime').split(':')\n        this.hours = this.getExpTime[0]\n        this.hour = this.date.getHours()\n        this.localStorage = localStorage.getItem('max')\n        this.localStorateMax = localStorage.getItem('max')\n        this.max_num = 0.00\n    }\n\n\n\n    set_conditions = () => {\n        if (this.localStorateMax == 0) {\n            console.log('localStorage = 0')\n            this.max_num = '0.12'\n\n            // localStorage.setItem('max', 1)\n        }\n        if (this.hours != 6) {\n            console.log('localStorage = 1')\n            \t\t// \tswitch (this.hour) {\n            \t\t// \tcase(this.hour < 18 && this.hour >6?this.hour : ''):\n            \t\t// \t\tconst remaining_time = this.hour\n            \t\t// \t\tthis.max_num = parseFloat(`0.0${remaining_time}`)\n            \t\t// \t\tbreak;\n            \t\t// \tcase (this.hour >= 18 && this.hour < 24 ? this.hour : ''):\n            \t\t// \t\tconst rem_time = (24 - this.hour) + 6\n            \t\t// \t\tthis.max_num = (rem_time > 9 ? this.max_num = parseFloat(`0.${rem_time}`) : parseFloat(`0.0${rem_time}`))\n            \t\t// \t\tbreak;\n            \t\t// \tcase(this.hour <6?this.hour : ''):\n            \t\t// \t\tconst rem_hr = this.hour\n            \t\t// \t\tthis.max_num = `0.0${rem_hr}`\n\n            \t\t// \t\tbreak;\n            \t\t// }\n\n        }\n\n\n        return this.max_num\n\n    }\n}\n\nexport default MaxSelection;\n\n\t\t// get the localstorage exp time and match it with 6\n\t\t// if match, we're going to assign the this.max_num variable to 12\n\t\t// if it is not 6, then we're going to switch case and return the result to this.max_num\n\t// \tif (localStorage_ == 1) {\n\t// \t\tthis.max_num = '0.12'\n\t// \t\tconsole.log('still shows under condition')\n\t// \t}\n\t// \tif (localStorage_ = 0){ \n\n\t// \t\tconsole.log('Not equal to 6')\n\t// \t}\n\t// }\n"]},"metadata":{},"sourceType":"module"}