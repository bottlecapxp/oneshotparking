{"ast":null,"code":"import _slicedToArray from\"/Users/bottlecapmedia/Desktop/OneShot Parking/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useContext,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var CountDown=function CountDown(){var getSetTime=localStorage.getItem('timeStore');var _useState=useState({hours:Math.round(getSetTime/100),mins:getSetTime%100,secs:60,ms:1000}),_useState2=_slicedToArray(_useState,2),countDown=_useState2[0],setCountDown=_useState2[1];// Set mutable variables for updates\nvar updated_hours=countDown.hours,updated_mins=countDown.mins,updated_secs=countDown.secs,updated_ms=countDown.ms;useEffect(function(){setInterval(function(){setCountDown({hours:updated_hours,mins:updated_mins,secs:updated_secs,ms:updated_ms});},1000);},[]);var run=function run(){updated_secs--;if(updated_ms===0){updated_secs--;updated_ms=100;}if(updated_secs===0){updated_mins--;updated_secs=60;}if(updated_mins===0){updated_hours--;updated_mins=60;}if(updated_hours===0){updated_hours='00';}console.log(updated_secs);setTimeout(run,1000);};run();// setInterval(run, 1000)\nreturn/*#__PURE__*/_jsx(\"div\",{className:\"global_container choose_lot\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"countdown_digits_holder\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"Remaing Time\"}),/*#__PURE__*/_jsx(\"div\",{className:\"countdown_adjustment\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"countdown_digits\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"digits\",children:\"\".concat(countDown.hours)}),/*#__PURE__*/_jsx(\"span\",{className:\"digits\",children:\"\".concat(countDown.mins)}),/*#__PURE__*/_jsxs(\"span\",{className:\"digits\",children:[\"\".concat(countDown.secs),\"s\"]})]})}),/*#__PURE__*/_jsx(\"div\",{children:\"Button\"})]})});};","map":{"version":3,"sources":["/Users/bottlecapmedia/Desktop/OneShot Parking/src/Pages/CountDown.js"],"names":["React","useState","useContext","useEffect","CountDown","getSetTime","localStorage","getItem","hours","Math","round","mins","secs","ms","countDown","setCountDown","updated_hours","updated_mins","updated_secs","updated_ms","setInterval","run","console","log","setTimeout"],"mappings":"oKAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,UAA1B,CAAsCC,SAAtC,KAAuD,OAAvD,C,wFAIA,MAAO,IAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CAC3B,GAAMC,CAAAA,UAAU,CAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAnB,CAD2B,cAEON,QAAQ,CAAC,CACvCO,KAAK,CAAEC,IAAI,CAACC,KAAL,CAAWL,UAAU,CAAG,GAAxB,CADgC,CAEvCM,IAAI,CAAEN,UAAU,CAAG,GAFoB,CAGvCO,IAAI,CAAE,EAHiC,CAIvCC,EAAE,CAAE,IAJmC,CAAD,CAFf,wCAEpBC,SAFoB,eAETC,YAFS,eAgB3B;AACA,GAAIC,CAAAA,aAAa,CAAGF,SAAS,CAACN,KAA9B,CAAqCS,YAAY,CAAGH,SAAS,CAACH,IAA9D,CAAqEO,YAAY,CAAGJ,SAAS,CAACF,IAA9F,CAAoGO,UAAU,CAAGL,SAAS,CAACD,EAA3H,CAEAV,SAAS,CAAC,UAAI,CACViB,WAAW,CAAC,UAAI,CACZL,YAAY,CAAC,CACTP,KAAK,CAAEQ,aADE,CAETL,IAAI,CAAEM,YAFG,CAGTL,IAAI,CAAEM,YAHG,CAITL,EAAE,CAAEM,UAJK,CAAD,CAAZ,CAMH,CAPU,CAOR,IAPQ,CAAX,CAUH,CAXQ,CAWP,EAXO,CAAT,CAcA,GAAME,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,EAAM,CACdH,YAAY,GACZ,GAAGC,UAAU,GAAK,CAAlB,CAAoB,CAChBD,YAAY,GACZC,UAAU,CAAG,GAAb,CACH,CACD,GAAGD,YAAY,GAAK,CAApB,CAAsB,CAClBD,YAAY,GACZC,YAAY,CAAG,EAAf,CACH,CACD,GAAGD,YAAY,GAAK,CAApB,CAAsB,CAClBD,aAAa,GACbC,YAAY,CAAG,EAAf,CACH,CAED,GAAGD,aAAa,GAAK,CAArB,CAAuB,CACnBA,aAAa,CAAG,IAAhB,CACH,CAEDM,OAAO,CAACC,GAAR,CAAYL,YAAZ,EACAM,UAAU,CAACH,GAAD,CAAM,IAAN,CAAV,CACH,CArBD,CAsBJA,GAAG,GACC;AAGA,mBACI,YAAK,SAAS,CAAC,6BAAf,uBAEI,aAAK,SAAS,CAAC,yBAAf,wBAEI,sCAFJ,cAII,YAAK,SAAS,CAAC,sBAAf,uBACA,aAAK,SAAS,CAAC,kBAAf,wBACI,aAAM,SAAS,CAAC,QAAhB,oBAA6BP,SAAS,CAACN,KAAvC,GADJ,cAEI,aAAM,SAAS,CAAC,QAAhB,oBAA6BM,SAAS,CAACH,IAAvC,GAFJ,cAGI,cAAM,SAAS,CAAC,QAAhB,qBAA8BG,SAAS,CAACF,IAAxC,QAHJ,GADA,EAJJ,cAWJ,+BAXI,GAFJ,EADJ,CA0BH,CArFM","sourcesContent":["import React, { useState, useContext, useEffect } from 'react'\n\n\n\nexport const CountDown = () => {\n    const getSetTime = localStorage.getItem('timeStore')\n    const [countDown, setCountDown] = useState({\n        hours: Math.round(getSetTime / 100),\n        mins: getSetTime % 100,\n        secs: 60,\n        ms: 1000\n    })\n\n   \n\n\n\n \n\n   \n    // Set mutable variables for updates\n    var updated_hours = countDown.hours, updated_mins = countDown.mins,  updated_secs = countDown.secs, updated_ms = countDown.ms\n\n    useEffect(()=>{\n        setInterval(()=>{\n            setCountDown({\n                hours: updated_hours,\n                mins: updated_mins, \n                secs: updated_secs,\n                ms: updated_ms\n            })\n        }, 1000)\n\n\n    },[])\n\n\n    const run = () => { \n        updated_secs--\n        if(updated_ms === 0){\n            updated_secs--\n            updated_ms = 100\n        }\n        if(updated_secs === 0){\n            updated_mins--\n            updated_secs = 60\n        }\n        if(updated_mins === 0){\n            updated_hours--\n            updated_mins = 60\n        }\n        \n        if(updated_hours === 0){\n            updated_hours = '00'\n        }\n\n        console.log(updated_secs)\n        setTimeout(run, 1000)\n    }\nrun()\n    // setInterval(run, 1000)\n\n    \n    return (\n        <div className='global_container choose_lot'>\n\n            <div className='countdown_digits_holder'>\n\n                <span>Remaing Time</span>\n\n                <div className='countdown_adjustment'>\n                <div className='countdown_digits'>\n                    <span className='digits'>{`${countDown.hours}`}</span>\n                    <span className='digits'>{`${countDown.mins}`}</span>\n                    <span className='digits' >{`${countDown.secs}`}s</span>\n                </div>\n                </div>\n        <div>Button</div>\n\n            </div>\n\n\n            {/* Count down time */}\n\n\n\n            {/* Buttone to Extend time here */}\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}