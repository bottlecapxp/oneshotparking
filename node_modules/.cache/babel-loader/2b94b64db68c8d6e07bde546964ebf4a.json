{"ast":null,"code":"import _classCallCheck from\"/Users/bottlecapmedia/Documents/Applications/OneShot Parking/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _inherits from\"/Users/bottlecapmedia/Documents/Applications/OneShot Parking/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/bottlecapmedia/Documents/Applications/OneShot Parking/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';var Time=/*#__PURE__*/function(_Component){_inherits(Time,_Component);var _super=_createSuper(Time);function Time(props){var _this;_classCallCheck(this,Time);_this=_super.call(this,props);_this.set_expTime_to_secs=function(){var output=_this.sum_hours*3600+_this.current_mins*60;return output;};_this.start_time=function(){return\"\".concat(_this.current_hour,\":\").concat(_this.current_mins).concat(_this.output_meridian);};_this.genrate_expired_time=function(scrolled_hours){_this.sum_hours=_this.current_hour+scrolled_hours;var set_hour_limitors=[12,24,36,48];_this.output_hour=_this.sum_hours;var button_meridian=_this.output_meridian;// mins check\nif(_this.current_mins==0){_this.current_mins='00';}for(var i=0;i<set_hour_limitors.length;i++){if(_this.sum_hours>=set_hour_limitors[i]){if(_this.sum_hours>=set_hour_limitors[0]&&_this.sum_hours<set_hour_limitors[1]||_this.sum_hours>=set_hour_limitors[2]&&_this.sum_hours<set_hour_limitors[3]){_this.meridian_units_switch=true;}if(_this.sum_hours>=set_hour_limitors[1]&&_this.sum_hours<set_hour_limitors[2]){_this.meridian_units_switch=false;}var iterate_set_hour_limitors=_this.sum_hours-set_hour_limitors[i];_this.output_hour=iterate_set_hour_limitors==0?12:iterate_set_hour_limitors;}}_this.set_expTime_to_secs();_this.output_meridian=_this._switch_meridian_unit(_this.meridian_units_switch);localStorage.setItem('_time_btn_hr',_this.output_hour);localStorage.setItem('_time_btn_meridian',_this.output_meridian);return\"\".concat(_this.output_hour,\":\").concat(_this.current_mins<10?\"0\".concat(_this.current_mins):_this.current_mins).concat(_this.output_meridian);};_this._switch_meridian_unit=function(meridian_ref){if(meridian_ref){return _this.meridian_units[1];}else if(!meridian_ref){return _this.meridian_units[0];}};_this.meridian_units=['am','pm'];_this.__init_date__=new Date();_this.current_hour=_this.__init_date__.getHours();_this.current_mins=_this.__init_date__.getMinutes();_this.meridian_units_switch=_this.current_hour>12?true:false;_this.output_hour='';_this.sum_hours=null;_this.days=0;_this.output_meridian='';_this.button_output='';return _this;}return Time;}(Component);export default Time;// const rate_change_limitors = [6, 12, 18, 24]\n// const hour_wheel_calc = 0.0417\n// const min_wheel_calc = hour_wheel_calc / 60\n// var generating_hours = button_meridian == this.meridian_units[1]? parseInt(button_hours) + 12: button_hours\n// // returns either 1..12 || 13..23  \"We need to fix a bug 12 turns to 24 and midnight to 12\"\n// if(generating_hours == 12){ \n//     generating_hours = 12\n// }\n// if(button_hours != rate_change_limitors[0] || button_hours != rate_change_limitors[2]){ \n//     if(generating_hours > rate_change_limitors[0] && generating_hours < rate_change_limitors[2]){ \n//         this.button_output = rate_change_limitors[2] - generating_hours\n//     }else\n//     if(generating_hours > rate_change_limitors[2] && generating_hours < rate_change_limitors[3]){ \n//         this.button_output = (rate_change_limitors[3] - generating_hours) + rate_change_limitors[0]\n//     }else\n//     if(generating_hours < rate_change_limitors[0]){ \n//         this.button_output = rate_change_limitors[0] - generating_hours\n//     }\n// }\n// if(button_hours == rate_change_limitors[0] || button_hours == rate_change_limitors[2]){ \n//     this.button_output = 12\n// }\n// if(localStorage.getItem('_time_mdn_time') == this.meridian_units[0]){\n//     var remaining_time = 6 - localStorage.getItem('_time_btn_hr')\n//     if(localStorage.getItem('_time_btn_hr') < 6){ \n//         remaining_time >= night_limit?return_time=remaining_time:return_time = remaining_time + 12\n//     }\n//     if(localStorage.getItem('_time_btn_hr') >= 6 && localStorage.getItem('_time_btn_hr') < 12){ \n//         var rem_time = 12 - localStorage.getItem('_time_btn_hr')\n//         return_time=rem_time + 6\n//         // rem_time >= day_limit?return_time=(rem_time + 12) * hour_wheel_calc:return_time=(rem_time + 12) * hour_wheel_calc\n//     }\n// } \n// if(localStorage.getItem('_time_mdn_time') == this.meridian_units[1]){\n//     var night_remaining_time = 6 - localStorage.getItem('_time_btn_hr')\n//     // generate daily\n//     if(localStorage.getItem('_time_btn_hr') < 6){\n//         var daytime_rem_hr = 6 - localStorage.getItem('_time_btn_hr')\n//         night_remaining_time >= day_limit?return_time=daytime_rem_hr:return_time=daytime_rem_hr + 12\n//     }\n//     if(localStorage.getItem('_time_btn_hr') >= 6 && localStorage.getItem('_time_btn_hr') < 12 ){\n//         var night_rem_time = 12 - localStorage.getItem('_time_btn_hr')\n//         return_time = night_rem_time + 6\n//     }\n// }\n// console.log(return_time)\n// if(this.output_hour >= 6 && this.output_hour < 12){ \n//     const max_calculation = (12 - this.output_hour) + 6\n//     if(max_calculation >= day_limit){ \n//         return max_calculation * hour_wheel_calc\n//         console.log(max_calculation)\n//     }\n//     if(max_calculation < day_limit){ \n//         return (max_calculation + 12) * hour_wheel_calc\n//         console.log(max_calculation + 12)\n//     }\n// }\n// if(this.output_hour < 6){ \n//     const night_max_calculation = 6 - this.output_hour\n//     if(night_max_calculation < night_limit){ \n//         return (night_max_calculation + 12) * hour_wheel_calc\n//         console.log(night_max_calculation + 12)\n//     }\n//     return night_max_calculation * hour_wheel_calc\n//     console.log(night_max_calculation)\n// }\n// if(this.output_meridian == this.meridian_units[1]){ \n//     if(this.output_hour <= 6){\n//         const calculate_remaining_time = 6 - this.output_hour\n//         if(calculate_remaining_time < day_limit){ \n//             return (calculate_remaining_time + 12) * hour_wheel_calc\n//             console.log(calculate_remaining_time + 12)\n//         }\n//         return calculate_remaining_time * hour_wheel_calc\n//         console.log(calculate_remaining_time)\n//     }\n//     if(this.output_hour > 6 && this.output_hour <= 12){ \n//         const calc_rem_time = (12 - this.output) + 6\n//         if(calc_rem_time < night_limit){ \n//             console.log((calc_rem_time + 12) * hour_wheel_calc)\n//             return (calc_rem_time + 12) * hour_wheel_calc\n//             console.log(calc_rem_time + 12)\n//         }\n//         console.log(calc_rem_time * hour_wheel_calc)\n//         return calc_rem_time * hour_wheel_calc\n//         console.log(calc_rem_time)\n//     }\n//     // console.log(24 - (this.output_hour + 12) + 6)\n// }\n// set_meridian_unit = (hours) => { \n// var time_expression = this.current_hour + hours\n// switch(this.current_hour){ \n//     case(this.current_hour > 12?this.current_hour: null): \n//     break;\n// }\n// }\n// }\n// const twelve_hour_time = () => { \n// \tif(expiredHours > 12){ \n// \t\texpiredHours = expiredHours - 12 \n// \t\ttwelve_hour_time()\n// \t}\n// }\n// twelve_hour_time()\n// const set_meridiem = () => { \n// \tvar time_expression = currentTime.getHours() + hours\n// \tconst start_meridiem = currentTime.getHours()\n// \tswitch(start_meridiem){ \n// \t\tcase(start_meridiem > 12? start_meridiem: null):\n// \t\tstart_time_unit = time_unit_[1]\n// \t\tbreak;\n// \t\tcase (start_meridiem < 12 ? start_meridiem: null): \n// \t\tstart_time_unit = time_unit_[0]\n// \t\tbreak;\n// \t}\n// \tswitch(time_expression){\n// \t\tcase (time_expression >= 12 && time_expression <= 24 ? time_expression : null):\n// \t\t\ttimeUnit = time_unit_[1]\n// \t\t\tbreak; \n// \t\tcase (time_expression > 24 || time_expression < 12 ? time_expression : null): \n// \t\t\ttimeUnit = time_unit_[0]\n// \t\t\tbreak;\n// \t}\n// \tif(expiredMinutes < 10){\n// \t\texpiredMinutes = `${0}${expiredMinutes}`\n// \t}\n// \tif(expiredMinutes == 60){ \n// \t\texpiredHours = expiredHours + 1\n// \t\texpiredMinutes = '00'\n// \t}\n// }\n// set_meridiem()","map":{"version":3,"sources":["/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Components/Timer/Time.js"],"names":["React","Component","Time","props","set_expTime_to_secs","output","sum_hours","current_mins","start_time","current_hour","output_meridian","genrate_expired_time","scrolled_hours","set_hour_limitors","output_hour","button_meridian","i","length","meridian_units_switch","iterate_set_hour_limitors","_switch_meridian_unit","localStorage","setItem","meridian_ref","meridian_units","__init_date__","Date","getHours","getMinutes","days","button_output"],"mappings":"6gBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,C,GAKMC,CAAAA,I,4FACF,cAAYC,KAAZ,CAAmB,sCACf,uBAAMA,KAAN,EADe,MAenBC,mBAfmB,CAeG,UAAK,CACvB,GAAIC,CAAAA,MAAM,CAAK,MAAKC,SAAL,CAAiB,IAAlB,CAA2B,MAAKC,YAAL,CAAoB,EAA7D,CACA,MAAOF,CAAAA,MAAP,CACH,CAlBkB,OAoBnBG,UApBmB,CAoBN,UAAK,CACd,gBAAU,MAAKC,YAAf,aAA+B,MAAKF,YAApC,SAAmD,MAAKG,eAAxD,EACH,CAtBkB,OAwBnBC,oBAxBmB,CAwBI,SAACC,cAAD,CAAoB,CACvC,MAAKN,SAAL,CAAiB,MAAKG,YAAL,CAAoBG,cAArC,CACA,GAAIC,CAAAA,iBAAiB,CAAG,CAAC,EAAD,CAAK,EAAL,CAAS,EAAT,CAAa,EAAb,CAAxB,CACA,MAAKC,WAAL,CAAmB,MAAKR,SAAxB,CACA,GAAIS,CAAAA,eAAe,CAAG,MAAKL,eAA3B,CAEA;AACA,GAAI,MAAKH,YAAL,EAAqB,CAAzB,CAA4B,CACxB,MAAKA,YAAL,CAAoB,IAApB,CACH,CAED,IAAK,GAAIS,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGH,iBAAiB,CAACI,MAAtC,CAA8CD,CAAC,EAA/C,CAAmD,CAC/C,GAAI,MAAKV,SAAL,EAAiBO,iBAAiB,CAACG,CAAD,CAAtC,CAA2C,CACvC,GAAG,MAAKV,SAAL,EAAkBO,iBAAiB,CAAC,CAAD,CAAnC,EAA0C,MAAKP,SAAL,CAAiBO,iBAAiB,CAAC,CAAD,CAA5E,EAAmF,MAAKP,SAAL,EAAkBO,iBAAiB,CAAC,CAAD,CAAnC,EAA0C,MAAKP,SAAL,CAAiBO,iBAAiB,CAAC,CAAD,CAAlK,CAAsK,CAClK,MAAKK,qBAAL,CAA6B,IAA7B,CACH,CACD,GAAG,MAAKZ,SAAL,EAAkBO,iBAAiB,CAAC,CAAD,CAAnC,EAA0C,MAAKP,SAAL,CAAiBO,iBAAiB,CAAC,CAAD,CAA/E,CAAmF,CAC/E,MAAKK,qBAAL,CAA6B,KAA7B,CACH,CACD,GAAIC,CAAAA,yBAAyB,CAAG,MAAKb,SAAL,CAAiBO,iBAAiB,CAACG,CAAD,CAAlE,CACA,MAAKF,WAAL,CAAmBK,yBAAyB,EAAI,CAA7B,CAA+B,EAA/B,CAAkCA,yBAArD,CACH,CACJ,CAED,MAAKf,mBAAL,GACA,MAAKM,eAAL,CAAuB,MAAKU,qBAAL,CAA2B,MAAKF,qBAAhC,CAAvB,CACAG,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAqC,MAAKR,WAA1C,EACAO,YAAY,CAACC,OAAb,CAAqB,oBAArB,CAA2C,MAAKZ,eAAhD,EACA,gBAAU,MAAKI,WAAf,aAA8B,MAAKP,YAAL,CAAoB,EAApB,YAA6B,MAAKA,YAAlC,EAAmD,MAAKA,YAAtF,SAAqG,MAAKG,eAA1G,EACH,CArDkB,OAyDnBU,qBAzDmB,CAyDK,SAACG,YAAD,CAAkB,CACtC,GAAGA,YAAH,CAAgB,CACZ,MAAO,OAAKC,cAAL,CAAoB,CAApB,CAAP,CACH,CAFD,IAGK,IAAG,CAACD,YAAJ,CAAiB,CAClB,MAAO,OAAKC,cAAL,CAAoB,CAApB,CAAP,CACH,CACJ,CAhEkB,CAEf,MAAKA,cAAL,CAAsB,CAAC,IAAD,CAAO,IAAP,CAAtB,CACA,MAAKC,aAAL,CAAqB,GAAIC,CAAAA,IAAJ,EAArB,CACA,MAAKjB,YAAL,CAAoB,MAAKgB,aAAL,CAAmBE,QAAnB,EAApB,CACA,MAAKpB,YAAL,CAAoB,MAAKkB,aAAL,CAAmBG,UAAnB,EAApB,CACA,MAAKV,qBAAL,CAA6B,MAAKT,YAAL,CAAoB,EAApB,CAAwB,IAAxB,CAA8B,KAA3D,CACA,MAAKK,WAAL,CAAmB,EAAnB,CACA,MAAKR,SAAL,CAAiB,IAAjB,CACA,MAAKuB,IAAL,CAAY,CAAZ,CACA,MAAKnB,eAAL,CAAuB,EAAvB,CACA,MAAKoB,aAAL,CAAqB,EAArB,CAXe,aAalB,C,cAdc7B,S,EAmEnB,cAAeC,CAAAA,IAAf,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIQ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAeR;AACA;AAEA;AACA;AAEA;AACA;AACA;AAKA;AAIC;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["import React, { Component } from 'react'\n\n\n\n\nclass Time extends Component {\n    constructor(props) {\n        super(props)\n        this.meridian_units = ['am', 'pm']\n        this.__init_date__ = new Date()\n        this.current_hour = this.__init_date__.getHours()\n        this.current_mins = this.__init_date__.getMinutes()\n        this.meridian_units_switch = this.current_hour > 12? true: false\n        this.output_hour = ''\n        this.sum_hours = null\n        this.days = 0\n        this.output_meridian = ''\n        this.button_output = ''\n\n    }\n\n    set_expTime_to_secs = () =>{ \n        var output = ((this.sum_hours * 3600) + (this.current_mins * 60))\n        return output\n    }\n\n    start_time = () =>{ \n        return `${this.current_hour}:${this.current_mins}${this.output_meridian}`\n    }\n\n    genrate_expired_time = (scrolled_hours) => {\n        this.sum_hours = this.current_hour + scrolled_hours\n        var set_hour_limitors = [12, 24, 36, 48]\n        this.output_hour = this.sum_hours\n        var button_meridian = this.output_meridian\n\n        // mins check\n        if (this.current_mins == 0) {\n            this.current_mins = '00'\n        }\n\n        for (var i = 0; i < set_hour_limitors.length; i++) {\n            if (this.sum_hours >=set_hour_limitors[i]) {\n                if(this.sum_hours >= set_hour_limitors[0] && this.sum_hours < set_hour_limitors[1] || this.sum_hours >= set_hour_limitors[2] && this.sum_hours < set_hour_limitors[3]){\n                    this.meridian_units_switch = true\n                }\n                if(this.sum_hours >= set_hour_limitors[1] && this.sum_hours < set_hour_limitors[2]){ \n                    this.meridian_units_switch = false\n                }\n                var iterate_set_hour_limitors = this.sum_hours - set_hour_limitors[i]\n                this.output_hour = iterate_set_hour_limitors == 0?12:iterate_set_hour_limitors\n            }\n        }\n        \n        this.set_expTime_to_secs()\n        this.output_meridian = this._switch_meridian_unit(this.meridian_units_switch)\n        localStorage.setItem('_time_btn_hr', this.output_hour)\n        localStorage.setItem('_time_btn_meridian', this.output_meridian)\n        return `${this.output_hour}:${this.current_mins < 10 ? `0${this.current_mins}` : this.current_mins}${this.output_meridian}`\n    }\n\n\n\n    _switch_meridian_unit = (meridian_ref) => {\n        if(meridian_ref){\n            return this.meridian_units[1]\n        }\n        else if(!meridian_ref){ \n            return this.meridian_units[0]\n        }\n    }\n}\nexport default Time;\n\n// const rate_change_limitors = [6, 12, 18, 24]\n// const hour_wheel_calc = 0.0417\n// const min_wheel_calc = hour_wheel_calc / 60\n// var generating_hours = button_meridian == this.meridian_units[1]? parseInt(button_hours) + 12: button_hours\n// // returns either 1..12 || 13..23  \"We need to fix a bug 12 turns to 24 and midnight to 12\"\n// if(generating_hours == 12){ \n//     generating_hours = 12\n// }\n\n// if(button_hours != rate_change_limitors[0] || button_hours != rate_change_limitors[2]){ \n//     if(generating_hours > rate_change_limitors[0] && generating_hours < rate_change_limitors[2]){ \n//         this.button_output = rate_change_limitors[2] - generating_hours\n//     }else\n//     if(generating_hours > rate_change_limitors[2] && generating_hours < rate_change_limitors[3]){ \n//         this.button_output = (rate_change_limitors[3] - generating_hours) + rate_change_limitors[0]\n//     }else\n//     if(generating_hours < rate_change_limitors[0]){ \n//         this.button_output = rate_change_limitors[0] - generating_hours\n//     }\n// }\n// if(button_hours == rate_change_limitors[0] || button_hours == rate_change_limitors[2]){ \n//     this.button_output = 12\n// }\n\n        \n            \n        // if(localStorage.getItem('_time_mdn_time') == this.meridian_units[0]){\n        //     var remaining_time = 6 - localStorage.getItem('_time_btn_hr')\n        //     if(localStorage.getItem('_time_btn_hr') < 6){ \n        //         remaining_time >= night_limit?return_time=remaining_time:return_time = remaining_time + 12\n        //     }\n        //     if(localStorage.getItem('_time_btn_hr') >= 6 && localStorage.getItem('_time_btn_hr') < 12){ \n        //         var rem_time = 12 - localStorage.getItem('_time_btn_hr')\n        //         return_time=rem_time + 6\n        //         // rem_time >= day_limit?return_time=(rem_time + 12) * hour_wheel_calc:return_time=(rem_time + 12) * hour_wheel_calc\n        //     }\n           \n        // } \n\n        // if(localStorage.getItem('_time_mdn_time') == this.meridian_units[1]){\n        //     var night_remaining_time = 6 - localStorage.getItem('_time_btn_hr')\n        //     // generate daily\n        //     if(localStorage.getItem('_time_btn_hr') < 6){\n        //         var daytime_rem_hr = 6 - localStorage.getItem('_time_btn_hr')\n        //         night_remaining_time >= day_limit?return_time=daytime_rem_hr:return_time=daytime_rem_hr + 12\n        //     }\n        //     if(localStorage.getItem('_time_btn_hr') >= 6 && localStorage.getItem('_time_btn_hr') < 12 ){\n        //         var night_rem_time = 12 - localStorage.getItem('_time_btn_hr')\n        //         return_time = night_rem_time + 6\n        //     }\n        // }\n        // console.log(return_time)\n\n\n\n\n\n            // if(this.output_hour >= 6 && this.output_hour < 12){ \n            //     const max_calculation = (12 - this.output_hour) + 6\n            //     if(max_calculation >= day_limit){ \n            //         return max_calculation * hour_wheel_calc\n            //         console.log(max_calculation)\n            //     }\n            //     if(max_calculation < day_limit){ \n            //         return (max_calculation + 12) * hour_wheel_calc\n            //         console.log(max_calculation + 12)\n            //     }\n\n            // }\n            // if(this.output_hour < 6){ \n            //     const night_max_calculation = 6 - this.output_hour\n            //     if(night_max_calculation < night_limit){ \n            //         return (night_max_calculation + 12) * hour_wheel_calc\n            //         console.log(night_max_calculation + 12)\n            //     }\n            //     return night_max_calculation * hour_wheel_calc\n            //     console.log(night_max_calculation)\n            // }\n\n\n        // if(this.output_meridian == this.meridian_units[1]){ \n        //     if(this.output_hour <= 6){\n        //         const calculate_remaining_time = 6 - this.output_hour\n        //         if(calculate_remaining_time < day_limit){ \n        //             return (calculate_remaining_time + 12) * hour_wheel_calc\n        //             console.log(calculate_remaining_time + 12)\n        //         }\n        //         return calculate_remaining_time * hour_wheel_calc\n        //         console.log(calculate_remaining_time)\n        //     }\n        //     if(this.output_hour > 6 && this.output_hour <= 12){ \n        //         const calc_rem_time = (12 - this.output) + 6\n        //         if(calc_rem_time < night_limit){ \n        //             console.log((calc_rem_time + 12) * hour_wheel_calc)\n        //             return (calc_rem_time + 12) * hour_wheel_calc\n        //             console.log(calc_rem_time + 12)\n        //         }\n        //         console.log(calc_rem_time * hour_wheel_calc)\n        //         return calc_rem_time * hour_wheel_calc\n        //         console.log(calc_rem_time)\n        //     }\n\n        //     // console.log(24 - (this.output_hour + 12) + 6)\n        // }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// set_meridian_unit = (hours) => { \n// var time_expression = this.current_hour + hours\n\n// switch(this.current_hour){ \n//     case(this.current_hour > 12?this.current_hour: null): \n\n//     break;\n// }\n// }\n\n\n\n\n// }\n\n\n\n\t// const twelve_hour_time = () => { \n\t// \tif(expiredHours > 12){ \n\t// \t\texpiredHours = expiredHours - 12 \n\t// \t\ttwelve_hour_time()\n\t// \t}\n\t// }\n\t// twelve_hour_time()\n\n\t// const set_meridiem = () => { \n\t// \tvar time_expression = currentTime.getHours() + hours\n\t// \tconst start_meridiem = currentTime.getHours()\n\n\t// \tswitch(start_meridiem){ \n\t// \t\tcase(start_meridiem > 12? start_meridiem: null):\n\t// \t\tstart_time_unit = time_unit_[1]\n\t// \t\tbreak;\n\t// \t\tcase (start_meridiem < 12 ? start_meridiem: null): \n\t// \t\tstart_time_unit = time_unit_[0]\n\t// \t\tbreak;\n\t// \t}\n\n\n\n\t// \tswitch(time_expression){\n\t// \t\tcase (time_expression >= 12 && time_expression <= 24 ? time_expression : null):\n\t// \t\t\ttimeUnit = time_unit_[1]\n\t// \t\t\tbreak; \n\t// \t\tcase (time_expression > 24 || time_expression < 12 ? time_expression : null): \n\t// \t\t\ttimeUnit = time_unit_[0]\n\t// \t\t\tbreak;\n\t// \t}\n\n\t// \tif(expiredMinutes < 10){\n\t// \t\texpiredMinutes = `${0}${expiredMinutes}`\n\t// \t}\n\t// \tif(expiredMinutes == 60){ \n\t// \t\texpiredHours = expiredHours + 1\n\t// \t\texpiredMinutes = '00'\n\t// \t}\n\n\t// }\n\t// set_meridiem()"]},"metadata":{},"sourceType":"module"}