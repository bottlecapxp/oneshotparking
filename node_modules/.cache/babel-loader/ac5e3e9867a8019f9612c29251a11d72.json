{"ast":null,"code":"import { Component } from 'react';\nimport PaymentGenerator from '../Financials/Calculator/PaymentGenerator';\nimport Tick from './../../Assets/tick.mp3';\nimport { Howl, Howler } from 'howler'; // const pGenerator = new PaymentGenerator()\n\nclass TimerLogic extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setValue = valFunc => {\n      this.value = valFunc;\n    };\n\n    this.stepValue = v => {\n      // v stands for value\n      if (v > 1) {\n        return 1;\n      } else {\n        return Math.round(v * 100) / 100; // denotes the amount of steps to take. 5 is assigned to 5 steps given a value of 0.2\n      }\n    };\n\n    this.scrollTime = stepVal => {\n      var givenValue = Math.round(stepVal * 100); // var minutes =  Math.round(360000 * givenValue / 100) \n      // // 300 is max for 5 hours\n      // // console.log(minutes)\n      // // get hours\n      // if (minutes >= 60){\n      //     this.hours = Math.floor(minutes / 60)\n      // }else{\n      //     this.hours = 0\n      // }\n      // // First Check if you're at a full hour\n      // if(minutes / 60 == this.hours){\n      //     this.stagedMinutes = '00'\n      // }\n      // // Else run algorithm\n      // else{\n      //  this.stagedMinutes = (minutes % 60 % 100)\n      // }\n\n      PaymentGenerator(this.hours, this.stagedMinutes); // Sound generator\n      // this.sound.play()\n\n      return parseInt(`${this.hours}${this.stagedMinutes}`) // `0${this.hours}h : ${this.stagedMinutes}m`\n      ;\n    };\n\n    this.state = {\n      hours: 0,\n      stagedMinutes: 0,\n      value: 0.0\n    };\n    this.sound = new Howl({\n      src: [Tick],\n      volume: 0.7\n    });\n  }\n\n} // End of Class\n\n\nexport default TimerLogic;","map":{"version":3,"sources":["/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Components/Timer/TimerLogic.js"],"names":["Component","PaymentGenerator","Tick","Howl","Howler","TimerLogic","constructor","props","setValue","valFunc","value","stepValue","v","Math","round","scrollTime","stepVal","givenValue","hours","stagedMinutes","parseInt","state","sound","src","volume"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,gBAAP,MAA6B,2CAA7B;AACA,OAAOC,IAAP,MAAiB,yBAAjB;AACA,SAAQC,IAAR,EAAcC,MAAd,QAA2B,QAA3B,C,CAEA;;AAEA,MAAMC,UAAN,SAAyBL,SAAzB,CAAmC;AAC/BM,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SAiBtBC,QAjBsB,GAiBXC,OAAO,IAAG;AACrB,WAAKC,KAAL,GAAaD,OAAb;AACC,KAnBqB;;AAAA,SAqBtBE,SArBsB,GAqBVC,CAAC,IAAG;AAAE;AACd,UAAGA,CAAC,GAAG,CAAP,EAAS;AACL,eAAO,CAAP;AACH,OAFD,MAEK;AACD,eAAOC,IAAI,CAACC,KAAL,CAAWF,CAAC,GAAG,GAAf,IAAsB,GAA7B,CADC,CACgC;AACpC;AACJ,KA3BqB;;AAAA,SA8BtBG,UA9BsB,GA8BTC,OAAO,IAAI;AACpB,UAAIC,UAAU,GAAGJ,IAAI,CAACC,KAAL,CAAWE,OAAO,GAAC,GAAnB,CAAjB,CADoB,CAIpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAf,MAAAA,gBAAgB,CAAC,KAAKiB,KAAN,EAAa,KAAKC,aAAlB,CAAhB,CArBoB,CAsBpB;AACA;;AAEA,aAEAC,QAAQ,CAAE,GAAE,KAAKF,KAAM,GAAE,KAAKC,aAAc,EAApC,CAFR,CAGA;AAHA;AAOH,KA9DqB;;AAEd,SAAKE,KAAL,GAAa;AACTH,MAAAA,KAAK,EAAE,CADE;AAETC,MAAAA,aAAa,EAAE,CAFN;AAGTT,MAAAA,KAAK,EAAE;AAHE,KAAb;AAKA,SAAKY,KAAL,GAAa,IAAInB,IAAJ,CAAS;AAClBoB,MAAAA,GAAG,EAAE,CAACrB,IAAD,CADa;AAElBsB,MAAAA,MAAM,EAAE;AAFU,KAAT,CAAb;AAMH;;AAd8B,C,CA0EjC;;;AAEF,eAAenB,UAAf","sourcesContent":["import { Component } from 'react'\nimport PaymentGenerator from '../Financials/Calculator/PaymentGenerator'\nimport Tick from './../../Assets/tick.mp3'\nimport {Howl, Howler} from 'howler'\n\n// const pGenerator = new PaymentGenerator()\n\nclass TimerLogic extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            hours: 0,\n            stagedMinutes: 0,\n            value: 0.0\n        }\n        this.sound = new Howl({\n            src: [Tick], \n            volume: 0.7\n        })\n\n\n    }\n\n\n\nsetValue = valFunc =>{\nthis.value = valFunc\n}\n\nstepValue = v =>{ // v stands for value\n    if(v > 1){\n        return 1\n    }else{\n        return Math.round(v * 100) / 100 // denotes the amount of steps to take. 5 is assigned to 5 steps given a value of 0.2\n    }\n}\n\n\nscrollTime = stepVal => {\n    var givenValue = Math.round(stepVal*100)\n\n\n    // var minutes =  Math.round(360000 * givenValue / 100) \n    // // 300 is max for 5 hours\n    // // console.log(minutes)\n    // // get hours\n    // if (minutes >= 60){\n    //     this.hours = Math.floor(minutes / 60)\n    // }else{\n    //     this.hours = 0\n    // }\n    // // First Check if you're at a full hour\n    // if(minutes / 60 == this.hours){\n    //     this.stagedMinutes = '00'\n    // }\n    // // Else run algorithm\n    // else{\n    //  this.stagedMinutes = (minutes % 60 % 100)\n    // }\n    PaymentGenerator(this.hours, this.stagedMinutes)\n    // Sound generator\n    // this.sound.play()\n\n    return(\n\n    parseInt(`${this.hours}${this.stagedMinutes}`)\n    // `0${this.hours}h : ${this.stagedMinutes}m`\n    )\n   \n\n}\n\n\n\n\n\n\n\n\n\n\n} // End of Class\n\nexport default TimerLogic"]},"metadata":{},"sourceType":"module"}