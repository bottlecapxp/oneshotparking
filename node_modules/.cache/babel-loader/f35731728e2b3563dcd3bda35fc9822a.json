{"ast":null,"code":"var _jsxFileName = \"/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Pages/LongTimeSelection.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Picker from 'react-scrollable-picker';\nimport { useEffect, useState } from 'react/cjs/react.development';\nimport CircleBtnsImg from '../Components/Buttons/CircleBtn_img/CircleBtnsImg';\nimport ScrollableDatePicker from '../Components/ScrollableDatePicker/ScrollableDatePicker';\n/**\n* @author\n* @function LongTimeSelection\n**/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LongTimeSelection = props => {\n  _s();\n\n  var mins = [];\n  var hrs = [];\n  var month_days = [];\n  const date = new Date();\n\n  const get_days_of_month = (month, year) => {\n    return new Date(year, month, 0).getDate();\n  };\n\n  const [selectedDate, setSelectedDate] = useState({\n    date: '',\n    hours: 0,\n    minutes: 0\n  });\n  const days_in_current_month = get_days_of_month(date.getMonth(), date.getFullYear());\n  const options = {\n    month: 'long'\n  };\n  const current_month = new Intl.DateTimeFormat('en-US', options).format();\n\n  const setExpiredTime = (name, val, groups) => {\n    const newGroup = groups;\n    setSelectedDate({ ...selectedDate,\n      [name]: val\n    });\n    newGroup[name] = val;\n    setSelectedDate(newGroup);\n  };\n\n  const generator = () => {\n    var setdays, sethours;\n    const todaysDate = date.getDate();\n    const selected_date_array = selectedDate.date.split(' ');\n    const selected_date = parseInt(selected_date_array[1]); // rules\n\n    sethours = selectedDate.meridian == 'pm' ? selectedDate.hours + 12 : selectedDate.hours;\n\n    if (todaysDate < selected_date) {\n      setdays = selected_date - todaysDate;\n    }\n\n    return {\n      hours: sethours,\n      mins: selectedDate.minutes,\n      days: setdays == undefined ? 0 : setdays\n    };\n  };\n\n  const find_todays_remaining_hrs = 24 - date.getHours();\n  generator();\n  console.log(find_todays_remaining_hrs);\n\n  for (var i = 0; i < 60; i = i + 15) {\n    mins.push({\n      value: i,\n      label: i\n    });\n  }\n\n  for (var i = 0; i < 13; i++) {\n    hrs.push({\n      value: i,\n      label: i\n    });\n  }\n\n  for (var i = date.getDate() + 1; i < days_in_current_month + 1; i++) {\n    month_days.push({\n      value: `${current_month.substring(0, 3)} ${i}`,\n      label: `${current_month.substring(0, 3)} ${i}`\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"global_container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        textAlign: 'center',\n        paddingTop: '12%',\n        color: 'red'\n      },\n      children: \"Set Your Expiration Time\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ScrollableDatePicker, {\n      expired: setExpiredTime,\n      month: month_days,\n      hours: hrs,\n      minutes: mins\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      style: {\n        textAlign: 'center',\n        color: 'red'\n      },\n      children: \"Expires at:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: [selectedDate.date, \" - \", `${selectedDate.hours}:${selectedDate.minutes == 0 ? '00' : selectedDate.minutes}${selectedDate.meridian}`]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scroll_confirm_holder\",\n      children: /*#__PURE__*/_jsxDEV(CircleBtnsImg, {\n        title: \"Confirm\",\n        img: \"\",\n        class: \"plateCapture\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n};\n\n_s(LongTimeSelection, \"7ypNGhxQIWN5ileLRPiSIW1pRY4=\");\n\n_c = LongTimeSelection;\nexport default LongTimeSelection;\n\nvar _c;\n\n$RefreshReg$(_c, \"LongTimeSelection\");","map":{"version":3,"sources":["/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Pages/LongTimeSelection.js"],"names":["React","Picker","useEffect","useState","CircleBtnsImg","ScrollableDatePicker","LongTimeSelection","props","mins","hrs","month_days","date","Date","get_days_of_month","month","year","getDate","selectedDate","setSelectedDate","hours","minutes","days_in_current_month","getMonth","getFullYear","options","current_month","Intl","DateTimeFormat","format","setExpiredTime","name","val","groups","newGroup","generator","setdays","sethours","todaysDate","selected_date_array","split","selected_date","parseInt","meridian","days","undefined","find_todays_remaining_hrs","getHours","console","log","i","push","value","label","substring","textAlign","paddingTop","color"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Picker from 'react-scrollable-picker'\nimport { useEffect, useState } from 'react/cjs/react.development'\nimport CircleBtnsImg from '../Components/Buttons/CircleBtn_img/CircleBtnsImg'\nimport ScrollableDatePicker from '../Components/ScrollableDatePicker/ScrollableDatePicker'\n\n/**\n* @author\n* @function LongTimeSelection\n**/\n\nconst LongTimeSelection = (props) => {\n    var mins = []\n    var hrs = []\n    var month_days = []\n    const date = new Date()\n    const get_days_of_month = (month, year) => {\n        return new Date(year, month, 0).getDate()\n    }\n    const [selectedDate, setSelectedDate] = useState({\n        date: '', \n        hours: 0, \n        minutes: 0\n    })\n\n    const days_in_current_month = get_days_of_month(date.getMonth(), date.getFullYear())\n    const options = { month: 'long' }\n    const current_month = new Intl.DateTimeFormat('en-US', options).format()\n\n    const setExpiredTime = (name, val, groups) => {\n        const newGroup = groups\n        setSelectedDate({\n            ...selectedDate, [name]:val\n        })\n        newGroup[name] = val\n        setSelectedDate(newGroup)\n    }\n\n \n    const generator = () => { \n        var setdays, sethours\n        const todaysDate = date.getDate()\n\n        const selected_date_array = selectedDate.date.split(' ')\n        const selected_date = parseInt(selected_date_array[1])\n\n        // rules\n        sethours = selectedDate.meridian == 'pm'?selectedDate.hours + 12: selectedDate.hours\n        if(todaysDate < selected_date){\n            setdays = selected_date - todaysDate\n        }\n\n        return {hours:sethours, mins: selectedDate.minutes, days: setdays == undefined?0:setdays} \n    }\n\n    const find_todays_remaining_hrs = 24 - date.getHours() \n\n\n\n\n\n \n\n\n\n\n\n\ngenerator()\nconsole.log(find_todays_remaining_hrs)\n\n    for (var i = 0; i < 60; i = i + 15) {\n        mins.push({ value: i, label: i })\n    }\n    for (var i = 0; i < 13; i++) {\n        hrs.push({ value: i, label: i })\n    }\n    for (var i = date.getDate() +1; i < (days_in_current_month + 1); i++) {\n        month_days.push({ value: `${current_month.substring(0, 3)} ${i}`, label: `${current_month.substring(0, 3)} ${i}` })\n    }\n\n\n    return (\n        <div className='global_container'>\n            <h2 style={{ textAlign: 'center', paddingTop: '12%', color: 'red' }}>Set Your Expiration Time</h2>\n            <ScrollableDatePicker expired={setExpiredTime} month={month_days} hours={hrs} minutes={mins} />\n            <h4 style={{ textAlign: 'center', color: 'red' }}>Expires at:</h4>\n            <p style={{textAlign:'center'}}>{selectedDate.date} - {`${selectedDate.hours}:${selectedDate.minutes == 0?'00':selectedDate.minutes}${selectedDate.meridian}`}</p>\n\n            <div className='scroll_confirm_holder'>\n                <CircleBtnsImg title='Confirm' img='' class='plateCapture' />\n            </div>\n        </div>\n    )\n\n}\n\nexport default LongTimeSelection;\n"]},"metadata":{},"sourceType":"module"}