{"ast":null,"code":"import _slicedToArray from\"/Users/bottlecapmedia/Documents/Applications/OneShot Parking/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useContext,useState,useEffect,useCallback}from\"react\";import{PaymentContext}from'../../Context/PaymentContext';import\"../Timer/Timer.css\";import Tick from'./../../Assets/tick.mp3';import{Howl,Howler}from'howler';import Time from'./Time';import{CircularInput,CircularTrack,CircularProgress,CircularThumb}from\"react-circular-input\";import TimerLogic from\"./TimerLogic\";import{useMemo}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Timer=function Timer(props){// const today = new Date();\nvar timerLogic=new TimerLogic();var time_obj=new Time();var _useContext=useContext(PaymentContext),totalbilling=_useContext.totalbilling,dayTime=_useContext.dayTime,dayTimeBilling=_useContext.dayTimeBilling,nightTime=_useContext.nightTime,nightTimeBilling=_useContext.nightTimeBilling,setExpiredTime=_useContext.setExpiredTime,setStartTime=_useContext.setStartTime,darkMode=_useContext.darkMode;// const pGenerator = new PaymentGenerator();\nvar _useState=useState(null),_useState2=_slicedToArray(_useState,2),value=_useState2[0],setValue=_useState2[1];var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),validateDayTime=_useState4[0],setDayTimeValidation=_useState4[1];var _useState5=useState(),_useState6=_slicedToArray(_useState5,2),validateNightTime=_useState6[0],setNightTimeValidation=_useState6[1];var _useState7=useState({circleContainer:'timeInfo',costAmount:'cost_amount',circularTrack:'#eee'}),_useState8=_slicedToArray(_useState7,2),darkModeStyle=_useState8[0],setDarkModeStyle=_useState8[1];var _useState9=useState({day:3,night:6}),_useState10=_slicedToArray(_useState9,2),maxParking=_useState10[0],setMaxParking=_useState10[1];var date=new Date();var get_current_mins=date.getMinutes();var preHr_check=Math.floor(timerLogic.scrollTime(value)/100);var minutes=Math.floor(timerLogic.scrollTime(value)%100);var hours=preHr_check;// fixes issue where \nvar rem_minutes=60-get_current_mins;var start_time_unit=['am','pm'];var currentTime=new Date();var startTime=\"\".concat(currentTime.getHours()>12?currentTime.getHours()-12:currentTime.getHours(),\":\").concat(currentTime.getMinutes()<10?\"0\".concat(currentTime.getMinutes()):currentTime.getMinutes()).concat(currentTime.getHours()>=12?start_time_unit[1]:start_time_unit[0]);// var expiredMinutes = parseInt(currentTime.getMinutes() + minutes)\n// var expiredHours = currentTime.getHours() + hours\n// var timer_expired_hours = currentTime.getHours() + hours\n// FULL TIME CALCULATIONS.\nvar expTime,expTimeInSecs;expTime=time_obj.genrate_expired_time(hours,minutes);console.log(hours);expTimeInSecs=time_obj.set_expTime_to_secs()+minutes*60;console.log(\"hours: \".concat(hours,\" minutes \").concat(minutes));localStorage.setItem('expTimeInSecs',expTimeInSecs);localStorage.setItem('expTime',expTime);localStorage.setItem('total',totalbilling);// Keeps track of time changes\nvar startTime=time_obj.start_time();useEffect(function(){// if(darkMode >= 1800 || darkMode <= 600){\n// \t\tsetDarkModeStyle({\n// \t\t\tcircleContainer: 'timeInfo_dark', \n// \t\t\tcostAmount: 'cost_amount_dark', \n// \t\t\tcircularTrack: '#1B242F'\n// \t\t})\n// \t}\nif(dayTime==0){setDayTimeValidation(true);}else{setDayTimeValidation(false);}if(nightTime==0){setNightTimeValidation(true);}localStorage.setItem('startTime',startTime);if(hours>=24){return;}if(value==0&&props.addTime=='-0.20'){return;}else{setValue(value+props.addTime);}// console.log(Math.round(value))\n},[props.addTime]);setStartTime(startTime);setExpiredTime(expTime);var test=0;var scroll_wheel_hr=parseInt(localStorage.getItem('_time_btn_hr'));var scroll_wheel_meridian=localStorage.getItem('_time_btn_meridian');return/*#__PURE__*/_jsxs(\"div\",{className:\"timer_container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"timer_holder\",children:[/*#__PURE__*/_jsx(\"div\",{id:darkModeStyle.circleContainer,children:/*#__PURE__*/_jsxs(\"div\",{id:\"time_holder\",children:[/*#__PURE__*/_jsx(\"p\",{className:\"set_time\",style:{marginTop:'10px'},children:\"Set Duration\"}),/*#__PURE__*/_jsx(\"p\",{id:\"time\",children:\"\".concat(hours,\"h:\").concat(minutes,\"m\")}),/*#__PURE__*/_jsx(\"p\",{className:\"set_time\",style:{marginTop:'10px'},children:\"Expires at\"}),/*#__PURE__*/_jsx(\"p\",{className:\"rate_\",style:{textAlign:'center'},children:expTime})]})}),/*#__PURE__*/_jsxs(CircularInput,{radius:115,value:value,onChange:function onChange(v){setValue(timerLogic.stepValue(v));},children:[/*#__PURE__*/_jsx(CircularTrack,{strokeWidth:10,stroke:darkModeStyle.circularTrack}),/*#__PURE__*/_jsx(CircularProgress,{className:\"bar\",stroke:\"#ff4f4f\",strokeWidth:12}),/*#__PURE__*/_jsx(CircularThumb,{r:15,fill:\"#F0F0F3\",stroke:\"#ff4f4f\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"cost_holder\",children:[/*#__PURE__*/_jsx(\"div\",{id:darkModeStyle.costAmount,children:\"Total Cost: \"}),/*#__PURE__*/_jsxs(\"div\",{className:\"price\",children:[\"$\",\"\".concat(totalbilling)]})]})]});};export default Timer;// if(scroll_wheel_meridian  == 'am' && scroll_wheel_hr < 6){\n// \tif(6 - date.getHours() >= maxParking.night){\n// \t\ttest = maxParking.night\n// \t}\n// \telse{\n// \t\ttest = null\n// \t}\n// }\n// if(scroll_wheel_meridian == 'am' && scroll_wheel_hr > 6 && scroll_wheel_hr < 12){\n// \tif((12 - date.getHours() + 6) >= maxParking.day){\n// \t\ttest = maxParking.day\n// \t}\n// \telse{\n// \t\ttest = null\n// \t}\n// }\n// if(scroll_wheel_meridian == 'pm' && scroll_wheel_hr < 6){\n// \tif(18 - date.getHours() >= maxParking.day){\n// \t\ttest = maxParking.day\n// \t}\n// \telse{\n// \t\ttest = null\n// \t}\n// }\n// if(scroll_wheel_meridian == 'pm' && scroll_wheel_hr > 6 && scroll_wheel_hr < 12){\n// \tif(30 - date.getHours() >= maxParking.night || 30 - (scroll_wheel_hr + 12) > maxParking.night){\n// \t\ttest = maxParking.night\n// \t}\n// \telse{\n// \t\ttest = null\n// \t}\n// }\n// (cMins < 10? `0${cMins}`: cMins)\n// timerLogic.scrollTime(timerLogic.stepValue(value))%100\n{/* <p className='set_time'>Daily Rates</p> */}{/* Rates Settings */}{/* <div className='rate_container'>\n\t\t\t\t\t\t\t<div className='daily_container day'>\n\t\t\t\t\t\t\t\t<img id='sun' src={Day} alt='sun'></img>\n\t\t\t\t\t\t\t\t<p className='rate_'>$4hr</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className='daily_container night'>\n\t\t\t\t\t\t\t\t<img id='moon' src={Moon} alt='moon'></img>\n\t\t\t\t\t\t\t\t<p className='rate_'>$6hr</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div> */}// if(expiredHours == 24){\n// \thours = 12\n// \ttimeUnit = time_unit_[0]\n// }\n// if(expiredHours > 24){\n// \thours = hours - 24\n// \ttimeUnit = time_unit_[0]\n// }\n// if(expiredHours >= 12){\n// \ttimeUnit = time_unit_[1]\n// }\n// if(currentTime.getHours() >= 12){\n// \tcTimeUnit = time_unit_[1]\n// }else{\n// \tcTimeUnit = time_unit_[0]\n// }\n// if(expiredMinutes > 60){\n// \texpiredMinutes = expiredMinutes - 60\n// \texpiredHours = expiredHours + 1\n// }\n// if(expiredHours > 12){\n// \texpiredHours = expiredHours - 12 \n// \tif(expiredHours > 12 ){ \n// \t\texpiredHours = expiredHours - 12\n// \t}\n// }\n// if(minutes == 0){\n// \tminutes = '00'\n// }\n// DEPRECATED CODE - LIVES FOR 30 DAYS THEN DELETED\n// <div className='overlap_Cost'>\n// {/* Day rate */}\n// <div className='day_rate'>\n// \t<div className='info_holder dayRate_icon'>\n// \t<img id='sun' src={Day} alt='sun'></img>\n// \t</div>\n// \t<div id='hours_' className='info_holder dayRate_time'>{Math.floor(dayTime/100)}hrs : {Math.floor(dayTime%100)}mins</div>\n// \t<div id='cost_' className='info_holder dayRate_cost'>${dayTimeBilling}</div>\n// </div>\n// {/* Night Rate */}\n// <div className='night_rate'>\n// \t<div className='info_holder nightRate_icon'>\n// \t<img id='moon' src={Moon} alt='moon'></img>\n// \t</div>\n// \t<div id='hours_' className='info_holder dayRate_time'>{Math.floor(nightTime/100)}hrs : {Math.floor(nightTime%100)}mins</div>\n// \t<div id='cost_' className='info_holder dayRate_cost'>${nightTimeBilling}</div>\n// </div>\n// </div>\n// const limits = [18, 24, 6]\n// if(hours == 5){\n// \tconst date = new Date()\n// \t const currentHours = date.getHours()\n// \t const currentMins = date.getMinutes()\n// \t const currentTime = (currentHours * 3600) + (currentMins * 60)\n// \t var countdown_mins = 0\n// \t const cMins = 60 - currentMins\n// \t var countdown_hours = limits[0] - currentHours\n// \tif(currentHours > limits[2] && currentHours < limits[0]){ \n// \t\t// let Calculate the countdown hours & mins \n// \t\tif(currentMins != 0 || currentMins != '00'){ \n// \t\t\tcountdown_hours = countdown_hours - 1\n// \t\t\tcountdown_mins = cMins\n// \t\t\t// currentTime in Seconds\n// \t\t\tvar countdown_time = (countdown_hours * 3600) + (countdown_mins * 60)\n// \t\t\tvar fulltime = currentTime + countdown_time\n// \t\t\tvar fulltime_calc = fulltime / 3600\n// \t\t\texpiredHours = (fulltime_calc > 12? fulltime_calc - 12: fulltime_calc )\n// \t\t\texpiredMinutes = '00'\n// \t\t} \n// \t\tif(currentMins == 0 || currentMins == '00'){ \n// \t\t\tvar countdown_time = (countdown_hours * 3600) + (countdown_mins * 60)\n// \t\t\tvar fulltime = currentTime + countdown_time\n// \t\t\tvar fulltime_calc = fulltime / 3600\n// \t\t\texpiredHours = (fulltime_calc > 12? fulltime_calc - 12: fulltime_calc )\n// \t\t}\n// \t\t// Then let's introduce the remaining time. \n// \t}\n// }","map":{"version":3,"sources":["/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Components/Timer/Timer.js"],"names":["React","useContext","useState","useEffect","useCallback","PaymentContext","Tick","Howl","Howler","Time","CircularInput","CircularTrack","CircularProgress","CircularThumb","TimerLogic","useMemo","Timer","props","timerLogic","time_obj","totalbilling","dayTime","dayTimeBilling","nightTime","nightTimeBilling","setExpiredTime","setStartTime","darkMode","value","setValue","validateDayTime","setDayTimeValidation","validateNightTime","setNightTimeValidation","circleContainer","costAmount","circularTrack","darkModeStyle","setDarkModeStyle","day","night","maxParking","setMaxParking","date","Date","get_current_mins","getMinutes","preHr_check","Math","floor","scrollTime","minutes","hours","rem_minutes","start_time_unit","currentTime","startTime","getHours","expTime","expTimeInSecs","genrate_expired_time","console","log","set_expTime_to_secs","localStorage","setItem","start_time","addTime","test","scroll_wheel_hr","parseInt","getItem","scroll_wheel_meridian","marginTop","textAlign","v","stepValue"],"mappings":"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EAPA,GADD,EADD,cAcC,MAAC,aAAD,EAAe,MAAM,CAAE,GAAvB,CACC,KAAK,CAAE9B,KADR,CAEC,QAAQ,CAAE,kBAAC+C,CAAD,CAAO,CAChB9C,QAAQ,CAACX,UAAU,CAAC0D,SAAX,CAAqBD,CAArB,CAAD,CAAR,CACC,CAJH,wBAKC,KAAC,aAAD,EAAe,WAAW,CAAE,EAA5B,CAAgC,MAAM,CAAEtC,aAAa,CAACD,aAAtD,EALD,cAMC,KAAC,gBAAD,EAAkB,SAAS,CAAC,KAA5B,CAAkC,MAAM,CAAC,SAAzC,CAAmD,WAAW,CAAE,EAAhE,EAND,cAOC,KAAC,aAAD,EAAe,CAAC,CAAE,EAAlB,CAAsB,IAAI,CAAC,SAA3B,CAAqC,MAAM,CAAC,SAA5C,EAPD,GAdD,GADD,cA2BC,aAAK,SAAS,CAAC,aAAf,wBAA6B,YAAK,EAAE,CAAEC,aAAa,CAACF,UAAvB,0BAA7B,cAAkF,aAAK,SAAS,CAAC,OAAf,yBAA4Bf,YAA5B,IAAlF,GA3BD,GADD,CAgCA,CAtID,CAuIA,cAAeJ,CAAAA,KAAf,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEM,CAAC,6CAA8C,CAC/C,CAAC,oBAAqB,CACtB,CAAC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAgB,CACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAED;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGC;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAGA","sourcesContent":["import React, { useContext, useState, useEffect, useCallback } from \"react\";\nimport { PaymentContext } from '../../Context/PaymentContext'\nimport \"../Timer/Timer.css\";\nimport Tick from './../../Assets/tick.mp3'\nimport { Howl, Howler } from 'howler'\nimport Time from './Time'\n\nimport {\n\tCircularInput,\n\tCircularTrack,\n\tCircularProgress,\n\tCircularThumb,\n} from \"react-circular-input\";\nimport TimerLogic from \"./TimerLogic\";\nimport { useMemo } from \"react\";\n\n\n\n\nconst Timer = (props) => {\n\t// const today = new Date();\n\tconst timerLogic = new TimerLogic();\n\tconst time_obj = new Time()\n\n\tconst { totalbilling, dayTime, dayTimeBilling, nightTime, nightTimeBilling, setExpiredTime, setStartTime, darkMode } = useContext(PaymentContext)\n\t// const pGenerator = new PaymentGenerator();\n\tconst [value, setValue] = useState(null);\n\tconst [validateDayTime, setDayTimeValidation] = useState()\n\tconst [validateNightTime, setNightTimeValidation] = useState()\n\tconst [darkModeStyle, setDarkModeStyle] = useState({\n\t\tcircleContainer: 'timeInfo', \n\t\tcostAmount: 'cost_amount',\n\t\tcircularTrack: '#eee'\n\t\t \n\t })\n\t const  [maxParking, setMaxParking] = useState({\n\t\t day: 3, \n\t\t night: 6\n\t })\n\t const date = new Date()\n\t const get_current_mins = date.getMinutes()\n\tconst preHr_check = Math.floor(timerLogic.scrollTime(value) / 100)\n\tvar minutes = Math.floor(timerLogic.scrollTime(value)%100)\n\tvar hours = preHr_check  // fixes issue where \n\n\tconst rem_minutes = 60 - get_current_mins\n\n\tconst start_time_unit = ['am', 'pm']; \n\tconst currentTime = new Date();\n\tvar startTime = `${currentTime.getHours() > 12?currentTime.getHours() - 12: currentTime.getHours()}:${currentTime.getMinutes() < 10? `0${currentTime.getMinutes()}`: currentTime.getMinutes()}${currentTime.getHours() >= 12?start_time_unit[1]:start_time_unit[0]}`\n\n\n\n\n\n\n\n\t// var expiredMinutes = parseInt(currentTime.getMinutes() + minutes)\n\t// var expiredHours = currentTime.getHours() + hours\n\t// var timer_expired_hours = currentTime.getHours() + hours\n\n\n\n\n\t// FULL TIME CALCULATIONS.\n\tvar expTime, expTimeInSecs\n\texpTime = time_obj.genrate_expired_time(hours, minutes)\n\tconsole.log(hours)\n\texpTimeInSecs = time_obj.set_expTime_to_secs() + (minutes * 60)\n\tconsole.log(`hours: ${hours} minutes ${minutes}`)\n\n\n\tlocalStorage.setItem('expTimeInSecs', expTimeInSecs)\n\tlocalStorage.setItem('expTime', expTime)\n\tlocalStorage.setItem('total', totalbilling)\n\n\t\n\t// Keeps track of time changes\n\n\t var startTime = time_obj.start_time()\n\tuseEffect(() => {\n\t\t// if(darkMode >= 1800 || darkMode <= 600){\n\t\t// \t\tsetDarkModeStyle({\n\t\t// \t\t\tcircleContainer: 'timeInfo_dark', \n\t\t// \t\t\tcostAmount: 'cost_amount_dark', \n\t\t// \t\t\tcircularTrack: '#1B242F'\n\t\t// \t\t})\n\t\t// \t}\n\n\t\tif (dayTime == 0) {\n\t\t\tsetDayTimeValidation(true)\n\t\t} else { setDayTimeValidation(false) }\n\t\tif (nightTime == 0) {\n\t\t\tsetNightTimeValidation(true)\n\t\t}\n\t\tlocalStorage.setItem('startTime', startTime)\n\n\t\tif(hours >= 24){ \n\t\treturn;\n\t\t}\n\t\tif(value == 0 && props.addTime == '-0.20'){ \n\t\t\t\treturn;\n\t\t}\n\t\telse{\n\t\t\t\tsetValue(value + props.addTime);\n\t\t}\n\n\n\t\t// console.log(Math.round(value))\n \n\n\t}, [props.addTime]);\n\tsetStartTime(startTime)\n\tsetExpiredTime(expTime)\n\nvar test = 0\nconst scroll_wheel_hr = parseInt(localStorage.getItem('_time_btn_hr'))\nconst scroll_wheel_meridian = localStorage.getItem('_time_btn_meridian')\n\n\n\n\treturn (\n\t\t<div className='timer_container'>\n\t\t\t<div className='timer_holder'>\n\t\t\t\t<div id={darkModeStyle.circleContainer}>\n\t\t\t\t\t<div id='time_holder'>\n\t\t\t\t\t<p className='set_time' style={{marginTop: '10px'}}>Set Duration</p>\n\t\t\t\t\t<p id='time'>{`${hours}h:${minutes}m`}</p>\n\n\t\t\t\t\t\t{/* <p id='time'>{(hours == 5?'Max Parking':`${hours}h:${minutes}m`)}</p> */}\n\n\t\t\t\t\t<p className='set_time' style={{marginTop: '10px'}}>Expires at</p>\n\t\t\t\t\t<p className='rate_' style={{textAlign: 'center'}}>{expTime}</p>\t\n\t\t\t\t\t{/* <button className='set_time_button' style={{marginTop: '10px'}}>PARK LONGER</button> */}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<CircularInput radius={115}\n\t\t\t\t\tvalue={value}\n\t\t\t\t\tonChange={(v) => {\n\t\t\t\t\t\tsetValue(timerLogic.stepValue(v))\t\n\t\t\t\t\t\t}}>\n\t\t\t\t\t<CircularTrack strokeWidth={10} stroke={darkModeStyle.circularTrack} />\n\t\t\t\t\t<CircularProgress className='bar' stroke='#ff4f4f' strokeWidth={12} />\n\t\t\t\t\t<CircularThumb r={15} fill='#F0F0F3' stroke='#ff4f4f' />\n\t\t\t\t</CircularInput>\n\t\t\t</div>\n\n\n\t\t\t<div className='cost_holder'><div id={darkModeStyle.costAmount}>Total Cost: </div><div className='price'>${`${totalbilling}`}</div></div>\n\n\t\t</div>\n\t);\n};\nexport default Timer;\n\n// if(scroll_wheel_meridian  == 'am' && scroll_wheel_hr < 6){\n// \tif(6 - date.getHours() >= maxParking.night){\n// \t\ttest = maxParking.night\n// \t}\n// \telse{\n// \t\ttest = null\n// \t}\n// }\n// if(scroll_wheel_meridian == 'am' && scroll_wheel_hr > 6 && scroll_wheel_hr < 12){\n// \tif((12 - date.getHours() + 6) >= maxParking.day){\n// \t\ttest = maxParking.day\n// \t}\n// \telse{\n// \t\ttest = null\n// \t}\n// }\n// if(scroll_wheel_meridian == 'pm' && scroll_wheel_hr < 6){\n// \tif(18 - date.getHours() >= maxParking.day){\n// \t\ttest = maxParking.day\n// \t}\n// \telse{\n// \t\ttest = null\n// \t}\n// }\n// if(scroll_wheel_meridian == 'pm' && scroll_wheel_hr > 6 && scroll_wheel_hr < 12){\n// \tif(30 - date.getHours() >= maxParking.night || 30 - (scroll_wheel_hr + 12) > maxParking.night){\n// \t\ttest = maxParking.night\n// \t}\n// \telse{\n// \t\ttest = null\n// \t}\n// }\n// (cMins < 10? `0${cMins}`: cMins)\n// timerLogic.scrollTime(timerLogic.stepValue(value))%100\n\t\n\t\t\t\t\t\t{/* <p className='set_time'>Daily Rates</p> */}\n\t\t\t\t\t\t{/* Rates Settings */}\n\t\t\t\t\t\t{/* <div className='rate_container'>\n\t\t\t\t\t\t\t<div className='daily_container day'>\n\t\t\t\t\t\t\t\t<img id='sun' src={Day} alt='sun'></img>\n\t\t\t\t\t\t\t\t<p className='rate_'>$4hr</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className='daily_container night'>\n\t\t\t\t\t\t\t\t<img id='moon' src={Moon} alt='moon'></img>\n\t\t\t\t\t\t\t\t<p className='rate_'>$6hr</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div> */}\n\t// if(expiredHours == 24){\n\t// \thours = 12\n\t// \ttimeUnit = time_unit_[0]\n\t// }\n\t// if(expiredHours > 24){\n\t// \thours = hours - 24\n\t// \ttimeUnit = time_unit_[0]\n\t// }\n\t// if(expiredHours >= 12){\n\t// \ttimeUnit = time_unit_[1]\n\t// }\n\n\t// if(currentTime.getHours() >= 12){\n\t// \tcTimeUnit = time_unit_[1]\n\t// }else{\n\t// \tcTimeUnit = time_unit_[0]\n\t// }\n\n\n\t// if(expiredMinutes > 60){\n\t// \texpiredMinutes = expiredMinutes - 60\n\t// \texpiredHours = expiredHours + 1\n\t// }\n\n\t// if(expiredHours > 12){\n\t// \texpiredHours = expiredHours - 12 \n\t// \tif(expiredHours > 12 ){ \n\t// \t\texpiredHours = expiredHours - 12\n\t// \t}\n\n\t// }\n\n\n\t// if(minutes == 0){\n\t// \tminutes = '00'\n\t// }\n\n// DEPRECATED CODE - LIVES FOR 30 DAYS THEN DELETED\n\n// <div className='overlap_Cost'>\n// {/* Day rate */}\n// <div className='day_rate'>\n// \t<div className='info_holder dayRate_icon'>\n// \t<img id='sun' src={Day} alt='sun'></img>\n// \t</div>\n\n// \t<div id='hours_' className='info_holder dayRate_time'>{Math.floor(dayTime/100)}hrs : {Math.floor(dayTime%100)}mins</div>\n// \t<div id='cost_' className='info_holder dayRate_cost'>${dayTimeBilling}</div>\n\n// </div>\n// {/* Night Rate */}\n// <div className='night_rate'>\n// \t<div className='info_holder nightRate_icon'>\n// \t<img id='moon' src={Moon} alt='moon'></img>\n// \t</div>\n// \t<div id='hours_' className='info_holder dayRate_time'>{Math.floor(nightTime/100)}hrs : {Math.floor(nightTime%100)}mins</div>\n// \t<div id='cost_' className='info_holder dayRate_cost'>${nightTimeBilling}</div>\n\n// </div>\n\n// </div>\n\n\n\t// const limits = [18, 24, 6]\n\t// if(hours == 5){\n\t// \tconst date = new Date()\n\t// \t const currentHours = date.getHours()\n\t// \t const currentMins = date.getMinutes()\n\t// \t const currentTime = (currentHours * 3600) + (currentMins * 60)\n\n\t// \t var countdown_mins = 0\n\t// \t const cMins = 60 - currentMins\n\t// \t var countdown_hours = limits[0] - currentHours\n\t// \tif(currentHours > limits[2] && currentHours < limits[0]){ \n\t// \t\t// let Calculate the countdown hours & mins \n\t// \t\tif(currentMins != 0 || currentMins != '00'){ \n\t// \t\t\tcountdown_hours = countdown_hours - 1\n\t// \t\t\tcountdown_mins = cMins\n\t// \t\t\t// currentTime in Seconds\n\t// \t\t\tvar countdown_time = (countdown_hours * 3600) + (countdown_mins * 60)\n\t// \t\t\tvar fulltime = currentTime + countdown_time\n\t// \t\t\tvar fulltime_calc = fulltime / 3600\n\t// \t\t\texpiredHours = (fulltime_calc > 12? fulltime_calc - 12: fulltime_calc )\n\t// \t\t\texpiredMinutes = '00'\n\n\t// \t\t} \n\t// \t\tif(currentMins == 0 || currentMins == '00'){ \n\t// \t\t\tvar countdown_time = (countdown_hours * 3600) + (countdown_mins * 60)\n\t// \t\t\tvar fulltime = currentTime + countdown_time\n\t// \t\t\tvar fulltime_calc = fulltime / 3600\n\t// \t\t\texpiredHours = (fulltime_calc > 12? fulltime_calc - 12: fulltime_calc )\n\t// \t\t}\n\n\t// \t\t// Then let's introduce the remaining time. \n\n\n\t// \t}\n\t\n\n\t// }"]},"metadata":{},"sourceType":"module"}