{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useStripe } from '@stripe/react-stripe-js';\nimport { useState, useContext, Component } from 'react';\nimport { useEffect } from 'react/cjs/react.development';\nimport { PaymentContext } from '../../../Context/PaymentContext';\nimport GeneratePrice from './GeneratePrice';\nimport Time from '../../Timer/Time';\n\nconst PaymentGenerator = (hours, minutes) => {\n  _s();\n\n  const {\n    setNightTime,\n    setNightTimeBilling,\n    setDayTime,\n    setDayTimeBilling,\n    setBilling,\n    setTime\n  } = useContext(PaymentContext);\n  const timeDate = new Date();\n  const night_hourly_rate = 2.0;\n  const night_minute_rate = 0;\n  const hourly_rate = 1.75;\n  const minute_rate = 0;\n  const day_max_limit = 3;\n  const night_max_limit = 2;\n  var day_max_rate = 5;\n  var night_max_rate = 10;\n  const genPrice = new GeneratePrice(); //parseInt(`${timeDate.getHours()}${timeDate.getMinutes()}`)\n\n  var currentTime = parseInt(`${timeDate.getHours()}${timeDate.getMinutes() < 10 ? `0${timeDate.getMinutes()}` : timeDate.getMinutes()}`);\n  var setLimit = parseInt(`${hours}${minutes}0`);\n  var accumalatedTime = currentTime + setLimit;\n  var minuteCheck = accumalatedTime % 100;\n  var hourCheck = Math.floor(accumalatedTime / 100);\n  var night_overlap_time;\n  var newMinutes;\n  var newHours;\n  var daytime_billing;\n  var day_overlap_time;\n  var extra_overlap;\n  var dayTime;\n  var night_time_hours;\n  var night_time_billing;\n\n  const check_and_adjust = () => {\n    // Accumulated Time Check\n    if (hourCheck > 23) {\n      hourCheck = hourCheck - 24;\n    }\n\n    if (minuteCheck >= 60) {\n      newMinutes = minuteCheck - 60;\n      newHours = Math.floor(hourCheck + 1);\n      accumalatedTime = parseInt(`${newHours}${newMinutes}`);\n\n      if (newMinutes < 10) {\n        accumalatedTime = parseInt(`${newHours}0${newMinutes}`);\n      }\n\n      if (newMinutes === 0) {\n        accumalatedTime = parseInt(`${newHours}00`);\n      }\n    } else {\n      accumalatedTime = currentTime + setLimit; //Current time + Set Limit time\n    }\n  };\n\n  check_and_adjust();\n\n  const round = (limit, set_target, true_value) => {\n    const output = Math.round((limit - set_target) / true_value);\n    return output;\n  };\n\n  const round_remainder = (limit, set_target, true_value) => {\n    const output = Math.round((limit - set_target) % true_value);\n    return output;\n  };\n\n  const setbillings = (set_day_time, set_daytime_billing, set_night_time, set_nighttime_billing, total_billing) => {\n    setDayTime(set_day_time);\n    setDayTimeBilling(set_daytime_billing);\n    setNightTime(set_night_time);\n    setNightTimeBilling(set_nighttime_billing);\n    setBilling(total_billing);\n  }; // const generate_max_rate = (day, night, extra) => { \n  //     const day_calc = day > day_max_limit? day_max_limit * day_max_rate:day * hourly_rate\n  //     const night = night > night_max_limit? night_max_limit * night_max_rate: nigth * night_hourly_rate\n  // }\n\n\n  const night_time = () => {\n    if (currentTime >= 1800 && accumalatedTime <= 3000 || currentTime < 600 && accumalatedTime <= 600) {\n      night_time_hours = Math.round((accumalatedTime - currentTime) / 100);\n      night_time_billing = hours * night_hourly_rate;\n      console.log(night_time_hours);\n      setbillings(0, 0, night_time_hours, night_time_billing, night_time_billing);\n    } // overlap_time\n\n\n    if (currentTime >= 1800 && accumalatedTime > 3000 && accumalatedTime <= 4200) {\n      // if current time is greater than 6pm & setTime is > 6am and setTime is < 6pm\n      day_overlap_time = round(accumalatedTime, 3000, 100); // round (setTime - nighttime) / 100   \n\n      const night_rate = round(3000, currentTime, 100) * night_hourly_rate;\n      console.log(night_rate);\n      console.log(day_overlap_time);\n      const calc_cost = night_rate + day_overlap_time * hourly_rate;\n      setbillings(0, 0, night_time_hours, night_time_billing, calc_cost);\n    }\n\n    if (currentTime < 600 && accumalatedTime > 600 && accumalatedTime <= 1800) {\n      // if current time is < 6am and setTime is greater than\n      day_overlap_time = round(accumalatedTime, 600, 100);\n      setbillings(0, 0, night_time_hours, night_time_billing, night_time_billing);\n    }\n  };\n\n  const day_time = () => {\n    if (currentTime > 600 && accumalatedTime <= 1800) {\n      dayTime = parseInt(`${hours}${minutes}`);\n      daytime_billing = hours * hourly_rate;\n      setbillings(hours, daytime_billing, 0, 0, daytime_billing);\n    } // overlaping to night time\n\n\n    if (currentTime < 1800 && accumalatedTime > 1800 && accumalatedTime <= 3000) {\n      //current_time < 6pm(daytime) && setTime > 6pm & setTime is <= 6am then do something\n      night_overlap_time = round(accumalatedTime, 1800, 100); // Generate night time\n\n      const remaining_daytime_hr = round(1800, currentTime, 100);\n      const night_cost = night_overlap_time * night_hourly_rate;\n      const day_cost = remaining_daytime_hr * hourly_rate;\n      console.log(night_cost);\n      console.log(day_cost);\n      const remaining_daytime_mins = round_remainder(1800, currentTime, 100);\n      var total_ouput = day_cost + night_cost;\n      setbillings(remaining_daytime_hr, day_cost, night_overlap_time, night_cost, total_ouput);\n    }\n\n    if (currentTime < 1800 && accumalatedTime > 1800 && accumalatedTime > 3000) {\n      const day = round(1800, currentTime, 100);\n      const night = round(3000, 1800, 100);\n      const remainder = round(accumalatedTime, 3000, 100);\n      var dayPrice = genPrice.calculate_daytime_payments(day, hourly_rate, day_max_limit, 5);\n      console.log(dayPrice);\n    }\n  }; // night_time()\n\n\n  day_time(); // const checking_max_calculations = (current_time_period, overlapping_time_period, day_rate, night_rate) => { \n  // }\n  // const money_charged = () => {\n  // }\n  // money_charged()\n}; // console.log(day_time())\n// console.log(day_to_night_overlap())\n// console.log(night_to_day())\n// console.log(accumalatedTime)\n\n\n_s(PaymentGenerator, \"VO2z2oiBoC6H12FIzKuigBjz7nk=\");\n\n_c = PaymentGenerator;\nexport default PaymentGenerator; // setDayTime(dayTime)\n// setDayTimeBilling(daytime_billing)\n// setNightTime(night_overlap_time)\n// setNightTimeBilling(night_time_billing)\n// totalbilling = Math.round((nighttime_billing + overlap_billing + Number.EPSILON) * 100) / 100\n// useEffect(() => {\n//     calculate_money()\n// }, [calculate_money])\n// var count_down_hours = Math.round((accumalatedTime - currentTime) / 100)\n// var totalbilling\n// var reg_day_time_min_algorythm\n// var currentTime_hr\n// var currentTime_min\n// var night_overlap_cost\n// var day_overlap_time\n// var day_overlap_cost\n// var nighttimeHour\n// var nighttimeMin\n// var nighttime_billing\n// var newDayTime_hour\n// var newDayTime_min\n// var newNightTIme_hour\n// var newNightTIme_min\n// var overlap_billing\n// var daytimeHour\n// var daytimeMin\n// var dayTime\n// var totalbilling\n// var nightTime\n// var night_time_billing\n// var day_rate_max = 3\n// var night_rate_max = 5\n// var totalCost\n// setbillings(dayTime, daytime_billing, 0, 0, daytime_billing)\n// setbillings(0, 0, nightTime, night_time_billing, night_time_billing)\n// Day algor\n// Night\n// const finding_remaining_hours = 18 - timeDate.getHours()\n// if((setLimit/10) >= day_rate_max && (setLimit/10) <= finding_remaining_hours && accumalatedTime < 1800){ \n//     totalCost = totalCost + 100\n//     setBilling(100)\n// }\n// else{ \n//     setBilling(totalbilling)\n// }\n// const finding_remaining_hours = 30 - timeDate.getHours()\n// setBilling(night_time_billing) \n// if((setLimit/10) >= night_rate_max && (setLimit/10) <= finding_remaining_hours && accumalatedTime <= 2359 || accumalatedTime <= 600){ \n// setBilling(100)\n// }\n// else{ \n// setBilling(totalbilling)\n// }\n// Day to night\n//         // NIGHT OVERLAPPING TO DAY \n//         if(currentTime <= 600 && accumalatedTime > 600){ //current_time >\n//                 day_overlap_time = accumalatedTime - 600\n//                 console.log()\n//                 day_overlap_cost = Math.floor(day_overlap_time * .07) //.07 is dollar value of 4 dollars per hour\n//                 nighttimeHour = Math.floor((600-currentTime) / 100) // selected hours before night time\n//                 nighttimeMin = Math.floor(60 - (currentTime % 100))// selected mins before night time\n//                 nightTime = parseInt(`${nighttimeHour}${nighttimeMin}`)\n//                 nighttime_billing = nighttimeHour * night_hourly_rate\n//                 if(day_overlap_time > 99){\n//                  newDayTime_hour = Math.floor(day_overlap_time / 100)\n//                  newDayTime_min = Math.floor(day_overlap_time % 100)\n//                  overlap_billing = Math.round(((newDayTime_hour * 4) + (newDayTime_min * 0.07) + Number.EPSILON) * 100) / 100\n//                  day_overlap_time = parseInt(`${newDayTime_hour}${newDayTime_min}`)\n//                }else{\n//                 overlap_billing = Math.round((day_overlap_cost + Number.EPSILON) * 100) / 100\n//                }\n//             }\n// }\n//             if(count_down_hours == 5){ \n//                 console.log(`${count_down_hours}`)\n//                 setBilling(5)\n//                 // setBilling(totalbilling)\n//             }else{\n//                 setBilling(totalbilling)\n//             }\n// setDayTime(day_overlap_time)\n// setDayTimeBilling(overlap_billing)\n// setNightTime(nightTime)\n// setNightTimeBilling(nighttime_billing)\n// daytime_billing = 1800 - currentTime\n// if (night_overlap_time < 60) {\n//     night_overlap_cost = 1 * night_hourly_rate //.1 is dollar value of 6 dollars per hour\n// }\n// else {\n//     night_overlap_cost = night_overlap_time * night_hourly_rate //.1 is dollar value of 6 dollars per hour\n// }\n// // Math.floor((1800-currentTime) / 100)\n// daytimeHour = Math.floor((1800 - currentTime) / 100)// selected hours before night time\n// reg_day_time_min_algorythm = Math.floor(60 - (currentTime % 100))\n// if (reg_day_time_min_algorythm == 60) {\n//     reg_day_time_min_algorythm = `${0}${0}`\n// }\n// daytimeMin = reg_day_time_min_algorythm // selected mins before night time\n// dayTime = parseInt(`${daytimeHour}${daytimeMin}`)\n// daytime_billing = daytimeHour * hourly_rate\n// if (night_overlap_time > 99) {\n//     newNightTIme_hour = Math.floor(night_overlap_time / 100)\n//     newNightTIme_min = Math.floor(night_overlap_time % 100)\n//     overlap_billing = (newNightTIme_hour * night_hourly_rate)\n//     night_overlap_time = parseInt(`${newNightTIme_hour}${newNightTIme_min}`)\n// } else {\n//     overlap_billing = Math.round((night_overlap_cost + Number.EPSILON) * 100) / 100\n// }\n// if (night_overlap_time < 99 && night_overlap_time > 60) {\n//     newNightTIme_hour = Math.floor(night_overlap_time / 60)\n//     newNightTIme_min = Math.floor(night_overlap_time % 60)\n//     overlap_billing = (newNightTIme_hour * night_hourly_rate)\n//     night_overlap_time = parseInt(`${newNightTIme_hour}`)\n// }\n// if (accumalatedTime > 1800 && night_overlap_time >= night_rate_max) {\n//     setBilling(100)\n// }\n// else {\n//     // daytime_billing = 1800 - currentTime\n//     totalbilling = daytime_billing + overlap_billing\n//     // if the setLimit is greater than 6 and the  \n//     console.log(accumalatedTime)\n//     setDayTime(dayTime)\n//     setDayTimeBilling(daytime_billing)\n//     setNightTime(night_overlap_time)\n//     setNightTimeBilling(overlap_billing)\n// }\n// NIGHT GOING INTO DAY BREAK\n// Set Selected time here for tracking and to be pushed to local storage by confirm BTN\n//     setTime(parseInt(`${hours}${minutes}`))\n// }, [hours, minutes])\n//    THEY ARE HERE\n// night_overlap_time = Math.round((night_overlap_cost + Number.EPSILON) * 100) / 100\n// how much day time \n// console.log(`/daytime: ${day_overlap_time}`)\n// //day time cost \n// console.log(`/daytime_billing: ${daytime_billing + overlap_billing}`)\n// //how much night time\n// console.log(`/nighttime: ${night_overlap_time}`)\n// // night time cost \n// console.log(`night Cost: $${overlap_billing}`)\n// STRICTLY DAYTIME\n// // DAYTIME OVERLAPPING TO NIGHT \n// else \n// // STRICTLY NIGHT CALCULATIONS\n// else \n// else \n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentGenerator\");","map":{"version":3,"sources":["/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Components/Financials/Calculator/PaymentGenerator.js"],"names":["useStripe","useState","useContext","Component","useEffect","PaymentContext","GeneratePrice","Time","PaymentGenerator","hours","minutes","setNightTime","setNightTimeBilling","setDayTime","setDayTimeBilling","setBilling","setTime","timeDate","Date","night_hourly_rate","night_minute_rate","hourly_rate","minute_rate","day_max_limit","night_max_limit","day_max_rate","night_max_rate","genPrice","currentTime","parseInt","getHours","getMinutes","setLimit","accumalatedTime","minuteCheck","hourCheck","Math","floor","night_overlap_time","newMinutes","newHours","daytime_billing","day_overlap_time","extra_overlap","dayTime","night_time_hours","night_time_billing","check_and_adjust","round","limit","set_target","true_value","output","round_remainder","setbillings","set_day_time","set_daytime_billing","set_night_time","set_nighttime_billing","total_billing","night_time","console","log","night_rate","calc_cost","day_time","remaining_daytime_hr","night_cost","day_cost","remaining_daytime_mins","total_ouput","day","night","remainder","dayPrice","calculate_daytime_payments"],"mappings":"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Ab,CAAnB;AACA,YAAMyB,SAAS,GAAGzB,KAAK,CAACf,eAAD,EAAkB,IAAlB,EAAwB,GAAxB,CAAvB;AACA,UAAIyC,QAAQ,GAAG/C,QAAQ,CAACgD,0BAAT,CAAoCJ,GAApC,EAAyClD,WAAzC,EAAsDE,aAAtD,EAAqE,CAArE,CAAf;AACAsC,MAAAA,OAAO,CAACC,GAAR,CAAYY,QAAZ;AAEH;AACJ,GA1BD,CA7GyC,CA4IzC;;;AACAT,EAAAA,QAAQ,GA7IiC,CAuJ7C;AACA;AAEI;AACA;AACA;AAMH,CAlKD,C,CAqKA;AACA;AACA;AACA;;;GAxKMzD,gB;;KAAAA,gB;AAgLN,eAAeA,gBAAf,C,CAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAGI;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAYA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAOQ;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA8BJ;AAEA;AACJ;AACA;AAEI;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAaJ;AAIA;AACA;AAEA;AACA;AACA","sourcesContent":["import { useStripe } from '@stripe/react-stripe-js'\nimport { useState, useContext, Component} from 'react'\nimport { useEffect } from 'react/cjs/react.development'\nimport { PaymentContext } from '../../../Context/PaymentContext'\nimport GeneratePrice from './GeneratePrice'\nimport Time from '../../Timer/Time'\n\n\n\n\nconst PaymentGenerator = (hours, minutes) => {\n    const { setNightTime, setNightTimeBilling, setDayTime, setDayTimeBilling, setBilling, setTime } = useContext(PaymentContext)\n    const timeDate = new Date()\n    const night_hourly_rate = 2.0\n    const night_minute_rate = 0\n    const hourly_rate = 1.75\n    const minute_rate = 0\n    const day_max_limit = 3\n    const night_max_limit = 2\n    var day_max_rate = 5\n    var night_max_rate = 10\n    const genPrice = new GeneratePrice()\n\n\n    //parseInt(`${timeDate.getHours()}${timeDate.getMinutes()}`)\n    var currentTime = parseInt(`${timeDate.getHours()}${timeDate.getMinutes() < 10?`0${timeDate.getMinutes()}`:timeDate.getMinutes()}`)\n    var setLimit = parseInt(`${hours}${minutes}0`)\n    var accumalatedTime = currentTime + setLimit\n    var minuteCheck = accumalatedTime % 100\n    var hourCheck = Math.floor(accumalatedTime / 100)\n    var night_overlap_time\n    var newMinutes\n    var newHours\n    var daytime_billing\n    var day_overlap_time\n    var extra_overlap\n    var dayTime\n    var night_time_hours\n    var night_time_billing\n\n\n\n    const check_and_adjust = () => {\n        // Accumulated Time Check\n        if (hourCheck > 23) {\n            hourCheck = hourCheck - 24\n        }\n        if (minuteCheck >= 60) {\n            newMinutes = minuteCheck - 60\n            newHours = Math.floor((hourCheck) + 1)\n            accumalatedTime = parseInt(`${newHours}${newMinutes}`)\n            if (newMinutes < 10) {\n                accumalatedTime = parseInt(`${newHours}0${newMinutes}`)\n            }\n            if (newMinutes === 0) {\n                accumalatedTime = parseInt(`${newHours}00`)\n            }\n        } else {\n            accumalatedTime = currentTime + setLimit //Current time + Set Limit time\n\n        }\n    }\n    check_and_adjust()\n\n\n\n\n\n    const round = (limit, set_target, true_value) => { \n        const output = Math.round((limit - set_target) / true_value)\n        return output\n    }\n    const round_remainder = (limit, set_target, true_value) => { \n        const output = Math.round((limit - set_target) % true_value)\n        return output\n    }\n\n\n\n\n    const setbillings = (set_day_time, set_daytime_billing, set_night_time, set_nighttime_billing, total_billing) => {\n        setDayTime(set_day_time)\n        setDayTimeBilling(set_daytime_billing)\n        setNightTime(set_night_time)\n        setNightTimeBilling(set_nighttime_billing)\n        setBilling(total_billing)\n    }\n\n\n    // const generate_max_rate = (day, night, extra) => { \n    //     const day_calc = day > day_max_limit? day_max_limit * day_max_rate:day * hourly_rate\n    //     const night = night > night_max_limit? night_max_limit * night_max_rate: nigth * night_hourly_rate\n        \n    // }\n\n\n    const night_time = () => {\n        if (currentTime >= 1800 && accumalatedTime <= 3000 || currentTime < 600 && accumalatedTime <= 600) {\n            night_time_hours = Math.round((accumalatedTime - currentTime) / 100)\n            night_time_billing = hours * night_hourly_rate \n            console.log(night_time_hours)\n            setbillings(0, 0, night_time_hours, night_time_billing, night_time_billing) \n        }\n        // overlap_time\n        if(currentTime >= 1800 && accumalatedTime > 3000 && accumalatedTime <= 4200){ // if current time is greater than 6pm & setTime is > 6am and setTime is < 6pm\n            day_overlap_time = round(accumalatedTime, 3000, 100)           // round (setTime - nighttime) / 100   \n            const night_rate = round(3000, currentTime, 100) * night_hourly_rate\n            console.log(night_rate)\n            console.log(day_overlap_time)\n            const calc_cost = night_rate + (day_overlap_time * hourly_rate)  \n            setbillings(0, 0, night_time_hours, night_time_billing, calc_cost) \n        }\n        if(currentTime < 600 && accumalatedTime > 600 && accumalatedTime <= 1800){ // if current time is < 6am and setTime is greater than\n            day_overlap_time = round(accumalatedTime, 600, 100)  \n            setbillings(0, 0, night_time_hours, night_time_billing, night_time_billing) \n        }\n    }\n\n\n    const day_time = () => {\n        if (currentTime > 600 && accumalatedTime <= 1800) {\n            dayTime = parseInt(`${hours}${minutes}`)\n            daytime_billing = hours * hourly_rate\n            setbillings(hours, daytime_billing, 0, 0, daytime_billing)\n        }\n        // overlaping to night time\n        if (currentTime < 1800 && (accumalatedTime > 1800 && accumalatedTime <= 3000)) { //current_time < 6pm(daytime) && setTime > 6pm & setTime is <= 6am then do something\n            night_overlap_time = round(accumalatedTime, 1800, 100)  // Generate night time\n            const remaining_daytime_hr = round(1800, currentTime, 100)\n            const night_cost = night_overlap_time * night_hourly_rate\n            const day_cost = remaining_daytime_hr * hourly_rate\n            console.log(night_cost)\n            console.log(day_cost)\n            const remaining_daytime_mins = round_remainder(1800, currentTime, 100) \n            var total_ouput = day_cost + night_cost\n            setbillings(remaining_daytime_hr, day_cost, night_overlap_time, night_cost, total_ouput)\n        }\n        if(currentTime < 1800 && (accumalatedTime > 1800 && accumalatedTime > 3000)){ \n            const day = round(1800, currentTime, 100)\n            const night = round(3000, 1800, 100)\n            const remainder = round(accumalatedTime, 3000, 100)\n            var dayPrice = genPrice.calculate_daytime_payments(day, hourly_rate, day_max_limit, 5)\n            console.log(dayPrice)\n            \n        }\n    }\n\n\n\n\n    // night_time()\n    day_time()\n\n\n\n\n\n\n\n\n\n// const checking_max_calculations = (current_time_period, overlapping_time_period, day_rate, night_rate) => { \n// }\n\n    // const money_charged = () => {\n    // }\n    // money_charged()\n\n\n\n\n\n}\n\n\n// console.log(day_time())\n// console.log(day_to_night_overlap())\n// console.log(night_to_day())\n// console.log(accumalatedTime)\n\n\n\n\n\n\n\nexport default PaymentGenerator;\n\n// setDayTime(dayTime)\n// setDayTimeBilling(daytime_billing)\n// setNightTime(night_overlap_time)\n// setNightTimeBilling(night_time_billing)\n\n\n\n// totalbilling = Math.round((nighttime_billing + overlap_billing + Number.EPSILON) * 100) / 100\n// useEffect(() => {\n//     calculate_money()\n// }, [calculate_money])\n\n        \n    // var count_down_hours = Math.round((accumalatedTime - currentTime) / 100)\n    // var totalbilling\n\n    // var reg_day_time_min_algorythm\n    // var currentTime_hr\n    // var currentTime_min\n\n    // var night_overlap_cost\n    // var day_overlap_time\n    // var day_overlap_cost\n    // var nighttimeHour\n    // var nighttimeMin\n    // var nighttime_billing\n    // var newDayTime_hour\n    // var newDayTime_min\n    // var newNightTIme_hour\n    // var newNightTIme_min\n\n    // var overlap_billing\n    // var daytimeHour\n    // var daytimeMin\n    // var dayTime\n    // var totalbilling\n    // var nightTime\n    // var night_time_billing\n    // var day_rate_max = 3\n    // var night_rate_max = 5\n    // var totalCost\n    // setbillings(dayTime, daytime_billing, 0, 0, daytime_billing)\n    // setbillings(0, 0, nightTime, night_time_billing, night_time_billing)\n    // Day algor\n\n    // Night\n\n    // const finding_remaining_hours = 18 - timeDate.getHours()\n    // if((setLimit/10) >= day_rate_max && (setLimit/10) <= finding_remaining_hours && accumalatedTime < 1800){ \n    //     totalCost = totalCost + 100\n    //     setBilling(100)\n    // }\n    // else{ \n    //     setBilling(totalbilling)\n    // }\n\n\n\n    // const finding_remaining_hours = 30 - timeDate.getHours()\n    // setBilling(night_time_billing) \n    // if((setLimit/10) >= night_rate_max && (setLimit/10) <= finding_remaining_hours && accumalatedTime <= 2359 || accumalatedTime <= 600){ \n    // setBilling(100)\n    // }\n    // else{ \n    // setBilling(totalbilling)\n    // }\n\n\n\n\n    // Day to night\n\n\n\n\n\n\n\n\n\n\n\n    //         // NIGHT OVERLAPPING TO DAY \n    //         if(currentTime <= 600 && accumalatedTime > 600){ //current_time >\n\n    //                 day_overlap_time = accumalatedTime - 600\n    //                 console.log()\n    //                 day_overlap_cost = Math.floor(day_overlap_time * .07) //.07 is dollar value of 4 dollars per hour\n\n    //                 nighttimeHour = Math.floor((600-currentTime) / 100) // selected hours before night time\n    //                 nighttimeMin = Math.floor(60 - (currentTime % 100))// selected mins before night time\n    //                 nightTime = parseInt(`${nighttimeHour}${nighttimeMin}`)\n    //                 nighttime_billing = nighttimeHour * night_hourly_rate\n\n\n    //                 if(day_overlap_time > 99){\n    //                  newDayTime_hour = Math.floor(day_overlap_time / 100)\n    //                  newDayTime_min = Math.floor(day_overlap_time % 100)\n    //                  overlap_billing = Math.round(((newDayTime_hour * 4) + (newDayTime_min * 0.07) + Number.EPSILON) * 100) / 100\n    //                  day_overlap_time = parseInt(`${newDayTime_hour}${newDayTime_min}`)\n    //                }else{\n    //                 overlap_billing = Math.round((day_overlap_cost + Number.EPSILON) * 100) / 100\n    //                }\n\n    //             }\n    // }\n\n\n\n    //             if(count_down_hours == 5){ \n    //                 console.log(`${count_down_hours}`)\n    //                 setBilling(5)\n    //                 // setBilling(totalbilling)\n    //             }else{\n    //                 setBilling(totalbilling)\n    //             }\n\n\n    // setDayTime(day_overlap_time)\n    // setDayTimeBilling(overlap_billing)\n    // setNightTime(nightTime)\n    // setNightTimeBilling(nighttime_billing)\n\n    // daytime_billing = 1800 - currentTime\n\n\n\n\n\n\n            // if (night_overlap_time < 60) {\n            //     night_overlap_cost = 1 * night_hourly_rate //.1 is dollar value of 6 dollars per hour\n            // }\n            // else {\n            //     night_overlap_cost = night_overlap_time * night_hourly_rate //.1 is dollar value of 6 dollars per hour\n            // }\n\n            // // Math.floor((1800-currentTime) / 100)\n            // daytimeHour = Math.floor((1800 - currentTime) / 100)// selected hours before night time\n            // reg_day_time_min_algorythm = Math.floor(60 - (currentTime % 100))\n            // if (reg_day_time_min_algorythm == 60) {\n            //     reg_day_time_min_algorythm = `${0}${0}`\n            // }\n            // daytimeMin = reg_day_time_min_algorythm // selected mins before night time\n            // dayTime = parseInt(`${daytimeHour}${daytimeMin}`)\n            // daytime_billing = daytimeHour * hourly_rate\n\n\n            // if (night_overlap_time > 99) {\n            //     newNightTIme_hour = Math.floor(night_overlap_time / 100)\n            //     newNightTIme_min = Math.floor(night_overlap_time % 100)\n            //     overlap_billing = (newNightTIme_hour * night_hourly_rate)\n            //     night_overlap_time = parseInt(`${newNightTIme_hour}${newNightTIme_min}`)\n            // } else {\n            //     overlap_billing = Math.round((night_overlap_cost + Number.EPSILON) * 100) / 100\n            // }\n            // if (night_overlap_time < 99 && night_overlap_time > 60) {\n            //     newNightTIme_hour = Math.floor(night_overlap_time / 60)\n            //     newNightTIme_min = Math.floor(night_overlap_time % 60)\n            //     overlap_billing = (newNightTIme_hour * night_hourly_rate)\n            //     night_overlap_time = parseInt(`${newNightTIme_hour}`)\n            // }\n\n            // if (accumalatedTime > 1800 && night_overlap_time >= night_rate_max) {\n            //     setBilling(100)\n            // }\n            // else {\n            //     // daytime_billing = 1800 - currentTime\n            //     totalbilling = daytime_billing + overlap_billing\n            //     // if the setLimit is greater than 6 and the  \n            //     console.log(accumalatedTime)\n            //     setDayTime(dayTime)\n            //     setDayTimeBilling(daytime_billing)\n            //     setNightTime(night_overlap_time)\n            //     setNightTimeBilling(overlap_billing)\n            // }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        // NIGHT GOING INTO DAY BREAK\n\n        // Set Selected time here for tracking and to be pushed to local storage by confirm BTN\n    //     setTime(parseInt(`${hours}${minutes}`))\n    // }, [hours, minutes])\n\n        //    THEY ARE HERE\n            // night_overlap_time = Math.round((night_overlap_cost + Number.EPSILON) * 100) / 100\n            // how much day time \n            // console.log(`/daytime: ${day_overlap_time}`)\n            // //day time cost \n            // console.log(`/daytime_billing: ${daytime_billing + overlap_billing}`)\n            // //how much night time\n            // console.log(`/nighttime: ${night_overlap_time}`)\n            // // night time cost \n            // console.log(`night Cost: $${overlap_billing}`)\n\n\n\n\n\n\n\n\n\n\n\n\n        // STRICTLY DAYTIME\n\n\n\n        // // DAYTIME OVERLAPPING TO NIGHT \n        // else \n\n        // // STRICTLY NIGHT CALCULATIONS\n        // else \n        // else \n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}