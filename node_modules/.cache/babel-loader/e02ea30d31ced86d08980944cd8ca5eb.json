{"ast":null,"code":"import React, { Component } from 'react';\n\nclass Time extends Component {\n  constructor(props) {\n    super(props);\n\n    this.set_expTime_to_secs = () => {\n      var output = this.sum_hours * 3600 + this.current_mins * 60;\n      return output;\n    };\n\n    this.start_time = () => {\n      return `${this.current_hour}:${this.current_mins}${this.output_meridian}`;\n    };\n\n    this.genrate_expired_time = scrolled_hours => {\n      this.sum_hours = this.current_hour + scrolled_hours;\n      var set_hour_limitors = [12, 24, 36, 48];\n      this.output_hour = this.sum_hours; // mins check\n\n      if (this.current_mins == 0) {\n        this.current_mins = '00';\n      }\n\n      for (var i = 0; i < set_hour_limitors.length; i++) {\n        if (this.sum_hours >= set_hour_limitors[i]) {\n          if (this.current_hour > 12 && this.sum_hours < 24) {\n            console.log(this.sum_hours);\n            this.meridian_units_switch = true;\n          } else if (this.sum_hours > 24) {\n            console.log(this.sum_hours + 'checking');\n            this.meridian_units_switch = !this.meridian_units_switch;\n          }\n\n          var iterate_set_hour_limitors = this.sum_hours - set_hour_limitors[i];\n          this.output_hour = iterate_set_hour_limitors == 0 ? 12 : iterate_set_hour_limitors;\n        }\n      }\n\n      this.set_expTime_to_secs();\n      this.output_meridian = this._switch_meridian_unit(this.meridian_units_switch);\n      return `${this.output_hour}:${this.current_mins < 10 ? `0${this.current_mins}` : this.current_mins}${this.output_meridian}`;\n    };\n\n    this._switch_meridian_unit = meridian_ref => {\n      if (meridian_ref) {\n        return this.meridian_units[1];\n      } else if (!meridian_ref) {\n        return this.meridian_units[0];\n      }\n    };\n\n    this.button_max_calculation = () => {\n      if (this.output_meridian == this.meridian_units[0]) {}\n\n      if (this.output_meridian == this.meridian_units[1]) {\n        console.log(24 - (this.output_hour + 12) + 6);\n      }\n    };\n\n    this.meridian_units = ['am', 'pm'];\n    this.__init_date__ = new Date();\n    this.current_hour = 19;\n    this.current_mins = this.__init_date__.getMinutes();\n    this.meridian_units_switch = this.current_hour > 12 ? true : false;\n    this.output_hour = '';\n    this.sum_hours = null;\n    this.days = 0;\n    this.output_meridian = '';\n  } // Let's assume 6 is the limit for all time change. \n  // So 6am & 6pm determines if it's night time rate or day time rate. \n  // We need to do the following.\n  // First we check to see Which time of the day we are in. This provides our limit Eg. 1800\n  // As per lot. We get the hourly cap base on price. Which means if the max rate is $5 and per hour is $1\n  // Then anything greater than 5 and lesser than 1800 will be considered Max Rate \n  // Else anything lesser than 5 hours will be calculated at daily rate. \n  // if calculated at daily rate surpasses the time cap then it's shift to nightly rate \n  // \n\n\n}\n\nexport default Time; // set_meridian_unit = (hours) => { \n// var time_expression = this.current_hour + hours\n// switch(this.current_hour){ \n//     case(this.current_hour > 12?this.current_hour: null): \n//     break;\n// }\n// }\n// }\n// const twelve_hour_time = () => { \n// \tif(expiredHours > 12){ \n// \t\texpiredHours = expiredHours - 12 \n// \t\ttwelve_hour_time()\n// \t}\n// }\n// twelve_hour_time()\n// const set_meridiem = () => { \n// \tvar time_expression = currentTime.getHours() + hours\n// \tconst start_meridiem = currentTime.getHours()\n// \tswitch(start_meridiem){ \n// \t\tcase(start_meridiem > 12? start_meridiem: null):\n// \t\tstart_time_unit = time_unit_[1]\n// \t\tbreak;\n// \t\tcase (start_meridiem < 12 ? start_meridiem: null): \n// \t\tstart_time_unit = time_unit_[0]\n// \t\tbreak;\n// \t}\n// \tswitch(time_expression){\n// \t\tcase (time_expression >= 12 && time_expression <= 24 ? time_expression : null):\n// \t\t\ttimeUnit = time_unit_[1]\n// \t\t\tbreak; \n// \t\tcase (time_expression > 24 || time_expression < 12 ? time_expression : null): \n// \t\t\ttimeUnit = time_unit_[0]\n// \t\t\tbreak;\n// \t}\n// \tif(expiredMinutes < 10){\n// \t\texpiredMinutes = `${0}${expiredMinutes}`\n// \t}\n// \tif(expiredMinutes == 60){ \n// \t\texpiredHours = expiredHours + 1\n// \t\texpiredMinutes = '00'\n// \t}\n// }\n// set_meridiem()","map":{"version":3,"sources":["/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Components/Timer/Time.js"],"names":["React","Component","Time","constructor","props","set_expTime_to_secs","output","sum_hours","current_mins","start_time","current_hour","output_meridian","genrate_expired_time","scrolled_hours","set_hour_limitors","output_hour","i","length","console","log","meridian_units_switch","iterate_set_hour_limitors","_switch_meridian_unit","meridian_ref","meridian_units","button_max_calculation","__init_date__","Date","getMinutes","days"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n\n\n\n\nclass Time extends Component {\n    constructor(props) {\n        super(props)\n        this.meridian_units = ['am', 'pm']\n        this.__init_date__ = new Date()\n        this.current_hour = 19\n        this.current_mins = this.__init_date__.getMinutes()\n        this.meridian_units_switch = this.current_hour > 12? true: false\n        this.output_hour = ''\n        this.sum_hours = null\n        this.days = 0\n        this.output_meridian = ''\n    }\n\n    set_expTime_to_secs = () =>{ \n        var output = ((this.sum_hours * 3600) + (this.current_mins * 60))\n        return output\n    }\n\n    start_time = () =>{ \n        return `${this.current_hour}:${this.current_mins}${this.output_meridian}`\n    }\n\n    genrate_expired_time = (scrolled_hours) => {\n        this.sum_hours = this.current_hour + scrolled_hours\n        var set_hour_limitors = [12, 24, 36, 48]\n        this.output_hour = this.sum_hours\n\n\n        // mins check\n        if (this.current_mins == 0) {\n            this.current_mins = '00'\n        }\n\n        for (var i = 0; i < set_hour_limitors.length; i++) {\n            if (this.sum_hours >=set_hour_limitors[i]) {\n                if(this.current_hour > 12 && this.sum_hours < 24){ \n                    console.log(this.sum_hours)\n                    this.meridian_units_switch = true\n                }else if(this.sum_hours > 24){\n                    console.log(this.sum_hours + 'checking')\n                    this.meridian_units_switch = !this.meridian_units_switch\n                }\n                var iterate_set_hour_limitors = this.sum_hours - set_hour_limitors[i]\n                this.output_hour = iterate_set_hour_limitors == 0?12:iterate_set_hour_limitors\n            }\n        }\n        \n        this.set_expTime_to_secs()\n        this.output_meridian = this._switch_meridian_unit(this.meridian_units_switch)\n        return `${this.output_hour}:${this.current_mins < 10 ? `0${this.current_mins}` : this.current_mins}${this.output_meridian}`\n    }\n\n\n\n    _switch_meridian_unit = (meridian_ref) => {\n        if(meridian_ref){\n            return this.meridian_units[1]\n        }\n        else if(!meridian_ref){ \n            return this.meridian_units[0]\n        }\n    }\n\n\n    button_max_calculation = () => { \n        if(this.output_meridian == this.meridian_units[0]){ \n            \n        }\n        if(this.output_meridian == this.meridian_units[1]){ \n            console.log(24 - (this.output_hour + 12) + 6)\n        }\n\n    }\n    // Let's assume 6 is the limit for all time change. \n    // So 6am & 6pm determines if it's night time rate or day time rate. \n    // We need to do the following.\n\n    // First we check to see Which time of the day we are in. This provides our limit Eg. 1800\n    // As per lot. We get the hourly cap base on price. Which means if the max rate is $5 and per hour is $1\n    // Then anything greater than 5 and lesser than 1800 will be considered Max Rate \n    // Else anything lesser than 5 hours will be calculated at daily rate. \n    // if calculated at daily rate surpasses the time cap then it's shift to nightly rate \n    // \n\n\n}\n\n\n\n\n\n\n\n\nexport default Time;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// set_meridian_unit = (hours) => { \n// var time_expression = this.current_hour + hours\n\n// switch(this.current_hour){ \n//     case(this.current_hour > 12?this.current_hour: null): \n\n//     break;\n// }\n// }\n\n\n\n\n// }\n\n\n\n\t// const twelve_hour_time = () => { \n\t// \tif(expiredHours > 12){ \n\t// \t\texpiredHours = expiredHours - 12 \n\t// \t\ttwelve_hour_time()\n\t// \t}\n\t// }\n\t// twelve_hour_time()\n\n\t// const set_meridiem = () => { \n\t// \tvar time_expression = currentTime.getHours() + hours\n\t// \tconst start_meridiem = currentTime.getHours()\n\n\t// \tswitch(start_meridiem){ \n\t// \t\tcase(start_meridiem > 12? start_meridiem: null):\n\t// \t\tstart_time_unit = time_unit_[1]\n\t// \t\tbreak;\n\t// \t\tcase (start_meridiem < 12 ? start_meridiem: null): \n\t// \t\tstart_time_unit = time_unit_[0]\n\t// \t\tbreak;\n\t// \t}\n\n\n\n\t// \tswitch(time_expression){\n\t// \t\tcase (time_expression >= 12 && time_expression <= 24 ? time_expression : null):\n\t// \t\t\ttimeUnit = time_unit_[1]\n\t// \t\t\tbreak; \n\t// \t\tcase (time_expression > 24 || time_expression < 12 ? time_expression : null): \n\t// \t\t\ttimeUnit = time_unit_[0]\n\t// \t\t\tbreak;\n\t// \t}\n\n\t// \tif(expiredMinutes < 10){\n\t// \t\texpiredMinutes = `${0}${expiredMinutes}`\n\t// \t}\n\t// \tif(expiredMinutes == 60){ \n\t// \t\texpiredHours = expiredHours + 1\n\t// \t\texpiredMinutes = '00'\n\t// \t}\n\n\t// }\n\t// set_meridiem()"]},"metadata":{},"sourceType":"module"}