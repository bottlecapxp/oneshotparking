{"ast":null,"code":"var _jsxFileName = \"/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Pages/SetTime.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport MaxConditions from '../Components/max_selection/MaxSelection';\nimport { PaymentContext } from '../Context/PaymentContext';\nimport \"../Pages/pages.css\";\nimport CircleTxtBtns from \"../Components/Buttons/CircleBtns_txt/CircleTxtBtns\";\nimport CircleBtnsImg from \"../Components/Buttons/CircleBtn_img/CircleBtnsImg\";\nimport Timer from \"../Components/Timer/Timer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SetTime = props => {\n  _s();\n\n  const {\n    darkMode\n  } = useContext(PaymentContext);\n  const [darkModeStyle, setDarkModeStyle] = useState({\n    globalContainer: 'global_container'\n  });\n  const [lot, setLot] = useState(0);\n  const [btnClickUpdate, setBtnClickUpdate] = useState(0.0);\n  const [val, setVal] = useState(0.0);\n  const [check, setCheck] = useState('false'); // Time update nested func for button onClick()\n\n  const timeUpdate = (val, checked) => {\n    var nValue = parseFloat(val);\n    setVal(nValue);\n    setCheck(checked); // check for match\n\n    if (val == btnClickUpdate) {\n      reset();\n    } else setBtnClickUpdate(nValue);\n  };\n\n  var localStorage_ = localStorage.getItem('max'); // We're getting the hour of expTime \n\n  var max_num = 0.00;\n  const date = new Date();\n  const hour = date.getHours();\n\n  const max_conditions = () => {\n    // get the localstorage exp time and match it with 6\n    // if match, we're going to assign the max_num variable to 12\n    // if it is not 6, then we're going to switch case and return the result to max_num\n    if (localStorage_ == 1) {\n      max_num = '0.12';\n      console.log('still shows under condition');\n    }\n\n    if (localStorage_ = 0) {\n      switch (hour) {\n        case hour < 18 && hour > 6 ? hour : '':\n          const remaining_time = 18 - hour;\n          max_num = parseFloat(`0.0${remaining_time}`); // console.log(`rem_hr ${remaining_time}`)\n\n          break;\n\n        case hour >= 18 && hour < 24 ? hour : '':\n          const rem_time = 24 - hour + 6;\n          max_num = rem_time > 9 ? max_num = parseFloat(`0.${rem_time}`) : parseFloat(`0.0${rem_time}`);\n          break;\n\n        case hour < 6 ? hour : '':\n          const rem_hr = 6 - hour;\n          max_num = `0.0${rem_hr}`;\n          break;\n      }\n\n      console.log('Not equal to 6');\n    }\n  };\n\n  console.log(localStorage_);\n  useEffect(() => {\n    localStorage.setItem('max', 0);\n\n    if (localStorage.getItem('lot') === null) {\n      // localStorage.setItem('lot', 4001)\n      localStorage.setItem('lot', props.match.params.lot);\n    } else if (localStorage.getItem('lot') != null) {\n      localStorage.removeItem('lot');\n      setTimeout(() => {\n        localStorage.setItem('lot', props.match.params.lot);\n      }, 10);\n    }\n\n    setLot(props.match.params.lot);\n\n    if (darkMode >= 1800 || darkMode <= 600) {\n      setDarkModeStyle({\n        globalContainer: 'global_container_dark'\n      });\n    }\n\n    if (btnClickUpdate == 0) {\n      setBtnClickUpdate(val);\n    }\n  }, [btnClickUpdate, localStorage_]);\n\n  const reset = () => {\n    setBtnClickUpdate(0.0);\n  }; // console.log(`let's see: ${max_num}`)\n  // console.log(btnClickUpdate)\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${darkModeStyle.globalContainer} choose_lot`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"content_holder\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer_holder\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lot-info\",\n          children: /*#__PURE__*/_jsxDEV(\"h5\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"LOT NUMBER:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 11\n            }, this), \" \", lot]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Timer, {\n          addTime: btnClickUpdate,\n          checked: check\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"align_timer_btns\",\n        children: [/*#__PURE__*/_jsxDEV(CircleTxtBtns, {\n          addTime: timeUpdate,\n          title: \"-1 Hr\",\n          time: \"-0.01\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(CircleTxtBtns, {\n          addTime: timeUpdate,\n          t: max_conditions,\n          title: \"Max\",\n          checked: 'true',\n          time: max_num\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(CircleTxtBtns, {\n          addTime: timeUpdate,\n          title: \"+1 Hr\",\n          time: \"0.01\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"align_timer_btns btns_img_container\",\n        children: /*#__PURE__*/_jsxDEV(CircleBtnsImg, {\n          title: \"Confirm\",\n          img: \"\",\n          class: \"plateCapture\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 3\n  }, this);\n};\n\n_s(SetTime, \"i2jCWUCiUtgT2c6edrxFF2WVWWY=\");\n\n_c = SetTime;\nexport default SetTime; //  else if(newCheck == false) {\n// \t\t\tswitch (hour) {\n// \t\t\t\tcase (hour < 18 && hour > 6 ? hour : ''):\n// \t\t\t\t\tconst remaining_time = 18 - hour\n// \t\t\t\t\tmax_num = parseFloat(`0.0${remaining_time}`)\n// \t\t\t\t\tlocalStorage.setItem('max', 1)\n// \t\t\t\t\t// console.log(`rem_hr ${remaining_time}`)\n// \t\t\t\t\tbreak;\n// \t\t\t\tcase (hour >= 18 && hour < 24 ? hour : ''):\n// \t\t\t\t\tconst rem_time = (24 - hour) + 6\n// \t\t\t\t\tmax_num = (rem_time > 9 ? max_num = parseFloat(`0.${rem_time}`) : parseFloat(`0.0${rem_time}`))\n// \t\t\t\t\tlocalStorage.setItem('max', 1)\n// \t\t\t\t\tbreak;\n// \t\t\t\tcase (hour < 6 ? hour : ''):\n// \t\t\t\t\tconst rem_hr = 6 - hour\n// \t\t\t\t\tmax_num = `0.0${rem_hr}`\n// \t\t\t\t\tlocalStorage.setItem('max', 1)\n// \t\t\t\t\tbreak;\n// \t\t\t\tdefault: \n// \t\t\t\t\tmax_num = '0.12'\n// \t\t\t\t\tbreak;\n// \t\t\t}\n// \t\t}\n\nvar _c;\n\n$RefreshReg$(_c, \"SetTime\");","map":{"version":3,"sources":["/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Pages/SetTime.js"],"names":["React","useContext","useEffect","useState","MaxConditions","PaymentContext","CircleTxtBtns","CircleBtnsImg","Timer","SetTime","props","darkMode","darkModeStyle","setDarkModeStyle","globalContainer","lot","setLot","btnClickUpdate","setBtnClickUpdate","val","setVal","check","setCheck","timeUpdate","checked","nValue","parseFloat","reset","localStorage_","localStorage","getItem","max_num","date","Date","hour","getHours","max_conditions","console","log","remaining_time","rem_time","rem_hr","setItem","match","params","removeItem","setTimeout"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react'\nimport MaxConditions from '../Components/max_selection/MaxSelection'\nimport { PaymentContext } from '../Context/PaymentContext'\nimport \"../Pages/pages.css\";\nimport CircleTxtBtns from \"../Components/Buttons/CircleBtns_txt/CircleTxtBtns\";\nimport CircleBtnsImg from \"../Components/Buttons/CircleBtn_img/CircleBtnsImg\";\nimport Timer from \"../Components/Timer/Timer\";\n\n\nconst SetTime = (props) => {\n\tconst { darkMode } = useContext(PaymentContext)\n\tconst [darkModeStyle, setDarkModeStyle] = useState({ globalContainer: 'global_container' })\n\tconst [lot, setLot] = useState(0)\n\tconst [btnClickUpdate, setBtnClickUpdate] = useState(0.0)\n\tconst [val, setVal] = useState(0.0)\n\tconst [check, setCheck] = useState('false')\n\n\n\t// Time update nested func for button onClick()\n\tconst timeUpdate = (val, checked) => {\n\t\tvar nValue = parseFloat(val)\n\t\tsetVal(nValue)\n\t\tsetCheck(checked)\n\n\t\t// check for match\n\t\tif (val == btnClickUpdate) {\n\t\t\treset()\n\t\t}\n\t\telse (\n\t\t\t\n\t\t\tsetBtnClickUpdate(nValue)\n\t\t)\n\t}\n\tvar localStorage_  = localStorage.getItem('max') \n\t// We're getting the hour of expTime \n\tvar max_num = 0.00\n\tconst date = new Date()\n\tconst hour = date.getHours()\n\tconst max_conditions = () => {\n\n\t\t// get the localstorage exp time and match it with 6\n\t\t// if match, we're going to assign the max_num variable to 12\n\t\t// if it is not 6, then we're going to switch case and return the result to max_num\n\t\tif (localStorage_ == 1) {\n\t\t\tmax_num = '0.12'\n\t\t\tconsole.log('still shows under condition')\n\t\t}\n\t\tif (localStorage_ = 0){ \n\t\t\t\tswitch (hour) {\n\t\t\t\tcase (hour < 18 && hour > 6 ? hour : ''):\n\t\t\t\t\tconst remaining_time = 18 - hour\n\t\t\t\t\tmax_num = parseFloat(`0.0${remaining_time}`)\n\t\t\t\t\n\t\t\t\t\t// console.log(`rem_hr ${remaining_time}`)\n\t\t\t\t\tbreak;\n\t\t\t\tcase (hour >= 18 && hour < 24 ? hour : ''):\n\t\t\t\t\tconst rem_time = (24 - hour) + 6\n\t\t\t\t\tmax_num = (rem_time > 9 ? max_num = parseFloat(`0.${rem_time}`) : parseFloat(`0.0${rem_time}`))\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase (hour < 6 ? hour : ''):\n\t\t\t\t\tconst rem_hr = 6 - hour\n\t\t\t\t\tmax_num = `0.0${rem_hr}`\n\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tconsole.log('Not equal to 6')\n\t\t}\n\t}\n\n\n\n\n\tconsole.log(localStorage_)\n\n\n\n\tuseEffect(() => {\n\t\n\t\tlocalStorage.setItem('max', 0)\n\t\tif (localStorage.getItem('lot') === null) {\n\t\t\t// localStorage.setItem('lot', 4001)\n\t\t\tlocalStorage.setItem('lot', props.match.params.lot)\n\t\t}\n\t\telse if (localStorage.getItem('lot') != null) {\n\t\t\tlocalStorage.removeItem('lot')\n\t\t\tsetTimeout(() => {\n\t\t\t\tlocalStorage.setItem('lot', props.match.params.lot)\n\t\t\t}, 10)\n\t\t}\n\t\tsetLot(props.match.params.lot)\n\t\tif (darkMode >= 1800 || darkMode <= 600) {\n\t\t\tsetDarkModeStyle({\n\t\t\t\tglobalContainer: 'global_container_dark',\n\t\t\t})\n\t\t}\n\n\t\tif (btnClickUpdate == 0) {\n\t\t\tsetBtnClickUpdate(val)\n\t\t}\n\t}, [btnClickUpdate, localStorage_])\n\n\n\tconst reset = () => {\n\t\tsetBtnClickUpdate(0.0)\n\t}\n\n\n\n\n\t// console.log(`let's see: ${max_num}`)\n\n\t// console.log(btnClickUpdate)\n\treturn (\n\t\t<div className={`${darkModeStyle.globalContainer} choose_lot`}>\n\n\t\t\t<div id='content_holder'>\n\t\t\t\t<div className='timer_holder'>\n\t\t\t\t\t<div className='lot-info'>\n\t\t\t\t\t\t<h5><strong>LOT NUMBER:</strong> {lot}</h5>\n\t\t\t\t\t</div>\n\t\t\t\t\t<Timer addTime={btnClickUpdate} checked={check} />\n\t\t\t\t</div>\n\t\t\t\t<div className='align_timer_btns'>\n\t\t\t\t\t<CircleTxtBtns addTime={timeUpdate} title='-1 Hr' time='-0.01' />\n\t\t\t\t\t<CircleTxtBtns addTime={timeUpdate} t={max_conditions} title='Max' checked={'true'} time={max_num} />\n\t\t\t\t\t<CircleTxtBtns addTime={timeUpdate} title='+1 Hr' time='0.01' />\n\t\t\t\t</div>\n\n\t\t\t\t<div className='align_timer_btns btns_img_container'>\n\t\t\t\t\t{/* <CircleBtnsImg title='' img='' /> */}\n\t\t\t\t\t<CircleBtnsImg title='Confirm' img='' class='plateCapture' />\n\t\t\t\t\t{/* <CircleBtnsImg title='' img='' /> */}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default SetTime;\n//  else if(newCheck == false) {\n// \t\t\tswitch (hour) {\n// \t\t\t\tcase (hour < 18 && hour > 6 ? hour : ''):\n// \t\t\t\t\tconst remaining_time = 18 - hour\n// \t\t\t\t\tmax_num = parseFloat(`0.0${remaining_time}`)\n// \t\t\t\t\tlocalStorage.setItem('max', 1)\n// \t\t\t\t\t// console.log(`rem_hr ${remaining_time}`)\n// \t\t\t\t\tbreak;\n// \t\t\t\tcase (hour >= 18 && hour < 24 ? hour : ''):\n// \t\t\t\t\tconst rem_time = (24 - hour) + 6\n// \t\t\t\t\tmax_num = (rem_time > 9 ? max_num = parseFloat(`0.${rem_time}`) : parseFloat(`0.0${rem_time}`))\n// \t\t\t\t\tlocalStorage.setItem('max', 1)\n// \t\t\t\t\tbreak;\n// \t\t\t\tcase (hour < 6 ? hour : ''):\n// \t\t\t\t\tconst rem_hr = 6 - hour\n// \t\t\t\t\tmax_num = `0.0${rem_hr}`\n// \t\t\t\t\tlocalStorage.setItem('max', 1)\n// \t\t\t\t\tbreak;\n// \t\t\t\tdefault: \n// \t\t\t\t\tmax_num = '0.12'\n// \t\t\t\t\tbreak;\n// \t\t\t}\n// \t\t}"]},"metadata":{},"sourceType":"module"}