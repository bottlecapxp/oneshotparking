{"ast":null,"code":"import{useEffect,useContext}from'react';import{PaymentContext}from'../../../Context/PaymentContext';var PaymentGenerator=function PaymentGenerator(hours,minutes){var _useContext=useContext(PaymentContext),setNightTime=_useContext.setNightTime,setNightTimeBilling=_useContext.setNightTimeBilling,setDayTime=_useContext.setDayTime,setDayTimeBilling=_useContext.setDayTimeBilling,setBilling=_useContext.setBilling,setTime=_useContext.setTime;var timeDate=new Date();var night_hourly_rate=1.75;var night_minute_rate=0;var hourly_rate=1.75;var minute_rate=0;//parseInt(`${timeDate.getHours()}${timeDate.getMinutes()}`)\nvar currentTime=parseInt(\"\".concat(timeDate.getHours()).concat(timeDate.getMinutes()));var setLimit=parseInt(\"\".concat(hours).concat(minutes));var accumalatedTime=currentTime+setLimit;var minuteCheck=accumalatedTime%100;var hourCheck=Math.floor(accumalatedTime/100);var count_down_hours=Math.round((accumalatedTime-currentTime)/100);var reg_day_time_min_algorythm;var currentTime_hr;var currentTime_min;var night_overlap_time;var night_overlap_cost;var day_overlap_time;var day_overlap_cost;var nighttimeHour;var nighttimeMin;var nighttime_billing;var newDayTime_hour;var newDayTime_min;var newNightTIme_hour;var newNightTIme_min;var newMinutes;var newHours;var daytime_billing;var overlap_billing;var daytimeHour;var daytimeMin;var dayTime;var totalbilling;var nightTime;var night_time_billing;var check_and_adjust=function check_and_adjust(){// Accumulated Time Check\nif(hourCheck>23){hourCheck=hourCheck-24;}if(minuteCheck>=60){newMinutes=minuteCheck-60;newHours=Math.floor(hourCheck+1);accumalatedTime=parseInt(\"\".concat(newHours).concat(newMinutes));if(newMinutes<10){accumalatedTime=parseInt(\"\".concat(newHours,\"0\").concat(newMinutes));}if(newMinutes===0){accumalatedTime=parseInt(\"\".concat(newHours,\"00\"));}}else{accumalatedTime=currentTime+setLimit;//Current time + Set Limit time\n}};check_and_adjust();useEffect(function(){// Day Time\nif(currentTime>600&&accumalatedTime<1800){dayTime=parseInt(\"\".concat(hours).concat(minutes));night_overlap_time=0;overlap_billing=0;daytime_billing=hours*hourly_rate;totalbilling=daytime_billing+overlap_billing;setDayTime(dayTime);setDayTimeBilling(daytime_billing);setNightTime(night_overlap_time);setNightTimeBilling(overlap_billing);if(count_down_hours==5){console.log(\"\".concat(count_down_hours));setBilling(5);// setBilling(totalbilling)\n}else{setBilling(totalbilling);}}// Day to night\nif(currentTime<=1800&&accumalatedTime>1800){//current_time >\nnight_overlap_time=accumalatedTime-1800;if(night_overlap_time<60){console.log(night_overlap_time);night_overlap_cost=1*night_hourly_rate;//.1 is dollar value of 6 dollars per hour\n}else{night_overlap_cost=night_overlap_time*night_hourly_rate;//.1 is dollar value of 6 dollars per hour\n}console.log(night_overlap_cost);// Math.floor((1800-currentTime) / 100)\ndaytimeHour=Math.floor((1800-currentTime)/100);// selected hours before night time\nreg_day_time_min_algorythm=Math.floor(60-currentTime%100);if(reg_day_time_min_algorythm===60){reg_day_time_min_algorythm=\"\".concat(0,0);}daytimeMin=reg_day_time_min_algorythm;// selected mins before night time\ndayTime=parseInt(\"\".concat(daytimeHour).concat(daytimeMin));daytime_billing=daytimeHour*hourly_rate;if(night_overlap_time>99){newNightTIme_hour=Math.floor(night_overlap_time/100);newNightTIme_min=Math.floor(night_overlap_time%100);overlap_billing=newNightTIme_hour*night_hourly_rate;night_overlap_time=parseInt(\"\".concat(newNightTIme_hour).concat(newNightTIme_min));}else{overlap_billing=Math.round((night_overlap_cost+Number.EPSILON)*100)/100;}if(night_overlap_time<99&&night_overlap_time>60){newNightTIme_hour=Math.floor(night_overlap_time/60);newNightTIme_min=Math.floor(night_overlap_time%60);overlap_billing=newNightTIme_hour*night_hourly_rate;night_overlap_time=parseInt(\"\".concat(newNightTIme_hour));}setDayTime(dayTime);setDayTimeBilling(daytime_billing);setNightTime(night_overlap_time);setNightTimeBilling(overlap_billing);// daytime_billing = 1800 - currentTime\ntotalbilling=daytime_billing+overlap_billing;if(count_down_hours==5){console.log(\"\".concat(count_down_hours));setBilling(5);// setBilling(totalbilling)\n}else{setBilling(totalbilling);}}// Night\nif(currentTime>1800&&accumalatedTime<2359||currentTime<600&&accumalatedTime<=600){dayTime=0;night_overlap_time=0;overlap_billing=0;daytime_billing=0;nightTime=parseInt(\"\".concat(hours));// Might need\nnight_time_billing=hours*night_hourly_rate;setDayTime(dayTime);setDayTimeBilling(daytime_billing);setNightTime(night_overlap_time);setNightTimeBilling(night_time_billing);setBilling(night_time_billing);}// NIGHT OVERLAPPING TO DAY \nif(currentTime<=600&&accumalatedTime>600){//current_time >\nday_overlap_time=accumalatedTime-600;day_overlap_cost=Math.floor(day_overlap_time*.07);//.07 is dollar value of 4 dollars per hour\nnighttimeHour=Math.floor((600-currentTime)/100);// selected hours before night time\nnighttimeMin=Math.floor(60-currentTime%100);// selected mins before night time\nnightTime=parseInt(\"\".concat(nighttimeHour).concat(nighttimeMin));nighttime_billing=nighttimeHour*night_hourly_rate+Math.floor(nighttimeMin*0.07);if(day_overlap_time>99){newDayTime_hour=Math.floor(day_overlap_time/100);newDayTime_min=Math.floor(day_overlap_time%100);overlap_billing=Math.round((newDayTime_hour*4+newDayTime_min*0.07+Number.EPSILON)*100)/100;day_overlap_time=parseInt(\"\".concat(newDayTime_hour).concat(newDayTime_min));}else{overlap_billing=Math.round((day_overlap_cost+Number.EPSILON)*100)/100;}}});if(count_down_hours==5){console.log(\"\".concat(count_down_hours));setBilling(5);// setBilling(totalbilling)\n}else{setBilling(totalbilling);}};// NIGHT GOING INTO DAY BREAK\n// Set Selected time here for tracking and to be pushed to local storage by confirm BTN\n//     setTime(parseInt(`${hours}${minutes}`))\n// }, [hours, minutes])\nexport default PaymentGenerator;//    THEY ARE HERE\n// night_overlap_time = Math.round((night_overlap_cost + Number.EPSILON) * 100) / 100\n// how much day time \n// console.log(`/daytime: ${day_overlap_time}`)\n// //day time cost \n// console.log(`/daytime_billing: ${daytime_billing + overlap_billing}`)\n// //how much night time\n// console.log(`/nighttime: ${night_overlap_time}`)\n// // night time cost \n// console.log(`night Cost: $${overlap_billing}`)\n// STRICTLY DAYTIME\n// // DAYTIME OVERLAPPING TO NIGHT \n// else \n// // STRICTLY NIGHT CALCULATIONS\n// else \n// else \n//     setDayTime(day_overlap_time)\n//     setDayTimeBilling(overlap_billing)\n//     setNightTime(nightTime)\n//     setNightTimeBilling(nighttime_billing)\n//     // daytime_billing = 1800 - currentTime\n//     totalbilling = Math.round((nighttime_billing + overlap_billing + Number.EPSILON) * 100) / 100","map":{"version":3,"sources":["/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Components/Financials/Calculator/PaymentGenerator.js"],"names":["useEffect","useContext","PaymentContext","PaymentGenerator","hours","minutes","setNightTime","setNightTimeBilling","setDayTime","setDayTimeBilling","setBilling","setTime","timeDate","Date","night_hourly_rate","night_minute_rate","hourly_rate","minute_rate","currentTime","parseInt","getHours","getMinutes","setLimit","accumalatedTime","minuteCheck","hourCheck","Math","floor","count_down_hours","round","reg_day_time_min_algorythm","currentTime_hr","currentTime_min","night_overlap_time","night_overlap_cost","day_overlap_time","day_overlap_cost","nighttimeHour","nighttimeMin","nighttime_billing","newDayTime_hour","newDayTime_min","newNightTIme_hour","newNightTIme_min","newMinutes","newHours","daytime_billing","overlap_billing","daytimeHour","daytimeMin","dayTime","totalbilling","nightTime","night_time_billing","check_and_adjust","console","log","Number","EPSILON"],"mappings":"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","sourcesContent":["import { useEffect, useContext } from 'react'\nimport { PaymentContext } from '../../../Context/PaymentContext'\n\n\n\n\n\n\nconst PaymentGenerator = (hours, minutes) => {\n    const {setNightTime, setNightTimeBilling, setDayTime, setDayTimeBilling, setBilling, setTime,} = useContext(PaymentContext)\n    const timeDate = new Date()\n    const night_hourly_rate = 1.75\n    const night_minute_rate = 0\n    const hourly_rate = 1.75\n    const minute_rate = 0\n    //parseInt(`${timeDate.getHours()}${timeDate.getMinutes()}`)\n    var currentTime = parseInt(`${timeDate.getHours()}${timeDate.getMinutes()}`)\n    var setLimit = parseInt(`${hours}${minutes}`)\n    var accumalatedTime = currentTime + setLimit\n    var minuteCheck = accumalatedTime % 100\n    var hourCheck =  Math.floor(accumalatedTime / 100)\n    var count_down_hours = Math.round((accumalatedTime - currentTime) / 100)\n\n    var reg_day_time_min_algorythm\n    var currentTime_hr\n    var currentTime_min\n    var night_overlap_time\n    var night_overlap_cost\n    var day_overlap_time\n    var day_overlap_cost\n    var nighttimeHour\n    var nighttimeMin\n    var nighttime_billing\n    var newDayTime_hour\n    var newDayTime_min\n    var newNightTIme_hour\n    var newNightTIme_min\n    var newMinutes\n    var newHours\n    var daytime_billing\n    var overlap_billing\n    var daytimeHour\n    var daytimeMin\n    var dayTime\n    var totalbilling\n    var nightTime\n    var night_time_billing\n\nconst check_and_adjust = () => {\n// Accumulated Time Check\nif(hourCheck > 23){\n    hourCheck = hourCheck - 24\n}\nif( minuteCheck >= 60){\n    newMinutes = minuteCheck - 60\n    newHours = Math.floor((hourCheck) + 1)\n    accumalatedTime = parseInt(`${newHours}${newMinutes}`)\nif(newMinutes < 10){\n        accumalatedTime = parseInt(`${newHours}0${newMinutes}`)\n}\nif(newMinutes === 0){\n    accumalatedTime = parseInt(`${newHours}00`)\n}\n}else {\n    accumalatedTime = currentTime + setLimit //Current time + Set Limit time\n\n}\n}\ncheck_and_adjust()\n\n\n    useEffect(()=>{\n        // Day Time\n        if(currentTime > 600 && accumalatedTime < 1800){\n            dayTime = parseInt(`${hours}${minutes}`)\n            night_overlap_time = 0\n            overlap_billing = 0\n            daytime_billing = hours * hourly_rate \n            totalbilling = daytime_billing + overlap_billing\n    \n            setDayTime(dayTime)\n            setDayTimeBilling(daytime_billing)\n            setNightTime(night_overlap_time)\n            setNightTimeBilling(overlap_billing)\n            if(count_down_hours == 5){ \n                console.log(`${count_down_hours}`)\n                setBilling(5)\n                // setBilling(totalbilling)\n            }else{\n                setBilling(totalbilling)\n            }\n        }\n\n        // Day to night\n        if(currentTime <= 1800 && accumalatedTime > 1800){ //current_time >\n            night_overlap_time = accumalatedTime - 1800\n            if(night_overlap_time < 60){ \n                console.log(night_overlap_time)\n                night_overlap_cost = 1 * night_hourly_rate //.1 is dollar value of 6 dollars per hour\n            } \n            else{\n                night_overlap_cost = night_overlap_time * night_hourly_rate //.1 is dollar value of 6 dollars per hour\n            }\n            \n            console.log(night_overlap_cost)\n            // Math.floor((1800-currentTime) / 100)\n            daytimeHour = Math.floor((1800 - currentTime) / 100)// selected hours before night time\n            reg_day_time_min_algorythm = Math.floor(60 - (currentTime % 100))\n            if(reg_day_time_min_algorythm === 60){\n                reg_day_time_min_algorythm = `${0}${0}`\n            }\n            daytimeMin = reg_day_time_min_algorythm // selected mins before night time\n            dayTime = parseInt(`${daytimeHour}${daytimeMin}`)\n            daytime_billing = daytimeHour * hourly_rate\n        \n\n            if(night_overlap_time > 99){\n             newNightTIme_hour = Math.floor(night_overlap_time / 100)\n             newNightTIme_min = Math.floor(night_overlap_time % 100)\n             overlap_billing = (newNightTIme_hour * night_hourly_rate)\n             night_overlap_time = parseInt(`${newNightTIme_hour}${newNightTIme_min}`)\n           }else{\n            overlap_billing = Math.round((night_overlap_cost + Number.EPSILON) * 100) / 100\n            }\n           if(night_overlap_time < 99 && night_overlap_time > 60 ){\n            newNightTIme_hour = Math.floor(night_overlap_time / 60)\n            newNightTIme_min = Math.floor(night_overlap_time % 60)\n            overlap_billing = (newNightTIme_hour * night_hourly_rate)\n            night_overlap_time = parseInt(`${newNightTIme_hour}`)\n           }\n\n            setDayTime(dayTime)\n            setDayTimeBilling(daytime_billing)\n            setNightTime(night_overlap_time)\n            setNightTimeBilling(overlap_billing)\n           \n            // daytime_billing = 1800 - currentTime\n            totalbilling = daytime_billing + overlap_billing\n            if(count_down_hours == 5){ \n                console.log(`${count_down_hours}`)\n                setBilling(5)\n                // setBilling(totalbilling)\n            }else{\n                setBilling(totalbilling)\n            }\n        }\n\n        // Night\n        if(currentTime > 1800 && accumalatedTime < 2359 || currentTime < 600 && accumalatedTime <= 600 ){\n                dayTime=0\n                night_overlap_time = 0\n                overlap_billing = 0\n                daytime_billing = 0\n                nightTime = parseInt(`${hours}`) // Might need\n                night_time_billing = hours * night_hourly_rate\n    \n       \n                setDayTime(dayTime)\n                setDayTimeBilling(daytime_billing)\n                setNightTime(night_overlap_time)\n                setNightTimeBilling(night_time_billing)\n                setBilling(night_time_billing) \n               \n            } \n            \n            // NIGHT OVERLAPPING TO DAY \n            if(currentTime <= 600 && accumalatedTime > 600){ //current_time >\n            \n                    day_overlap_time = accumalatedTime - 600\n                    day_overlap_cost = Math.floor(day_overlap_time * .07) //.07 is dollar value of 4 dollars per hour\n        \n                    nighttimeHour = Math.floor((600-currentTime) / 100) // selected hours before night time\n                    nighttimeMin = Math.floor(60 - (currentTime % 100))// selected mins before night time\n                    nightTime = parseInt(`${nighttimeHour}${nighttimeMin}`)\n                    nighttime_billing = nighttimeHour * night_hourly_rate + Math.floor(nighttimeMin * 0.07)\n                  \n        \n                    if(day_overlap_time > 99){\n                     newDayTime_hour = Math.floor(day_overlap_time / 100)\n                     newDayTime_min = Math.floor(day_overlap_time % 100)\n                     overlap_billing = Math.round(((newDayTime_hour * 4) + (newDayTime_min * 0.07) + Number.EPSILON) * 100) / 100\n                     day_overlap_time = parseInt(`${newDayTime_hour}${newDayTime_min}`)\n                   }else{\n                    overlap_billing = Math.round((day_overlap_cost + Number.EPSILON) * 100) / 100\n                   }\n\n                }\n\n\n\n\n\n\n        \n    })\n\n            if(count_down_hours == 5){ \n                console.log(`${count_down_hours}`)\n                setBilling(5)\n                // setBilling(totalbilling)\n            }else{\n                setBilling(totalbilling)\n            }\n        }\n\n        // NIGHT GOING INTO DAY BREAK\n\n        // Set Selected time here for tracking and to be pushed to local storage by confirm BTN\n    //     setTime(parseInt(`${hours}${minutes}`))\n    // }, [hours, minutes])\n\n\n\nexport default PaymentGenerator;\n \n        //    THEY ARE HERE\n            // night_overlap_time = Math.round((night_overlap_cost + Number.EPSILON) * 100) / 100\n            // how much day time \n            // console.log(`/daytime: ${day_overlap_time}`)\n            // //day time cost \n            // console.log(`/daytime_billing: ${daytime_billing + overlap_billing}`)\n            // //how much night time\n            // console.log(`/nighttime: ${night_overlap_time}`)\n            // // night time cost \n            // console.log(`night Cost: $${overlap_billing}`)\n\n\n\n\n\n\n\n\n\n\n\n\n        // STRICTLY DAYTIME\n      \n\n\n        // // DAYTIME OVERLAPPING TO NIGHT \n        // else \n        \n        // // STRICTLY NIGHT CALCULATIONS\n        // else \n        // else \n           \n\n            \n\n            \n        //     setDayTime(day_overlap_time)\n        //     setDayTimeBilling(overlap_billing)\n        //     setNightTime(nightTime)\n        //     setNightTimeBilling(nighttime_billing)\n           \n        //     // daytime_billing = 1800 - currentTime\n        //     totalbilling = Math.round((nighttime_billing + overlap_billing + Number.EPSILON) * 100) / 100"]},"metadata":{},"sourceType":"module"}