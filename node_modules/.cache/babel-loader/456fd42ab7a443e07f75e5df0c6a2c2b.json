{"ast":null,"code":"var _jsxFileName = \"/Users/bottlecapmedia/Desktop/OneShot Parking/src/Pages/CountDown.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect } from 'react';\nimport { PaymentContext } from '../Context/PaymentContext';\nimport Receipt from '../Components/Receipt/Receipt';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CountDown = () => {\n  _s();\n\n  const {\n    expiredTime\n  } = useContext(PaymentContext);\n  const getSetTime = localStorage.getItem('timeStore');\n  const [showReceipt, setShowReceipt] = useState(false);\n  const [containerStyling, setContainerStyling] = useState({\n    divStyle: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    buttonStyle: {\n      marginTop: '30px',\n      border: '1px solid #848484',\n      fontSize: '13px',\n      // border: '1px solid #FF4F4F',\n      padding: '10px',\n      borderRadius: '10px',\n      margin: '0px 5px 0px 5px'\n    },\n    buttonDiv: {\n      width: '100%',\n      display: 'flex',\n      justifyContent: 'space-around'\n    }\n  });\n  const [countDown, setCountDown] = useState({\n    hours: Math.round(getSetTime / 100),\n    mins: getSetTime % 100,\n    secs: 60,\n    ms: 1000\n  });\n\n  const toggle = () => {\n    setShowReceipt(!showReceipt);\n  }; // Set mutable variables for updates\n\n\n  var updated_hours = countDown.hours,\n      updated_mins = countDown.mins,\n      updated_secs = countDown.secs,\n      updated_ms = countDown.ms;\n  useEffect(() => {\n    setInterval(() => {\n      setCountDown({\n        hours: updated_hours,\n        mins: updated_mins,\n        secs: updated_secs,\n        ms: updated_ms\n      });\n    }, 1000);\n  }, []);\n\n  const run = () => {\n    updated_secs--;\n\n    if (updated_ms === 0) {\n      updated_secs--;\n      updated_ms = 100;\n    }\n\n    if (updated_secs === 0) {\n      updated_mins--;\n      updated_secs = 60;\n    }\n\n    if (updated_mins === 0) {\n      updated_hours--;\n      updated_mins = 60;\n    }\n\n    if (updated_hours === 0) {\n      updated_hours = '00';\n    } // console.log(updated_secs)\n\n\n    setTimeout(run, 1000);\n  };\n\n  run(); // setInterval(run, 1000)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"global_container choose_lot\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: containerStyling.divStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"circleAnimation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"countdown_digits_holder\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"countdown_adjustment\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            style: {\n              marginBottom: '0px'\n            },\n            children: \"Active Session\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"countdown_digits\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"digits\",\n              children: `${countDown.hours}h`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"digits\",\n              children: `${countDown.mins}m`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"digits\",\n              children: [`${countDown.secs}`, \"s\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this), showReceipt ? /*#__PURE__*/_jsxDEV(Receipt, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 22\n      }, this) : '', /*#__PURE__*/_jsxDEV(\"h4\", {\n        style: {\n          marginTop: '30%'\n        },\n        children: [\"Your Time Expires at: \", expiredTime]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: containerStyling.buttonDiv,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: containerStyling.buttonStyle,\n          children: \"Extend My Time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          onClick: toggle,\n          style: containerStyling.buttonStyle,\n          children: \"View My Receipt\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 1\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CountDown, \"4UgkBADMDC6Yv8SumXwI0MWmQVc=\");\n\n_c = CountDown;\n\nvar _c;\n\n$RefreshReg$(_c, \"CountDown\");","map":{"version":3,"sources":["/Users/bottlecapmedia/Desktop/OneShot Parking/src/Pages/CountDown.js"],"names":["React","useState","useContext","useEffect","PaymentContext","Receipt","CountDown","expiredTime","getSetTime","localStorage","getItem","showReceipt","setShowReceipt","containerStyling","setContainerStyling","divStyle","display","flexDirection","alignItems","justifyContent","buttonStyle","marginTop","border","fontSize","padding","borderRadius","margin","buttonDiv","width","countDown","setCountDown","hours","Math","round","mins","secs","ms","toggle","updated_hours","updated_mins","updated_secs","updated_ms","setInterval","run","setTimeout","marginBottom"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect} from 'react'\nimport {PaymentContext} from '../Context/PaymentContext'\nimport Receipt from '../Components/Receipt/Receipt'\n\n\n\nexport const CountDown = () => {\n    const { expiredTime } = useContext(PaymentContext)\n    const getSetTime = localStorage.getItem('timeStore')\n    const [showReceipt, setShowReceipt] = useState(false)\n    const [containerStyling, setContainerStyling] = useState({\n        divStyle:{\n            display:'flex', \n            flexDirection: 'column', \n            alignItems: 'center', \n            justifyContent: 'center'\n        },\n        buttonStyle:{\n            marginTop: '30px',\n            border: '1px solid #848484',\n            fontSize: '13px',\n            // border: '1px solid #FF4F4F',\n            padding: '10px',\n            borderRadius: '10px', \n            margin: '0px 5px 0px 5px'\n        },\n        buttonDiv: {\n            width: '100%',\n            display: 'flex',\n            justifyContent: 'space-around'\n        }\n    })\n    const [countDown, setCountDown] = useState({\n        hours: Math.round(getSetTime / 100),\n        mins: getSetTime % 100,\n        secs: 60,\n        ms: 1000\n    })\n\n    const toggle = () =>{\n        setShowReceipt(!showReceipt)\n    }\n    // Set mutable variables for updates\n    var updated_hours = countDown.hours, updated_mins = countDown.mins,  updated_secs = countDown.secs, updated_ms = countDown.ms\n\n    useEffect(()=>{\n        setInterval(()=>{\n            setCountDown({\n                hours: updated_hours,\n                mins: updated_mins, \n                secs: updated_secs,\n                ms: updated_ms\n            })      \n        }, 1000)\n\n\n    },[])\n\n\n\n    const run = () => { \n        updated_secs--\n        if(updated_ms === 0){\n            updated_secs--\n            updated_ms = 100\n        }\n        if(updated_secs === 0){\n            updated_mins--\n            updated_secs = 60\n        }\n        if(updated_mins === 0){\n            updated_hours--\n            updated_mins = 60\n        }\n        \n        if(updated_hours === 0){\n            updated_hours = '00'\n        }\n        // console.log(updated_secs)\n        setTimeout(run, 1000)\n    }\nrun()\n    // setInterval(run, 1000)\n\n    \n    return (\n        <div className='global_container choose_lot'>\n<div style={containerStyling.divStyle}>\n<div className='circleAnimation'></div>\n            <div className='countdown_digits_holder'>\n                <div className='countdown_adjustment'>\n                    <h3 style={{marginBottom: '0px'}}>Active Session</h3>\n                <div className='countdown_digits'>\n                    <span className='digits'>{`${countDown.hours}h`}</span>\n                    <span className='digits'>{`${countDown.mins}m`}</span>\n                    <span className='digits' >{`${countDown.secs}`}s</span>\n                </div>\n                </div>\n        \n        </div>\n        {showReceipt?<Receipt />:'' }\n   \n        <h4 style={{marginTop: '30%'}}>Your Time Expires at: {expiredTime}</h4>\n        <div style={containerStyling.buttonDiv}>\n        <span style={containerStyling.buttonStyle}>Extend My Time</span>\n        <span onClick={toggle} style={containerStyling.buttonStyle}>View My Receipt</span>\n        </div>\n\n</div>\n\n            {/* Count down time */}\n            {/* Buttone to Extend time here */}\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}