{"ast":null,"code":"import React, { Component } from 'react';\n\nclass Time extends Component {\n  constructor(props) {\n    super(props);\n\n    this.set_expTime_to_secs = () => {\n      var output = this.sum_hours * 3600 + this.current_mins * 60;\n      return output;\n    };\n\n    this.start_time = () => {\n      return `${this.current_hour}:${this.current_mins}${this.output_meridian}`;\n    };\n\n    this.genrate_expired_time = (scrolled_hours, scrolled_mins) => {\n      this.sum_hours = this.current_hour + scrolled_hours;\n      console.log(this.sum_hours);\n      console.log(this.current_hour);\n      console.log(scrolled_hours);\n      var set_hour_limitors = [12, 24, 36, 48];\n      this.output_hour = this.sum_hours;\n      var button_meridian = this.output_meridian; // mins check\n\n      if (this.current_mins == 0) {\n        this.current_mins = '00';\n      }\n\n      for (var i = 0; i < set_hour_limitors.length; i++) {\n        if (this.sum_hours >= set_hour_limitors[i]) {\n          if (this.sum_hours >= set_hour_limitors[0] && this.sum_hours < set_hour_limitors[1] || this.sum_hours >= set_hour_limitors[2] && this.sum_hours < set_hour_limitors[3]) {\n            this.meridian_units_switch = true;\n          }\n\n          if (this.sum_hours >= set_hour_limitors[1] && this.sum_hours < set_hour_limitors[2]) {\n            this.meridian_units_switch = false;\n          }\n\n          var iterate_set_hour_limitors = this.sum_hours - set_hour_limitors[i];\n          this.output_hour = iterate_set_hour_limitors == 0 ? 12 : iterate_set_hour_limitors;\n        }\n      }\n\n      this.set_expTime_to_secs();\n      this.output_meridian = this._switch_meridian_unit(this.meridian_units_switch);\n      localStorage.setItem('_time_btn_hr', this.current_mins + scrolled_mins >= 60 ? this.output_hour + 1 : this.output_hour);\n      localStorage.setItem('_time_btn_meridian', this.output_meridian);\n      return `${this.current_mins + scrolled_mins >= 60 ? this.output_hour + 1 : this.output_hour}:${this.current_mins + scrolled_mins < 10 && this.current_mins + scrolled_mins != 0 ? `0${this.current_mins + scrolled_mins}` : this.current_mins + scrolled_mins >= 60 ? '00' : this.current_mins + scrolled_mins}${this.output_meridian}`;\n    };\n\n    this._switch_meridian_unit = meridian_ref => {\n      if (meridian_ref) {\n        return this.meridian_units[1];\n      } else if (!meridian_ref) {\n        return this.meridian_units[0];\n      }\n    };\n\n    this.meridian_units = ['am', 'pm'];\n    this.__init_date__ = new Date();\n    this.current_hour = this.__init_date__.getHours();\n    this.current_mins = this.__init_date__.getMinutes();\n    this.meridian_units_switch = this.current_hour > 12 ? true : false;\n    this.output_hour = '';\n    this.sum_hours = null;\n    this.days = 0;\n    this.output_meridian = '';\n    this.button_output = '';\n  }\n\n}\n\nexport default Time; // const rate_change_limitors = [6, 12, 18, 24]\n// const hour_wheel_calc = 0.0417\n// const min_wheel_calc = hour_wheel_calc / 60\n// var generating_hours = button_meridian == this.meridian_units[1]? parseInt(button_hours) + 12: button_hours\n// // returns either 1..12 || 13..23  \"We need to fix a bug 12 turns to 24 and midnight to 12\"\n// if(generating_hours == 12){ \n//     generating_hours = 12\n// }\n// if(button_hours != rate_change_limitors[0] || button_hours != rate_change_limitors[2]){ \n//     if(generating_hours > rate_change_limitors[0] && generating_hours < rate_change_limitors[2]){ \n//         this.button_output = rate_change_limitors[2] - generating_hours\n//     }else\n//     if(generating_hours > rate_change_limitors[2] && generating_hours < rate_change_limitors[3]){ \n//         this.button_output = (rate_change_limitors[3] - generating_hours) + rate_change_limitors[0]\n//     }else\n//     if(generating_hours < rate_change_limitors[0]){ \n//         this.button_output = rate_change_limitors[0] - generating_hours\n//     }\n// }\n// if(button_hours == rate_change_limitors[0] || button_hours == rate_change_limitors[2]){ \n//     this.button_output = 12\n// }\n// if(localStorage.getItem('_time_mdn_time') == this.meridian_units[0]){\n//     var remaining_time = 6 - localStorage.getItem('_time_btn_hr')\n//     if(localStorage.getItem('_time_btn_hr') < 6){ \n//         remaining_time >= night_limit?return_time=remaining_time:return_time = remaining_time + 12\n//     }\n//     if(localStorage.getItem('_time_btn_hr') >= 6 && localStorage.getItem('_time_btn_hr') < 12){ \n//         var rem_time = 12 - localStorage.getItem('_time_btn_hr')\n//         return_time=rem_time + 6\n//         // rem_time >= day_limit?return_time=(rem_time + 12) * hour_wheel_calc:return_time=(rem_time + 12) * hour_wheel_calc\n//     }\n// } \n// if(localStorage.getItem('_time_mdn_time') == this.meridian_units[1]){\n//     var night_remaining_time = 6 - localStorage.getItem('_time_btn_hr')\n//     // generate daily\n//     if(localStorage.getItem('_time_btn_hr') < 6){\n//         var daytime_rem_hr = 6 - localStorage.getItem('_time_btn_hr')\n//         night_remaining_time >= day_limit?return_time=daytime_rem_hr:return_time=daytime_rem_hr + 12\n//     }\n//     if(localStorage.getItem('_time_btn_hr') >= 6 && localStorage.getItem('_time_btn_hr') < 12 ){\n//         var night_rem_time = 12 - localStorage.getItem('_time_btn_hr')\n//         return_time = night_rem_time + 6\n//     }\n// }\n// console.log(return_time)\n// if(this.output_hour >= 6 && this.output_hour < 12){ \n//     const max_calculation = (12 - this.output_hour) + 6\n//     if(max_calculation >= day_limit){ \n//         return max_calculation * hour_wheel_calc\n//         console.log(max_calculation)\n//     }\n//     if(max_calculation < day_limit){ \n//         return (max_calculation + 12) * hour_wheel_calc\n//         console.log(max_calculation + 12)\n//     }\n// }\n// if(this.output_hour < 6){ \n//     const night_max_calculation = 6 - this.output_hour\n//     if(night_max_calculation < night_limit){ \n//         return (night_max_calculation + 12) * hour_wheel_calc\n//         console.log(night_max_calculation + 12)\n//     }\n//     return night_max_calculation * hour_wheel_calc\n//     console.log(night_max_calculation)\n// }\n// if(this.output_meridian == this.meridian_units[1]){ \n//     if(this.output_hour <= 6){\n//         const calculate_remaining_time = 6 - this.output_hour\n//         if(calculate_remaining_time < day_limit){ \n//             return (calculate_remaining_time + 12) * hour_wheel_calc\n//             console.log(calculate_remaining_time + 12)\n//         }\n//         return calculate_remaining_time * hour_wheel_calc\n//         console.log(calculate_remaining_time)\n//     }\n//     if(this.output_hour > 6 && this.output_hour <= 12){ \n//         const calc_rem_time = (12 - this.output) + 6\n//         if(calc_rem_time < night_limit){ \n//             console.log((calc_rem_time + 12) * hour_wheel_calc)\n//             return (calc_rem_time + 12) * hour_wheel_calc\n//             console.log(calc_rem_time + 12)\n//         }\n//         console.log(calc_rem_time * hour_wheel_calc)\n//         return calc_rem_time * hour_wheel_calc\n//         console.log(calc_rem_time)\n//     }\n//     // console.log(24 - (this.output_hour + 12) + 6)\n// }\n// set_meridian_unit = (hours) => { \n// var time_expression = this.current_hour + hours\n// switch(this.current_hour){ \n//     case(this.current_hour > 12?this.current_hour: null): \n//     break;\n// }\n// }\n// }\n// const twelve_hour_time = () => { \n// \tif(expiredHours > 12){ \n// \t\texpiredHours = expiredHours - 12 \n// \t\ttwelve_hour_time()\n// \t}\n// }\n// twelve_hour_time()\n// const set_meridiem = () => { \n// \tvar time_expression = currentTime.getHours() + hours\n// \tconst start_meridiem = currentTime.getHours()\n// \tswitch(start_meridiem){ \n// \t\tcase(start_meridiem > 12? start_meridiem: null):\n// \t\tstart_time_unit = time_unit_[1]\n// \t\tbreak;\n// \t\tcase (start_meridiem < 12 ? start_meridiem: null): \n// \t\tstart_time_unit = time_unit_[0]\n// \t\tbreak;\n// \t}\n// \tswitch(time_expression){\n// \t\tcase (time_expression >= 12 && time_expression <= 24 ? time_expression : null):\n// \t\t\ttimeUnit = time_unit_[1]\n// \t\t\tbreak; \n// \t\tcase (time_expression > 24 || time_expression < 12 ? time_expression : null): \n// \t\t\ttimeUnit = time_unit_[0]\n// \t\t\tbreak;\n// \t}\n// \tif(expiredMinutes < 10){\n// \t\texpiredMinutes = `${0}${expiredMinutes}`\n// \t}\n// \tif(expiredMinutes == 60){ \n// \t\texpiredHours = expiredHours + 1\n// \t\texpiredMinutes = '00'\n// \t}\n// }\n// set_meridiem()","map":{"version":3,"sources":["/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Components/Timer/Time.js"],"names":["React","Component","Time","constructor","props","set_expTime_to_secs","output","sum_hours","current_mins","start_time","current_hour","output_meridian","genrate_expired_time","scrolled_hours","scrolled_mins","console","log","set_hour_limitors","output_hour","button_meridian","i","length","meridian_units_switch","iterate_set_hour_limitors","_switch_meridian_unit","localStorage","setItem","meridian_ref","meridian_units","__init_date__","Date","getHours","getMinutes","days","button_output"],"mappings":"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,GAAoB,KAAKmB,aAAL,CAAmBE,QAAnB,EAApB;AACA,SAAKvB,YAAL,GAAoB,KAAKqB,aAAL,CAAmBG,UAAnB,EAApB;AACA,SAAKV,qBAAL,GAA6B,KAAKZ,YAAL,GAAoB,EAApB,GAAwB,IAAxB,GAA8B,KAA3D;AACA,SAAKQ,WAAL,GAAmB,EAAnB;AACA,SAAKX,SAAL,GAAiB,IAAjB;AACA,SAAK0B,IAAL,GAAY,CAAZ;AACA,SAAKtB,eAAL,GAAuB,EAAvB;AACA,SAAKuB,aAAL,GAAqB,EAArB;AAEH;;AAdwB;;AAsE7B,eAAehC,IAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIQ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAeR;AACA;AAEA;AACA;AAEA;AACA;AACA;AAKA;AAIC;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["import React, { Component } from 'react'\n\n\n\n\nclass Time extends Component {\n    constructor(props) {\n        super(props)\n        this.meridian_units = ['am', 'pm']\n        this.__init_date__ = new Date()\n        this.current_hour = this.__init_date__.getHours()\n        this.current_mins = this.__init_date__.getMinutes()\n        this.meridian_units_switch = this.current_hour > 12? true: false\n        this.output_hour = ''\n        this.sum_hours = null\n        this.days = 0\n        this.output_meridian = ''\n        this.button_output = ''\n\n    }\n\n    set_expTime_to_secs = () =>{ \n        var output = ((this.sum_hours * 3600) + (this.current_mins * 60))\n        return output\n    }\n\n    start_time = () =>{ \n        return `${this.current_hour}:${this.current_mins}${this.output_meridian}`\n    }\n\n    genrate_expired_time = (scrolled_hours, scrolled_mins) => {\n        this.sum_hours = this.current_hour + scrolled_hours\n        console.log(this.sum_hours)\n        console.log(this.current_hour)\n        console.log(scrolled_hours)\n        var set_hour_limitors = [12, 24, 36, 48]\n        this.output_hour = this.sum_hours\n        var button_meridian = this.output_meridian\n\n        // mins check\n        if (this.current_mins == 0) {\n            this.current_mins = '00'\n        }\n\n        for (var i = 0; i < set_hour_limitors.length; i++) {\n            if (this.sum_hours >=set_hour_limitors[i]) {\n                if(this.sum_hours >= set_hour_limitors[0] && this.sum_hours < set_hour_limitors[1] || this.sum_hours >= set_hour_limitors[2] && this.sum_hours < set_hour_limitors[3]){\n                    this.meridian_units_switch = true\n                }\n                if(this.sum_hours >= set_hour_limitors[1] && this.sum_hours < set_hour_limitors[2]){ \n                    this.meridian_units_switch = false\n                }\n                var iterate_set_hour_limitors = this.sum_hours - set_hour_limitors[i]\n                this.output_hour = iterate_set_hour_limitors == 0?12:iterate_set_hour_limitors\n            }\n        }\n        \n        this.set_expTime_to_secs()\n        this.output_meridian = this._switch_meridian_unit(this.meridian_units_switch)\n        localStorage.setItem('_time_btn_hr', (this.current_mins + scrolled_mins) >= 60?this.output_hour +1:this.output_hour)\n        localStorage.setItem('_time_btn_meridian', this.output_meridian)\n        return `${(this.current_mins + scrolled_mins) >= 60?this.output_hour +1:this.output_hour}:${(this.current_mins + scrolled_mins) < 10 && (this.current_mins + scrolled_mins) != 0 ? `0${this.current_mins + scrolled_mins}` : (this.current_mins + scrolled_mins) >= 60? '00':(this.current_mins + scrolled_mins) }${this.output_meridian}`\n    }\n\n\n\n    _switch_meridian_unit = (meridian_ref) => {\n        if(meridian_ref){\n            return this.meridian_units[1]\n        }\n        else if(!meridian_ref){ \n            return this.meridian_units[0]\n        }\n    }\n}\nexport default Time;\n\n// const rate_change_limitors = [6, 12, 18, 24]\n// const hour_wheel_calc = 0.0417\n// const min_wheel_calc = hour_wheel_calc / 60\n// var generating_hours = button_meridian == this.meridian_units[1]? parseInt(button_hours) + 12: button_hours\n// // returns either 1..12 || 13..23  \"We need to fix a bug 12 turns to 24 and midnight to 12\"\n// if(generating_hours == 12){ \n//     generating_hours = 12\n// }\n\n// if(button_hours != rate_change_limitors[0] || button_hours != rate_change_limitors[2]){ \n//     if(generating_hours > rate_change_limitors[0] && generating_hours < rate_change_limitors[2]){ \n//         this.button_output = rate_change_limitors[2] - generating_hours\n//     }else\n//     if(generating_hours > rate_change_limitors[2] && generating_hours < rate_change_limitors[3]){ \n//         this.button_output = (rate_change_limitors[3] - generating_hours) + rate_change_limitors[0]\n//     }else\n//     if(generating_hours < rate_change_limitors[0]){ \n//         this.button_output = rate_change_limitors[0] - generating_hours\n//     }\n// }\n// if(button_hours == rate_change_limitors[0] || button_hours == rate_change_limitors[2]){ \n//     this.button_output = 12\n// }\n\n        \n            \n        // if(localStorage.getItem('_time_mdn_time') == this.meridian_units[0]){\n        //     var remaining_time = 6 - localStorage.getItem('_time_btn_hr')\n        //     if(localStorage.getItem('_time_btn_hr') < 6){ \n        //         remaining_time >= night_limit?return_time=remaining_time:return_time = remaining_time + 12\n        //     }\n        //     if(localStorage.getItem('_time_btn_hr') >= 6 && localStorage.getItem('_time_btn_hr') < 12){ \n        //         var rem_time = 12 - localStorage.getItem('_time_btn_hr')\n        //         return_time=rem_time + 6\n        //         // rem_time >= day_limit?return_time=(rem_time + 12) * hour_wheel_calc:return_time=(rem_time + 12) * hour_wheel_calc\n        //     }\n           \n        // } \n\n        // if(localStorage.getItem('_time_mdn_time') == this.meridian_units[1]){\n        //     var night_remaining_time = 6 - localStorage.getItem('_time_btn_hr')\n        //     // generate daily\n        //     if(localStorage.getItem('_time_btn_hr') < 6){\n        //         var daytime_rem_hr = 6 - localStorage.getItem('_time_btn_hr')\n        //         night_remaining_time >= day_limit?return_time=daytime_rem_hr:return_time=daytime_rem_hr + 12\n        //     }\n        //     if(localStorage.getItem('_time_btn_hr') >= 6 && localStorage.getItem('_time_btn_hr') < 12 ){\n        //         var night_rem_time = 12 - localStorage.getItem('_time_btn_hr')\n        //         return_time = night_rem_time + 6\n        //     }\n        // }\n        // console.log(return_time)\n\n\n\n\n\n            // if(this.output_hour >= 6 && this.output_hour < 12){ \n            //     const max_calculation = (12 - this.output_hour) + 6\n            //     if(max_calculation >= day_limit){ \n            //         return max_calculation * hour_wheel_calc\n            //         console.log(max_calculation)\n            //     }\n            //     if(max_calculation < day_limit){ \n            //         return (max_calculation + 12) * hour_wheel_calc\n            //         console.log(max_calculation + 12)\n            //     }\n\n            // }\n            // if(this.output_hour < 6){ \n            //     const night_max_calculation = 6 - this.output_hour\n            //     if(night_max_calculation < night_limit){ \n            //         return (night_max_calculation + 12) * hour_wheel_calc\n            //         console.log(night_max_calculation + 12)\n            //     }\n            //     return night_max_calculation * hour_wheel_calc\n            //     console.log(night_max_calculation)\n            // }\n\n\n        // if(this.output_meridian == this.meridian_units[1]){ \n        //     if(this.output_hour <= 6){\n        //         const calculate_remaining_time = 6 - this.output_hour\n        //         if(calculate_remaining_time < day_limit){ \n        //             return (calculate_remaining_time + 12) * hour_wheel_calc\n        //             console.log(calculate_remaining_time + 12)\n        //         }\n        //         return calculate_remaining_time * hour_wheel_calc\n        //         console.log(calculate_remaining_time)\n        //     }\n        //     if(this.output_hour > 6 && this.output_hour <= 12){ \n        //         const calc_rem_time = (12 - this.output) + 6\n        //         if(calc_rem_time < night_limit){ \n        //             console.log((calc_rem_time + 12) * hour_wheel_calc)\n        //             return (calc_rem_time + 12) * hour_wheel_calc\n        //             console.log(calc_rem_time + 12)\n        //         }\n        //         console.log(calc_rem_time * hour_wheel_calc)\n        //         return calc_rem_time * hour_wheel_calc\n        //         console.log(calc_rem_time)\n        //     }\n\n        //     // console.log(24 - (this.output_hour + 12) + 6)\n        // }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// set_meridian_unit = (hours) => { \n// var time_expression = this.current_hour + hours\n\n// switch(this.current_hour){ \n//     case(this.current_hour > 12?this.current_hour: null): \n\n//     break;\n// }\n// }\n\n\n\n\n// }\n\n\n\n\t// const twelve_hour_time = () => { \n\t// \tif(expiredHours > 12){ \n\t// \t\texpiredHours = expiredHours - 12 \n\t// \t\ttwelve_hour_time()\n\t// \t}\n\t// }\n\t// twelve_hour_time()\n\n\t// const set_meridiem = () => { \n\t// \tvar time_expression = currentTime.getHours() + hours\n\t// \tconst start_meridiem = currentTime.getHours()\n\n\t// \tswitch(start_meridiem){ \n\t// \t\tcase(start_meridiem > 12? start_meridiem: null):\n\t// \t\tstart_time_unit = time_unit_[1]\n\t// \t\tbreak;\n\t// \t\tcase (start_meridiem < 12 ? start_meridiem: null): \n\t// \t\tstart_time_unit = time_unit_[0]\n\t// \t\tbreak;\n\t// \t}\n\n\n\n\t// \tswitch(time_expression){\n\t// \t\tcase (time_expression >= 12 && time_expression <= 24 ? time_expression : null):\n\t// \t\t\ttimeUnit = time_unit_[1]\n\t// \t\t\tbreak; \n\t// \t\tcase (time_expression > 24 || time_expression < 12 ? time_expression : null): \n\t// \t\t\ttimeUnit = time_unit_[0]\n\t// \t\t\tbreak;\n\t// \t}\n\n\t// \tif(expiredMinutes < 10){\n\t// \t\texpiredMinutes = `${0}${expiredMinutes}`\n\t// \t}\n\t// \tif(expiredMinutes == 60){ \n\t// \t\texpiredHours = expiredHours + 1\n\t// \t\texpiredMinutes = '00'\n\t// \t}\n\n\t// }\n\t// set_meridiem()"]},"metadata":{},"sourceType":"module"}