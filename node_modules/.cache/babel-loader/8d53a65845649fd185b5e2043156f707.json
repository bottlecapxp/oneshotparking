{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useStripe } from '@stripe/react-stripe-js';\nimport { useState, useContext, Component } from 'react';\nimport { useEffect } from 'react/cjs/react.development';\nimport { PaymentContext } from '../../../Context/PaymentContext';\nimport Util from './../../Utilities/Utilities';\nimport GeneratePrice from './GeneratePrice';\nimport Time from '../../Timer/Time';\n\nconst PaymentGenerator = (hours, minutes) => {\n  _s();\n\n  const {\n    setNightTime,\n    setNightTimeBilling,\n    setDayTime,\n    setDayTimeBilling,\n    setBilling,\n    setTime\n  } = useContext(PaymentContext);\n  const timeDate = new Date();\n  const night_hourly_rate = 2.0;\n  const night_minute_rate = 0;\n  const hourly_rate = 1.75;\n  const minute_rate = 0;\n  const day_max_limit = 3;\n  const night_max_limit = 4;\n  var day_max_rate = 5.50;\n  var night_max_rate = 8;\n  const genPrice = new GeneratePrice();\n  const util = new Util(); //parseInt(`${timeDate.getHours()}${timeDate.getMinutes()}`)\n\n  var currentTime = parseInt(`${timeDate.getHours()}${timeDate.getMinutes() < 10 ? `0${timeDate.getMinutes()}` : timeDate.getMinutes()}`);\n  var setLimit = parseInt(`${hours}${minutes}0`);\n  var accumalatedTime = currentTime + setLimit;\n  var minuteCheck = accumalatedTime % 100;\n  var hourCheck = Math.floor(accumalatedTime / 100);\n  var night_overlap_time;\n  var newMinutes;\n  var newHours;\n  var daytime_billing;\n  var day_overlap_time;\n  var extra_overlap;\n  var night_time_hours;\n  var night_time_billing;\n  var dayTime;\n  var nightTime;\n  var extraTime;\n  var sumTotal;\n\n  const check_and_adjust = () => {\n    // Accumulated Time Check\n    if (hourCheck > 23) {\n      hourCheck = hourCheck - 24;\n    }\n\n    if (minuteCheck >= 60) {\n      newMinutes = minuteCheck - 60;\n      newHours = Math.floor(hourCheck + 1);\n      accumalatedTime = parseInt(`${newHours}${newMinutes}`);\n\n      if (newMinutes < 10) {\n        accumalatedTime = parseInt(`${newHours}0${newMinutes}`);\n      }\n\n      if (newMinutes === 0) {\n        accumalatedTime = parseInt(`${newHours}00`);\n      }\n    } else {\n      accumalatedTime = currentTime + setLimit; //Current time + Set Limit time\n    }\n  };\n\n  check_and_adjust();\n\n  const setbillings = (set_day_time, set_daytime_billing, set_night_time, set_nighttime_billing, total_billing) => {\n    setDayTime(set_day_time);\n    setDayTimeBilling(set_daytime_billing);\n    setNightTime(set_night_time);\n    setNightTimeBilling(set_nighttime_billing);\n    setBilling(total_billing);\n  };\n\n  const night_time = () => {\n    // NEED TO SET CONDITIONS FOR ROLL OVER MINUTES\n    if (currentTime >= 1800 && accumalatedTime <= 3000 || currentTime < 600 && accumalatedTime <= 600) {\n      nightTime = util.round(accumalatedTime, currentTime, 100);\n      const nightPrice = genPrice.calculate_nighttime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate);\n      setbillings(0, 0, nightTime, nightPrice, nightPrice);\n    } // overlap_time\n\n\n    if (currentTime >= 1800 && accumalatedTime > 3000 && accumalatedTime <= 4200) {\n      // if current time is greater than 6pm & setTime is > 6am and setTime is < 6pm\n      dayTime = util.round(accumalatedTime, 3000, 100); // util.round (setTime - nighttime) / 100   \n\n      nightTime = util.round(3000, currentTime, 100);\n      const dayPrice = genPrice.calculate_daytime_payments(dayTime, hourly_rate, day_max_limit, day_max_rate);\n      const nightPrice = genPrice.calculate_nighttime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate);\n      sumTotal = nightPrice + dayPrice;\n      setbillings(0, 0, night_time_hours, night_time_billing, sumTotal);\n    }\n\n    if (currentTime < 600 && accumalatedTime > 600 && accumalatedTime <= 1800) {\n      // if current time is < 6am and setTime is greater than\n      day_overlap_time = util.round(accumalatedTime, 600, 100);\n      setbillings(0, 0, night_time_hours, night_time_billing, night_time_billing);\n    }\n  };\n\n  const day_time = () => {\n    // NEED TO SET CONDITIONS FOR ROLL OVER MINUTES \n    if (currentTime > 600 && accumalatedTime <= 1800) {\n      dayTime = util.round(accumalatedTime, currentTime, 100);\n      var dayPrice = genPrice.calculate_daytime_payments(dayTime, hourly_rate, day_max_limit, day_max_rate);\n      setbillings(dayTime, dayPrice, 0, 0, dayPrice);\n    } // overlaping to night time\n\n\n    if (currentTime < 1800 && accumalatedTime > 1800 && accumalatedTime <= 3000) {\n      //current_time < 6pm(daytime) && setTime > 6pm & setTime is <= 6am then do something\n      dayTime = util.round(1800, currentTime, 100);\n      nightTime = util.round(accumalatedTime, 1800, 100); // Generate night time\n\n      var dayPrice = genPrice.calculate_daytime_payments(dayTime, hourly_rate, day_max_limit, day_max_rate);\n      var nightPrice = genPrice.calculate_nighttime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate);\n      sumTotal = dayPrice + nightPrice;\n      setbillings(dayTime, dayPrice, nightTime, nightPrice, sumTotal);\n    } // calc extra rollover\n\n\n    if (currentTime < 1800 && accumalatedTime > 1800 && accumalatedTime > 3000) {\n      dayTime = util.round(1800, currentTime, 100);\n      nightTime = util.round(3000, 1800, 100);\n      extraTime = util.round(accumalatedTime, 3000, 100);\n      var dayPrice = genPrice.calculate_daytime_payments(dayTime, hourly_rate, day_max_limit, day_max_rate);\n      var nightPrice = genPrice.calculate_nighttime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate);\n      var extraPrice = genPrice.calculate_extratime_payments(extraTime, hourly_rate, day_max_limit, day_max_rate);\n      sumTotal = dayPrice + nightPrice + extraPrice;\n      console.log(accumalatedTime);\n      setbillings(dayTime, dayPrice, nightTime, nightPrice, sumTotal);\n    }\n  };\n\n  night_time();\n  day_time(); // const checking_max_calculations = (current_time_period, overlapping_time_period, day_rate, night_rate) => { \n  // }\n  // const money_charged = () => {\n  // }\n  // money_charged()\n}; // console.log(day_time())\n// console.log(day_to_night_overlap())\n// console.log(night_to_day())\n// console.log(accumalatedTime)\n\n\n_s(PaymentGenerator, \"VO2z2oiBoC6H12FIzKuigBjz7nk=\");\n\n_c = PaymentGenerator;\nexport default PaymentGenerator; // setDayTime(dayTime)\n// setDayTimeBilling(daytime_billing)\n// setNightTime(night_overlap_time)\n// setNightTimeBilling(night_time_billing)\n// totalbilling = Math.util.round((nighttime_billing + overlap_billing + Number.EPSILON) * 100) / 100\n// useEffect(() => {\n//     calculate_money()\n// }, [calculate_money])\n// var count_down_hours = Math.util.round((accumalatedTime - currentTime) / 100)\n// var totalbilling\n// var reg_day_time_min_algorythm\n// var currentTime_hr\n// var currentTime_min\n// var night_overlap_cost\n// var day_overlap_time\n// var day_overlap_cost\n// var nighttimeHour\n// var nighttimeMin\n// var nighttime_billing\n// var newDayTime_hour\n// var newDayTime_min\n// var newNightTIme_hour\n// var newNightTIme_min\n// var overlap_billing\n// var daytimeHour\n// var daytimeMin\n// var dayTime\n// var totalbilling\n// var nightTime\n// var night_time_billing\n// var day_rate_max = 3\n// var night_rate_max = 5\n// var totalCost\n// setbillings(dayTime, daytime_billing, 0, 0, daytime_billing)\n// setbillings(0, 0, nightTime, night_time_billing, night_time_billing)\n// Day algor\n// Night\n// const finding_remaining_hours = 18 - timeDate.getHours()\n// if((setLimit/10) >= day_rate_max && (setLimit/10) <= finding_remaining_hours && accumalatedTime < 1800){ \n//     totalCost = totalCost + 100\n//     setBilling(100)\n// }\n// else{ \n//     setBilling(totalbilling)\n// }\n// const finding_remaining_hours = 30 - timeDate.getHours()\n// setBilling(night_time_billing) \n// if((setLimit/10) >= night_rate_max && (setLimit/10) <= finding_remaining_hours && accumalatedTime <= 2359 || accumalatedTime <= 600){ \n// setBilling(100)\n// }\n// else{ \n// setBilling(totalbilling)\n// }\n// Day to night\n//         // NIGHT OVERLAPPING TO DAY \n//         if(currentTime <= 600 && accumalatedTime > 600){ //current_time >\n//                 day_overlap_time = accumalatedTime - 600\n//                 console.log()\n//                 day_overlap_cost = Math.floor(day_overlap_time * .07) //.07 is dollar value of 4 dollars per hour\n//                 nighttimeHour = Math.floor((600-currentTime) / 100) // selected hours before night time\n//                 nighttimeMin = Math.floor(60 - (currentTime % 100))// selected mins before night time\n//                 nightTime = parseInt(`${nighttimeHour}${nighttimeMin}`)\n//                 nighttime_billing = nighttimeHour * night_hourly_rate\n//                 if(day_overlap_time > 99){\n//                  newDayTime_hour = Math.floor(day_overlap_time / 100)\n//                  newDayTime_min = Math.floor(day_overlap_time % 100)\n//                  overlap_billing = Math.util.round(((newDayTime_hour * 4) + (newDayTime_min * 0.07) + Number.EPSILON) * 100) / 100\n//                  day_overlap_time = parseInt(`${newDayTime_hour}${newDayTime_min}`)\n//                }else{\n//                 overlap_billing = Math.util.round((day_overlap_cost + Number.EPSILON) * 100) / 100\n//                }\n//             }\n// }\n//             if(count_down_hours == 5){ \n//                 console.log(`${count_down_hours}`)\n//                 setBilling(5)\n//                 // setBilling(totalbilling)\n//             }else{\n//                 setBilling(totalbilling)\n//             }\n// setDayTime(day_overlap_time)\n// setDayTimeBilling(overlap_billing)\n// setNightTime(nightTime)\n// setNightTimeBilling(nighttime_billing)\n// daytime_billing = 1800 - currentTime\n// if (night_overlap_time < 60) {\n//     night_overlap_cost = 1 * night_hourly_rate //.1 is dollar value of 6 dollars per hour\n// }\n// else {\n//     night_overlap_cost = night_overlap_time * night_hourly_rate //.1 is dollar value of 6 dollars per hour\n// }\n// // Math.floor((1800-currentTime) / 100)\n// daytimeHour = Math.floor((1800 - currentTime) / 100)// selected hours before night time\n// reg_day_time_min_algorythm = Math.floor(60 - (currentTime % 100))\n// if (reg_day_time_min_algorythm == 60) {\n//     reg_day_time_min_algorythm = `${0}${0}`\n// }\n// daytimeMin = reg_day_time_min_algorythm // selected mins before night time\n// dayTime = parseInt(`${daytimeHour}${daytimeMin}`)\n// daytime_billing = daytimeHour * hourly_rate\n// if (night_overlap_time > 99) {\n//     newNightTIme_hour = Math.floor(night_overlap_time / 100)\n//     newNightTIme_min = Math.floor(night_overlap_time % 100)\n//     overlap_billing = (newNightTIme_hour * night_hourly_rate)\n//     night_overlap_time = parseInt(`${newNightTIme_hour}${newNightTIme_min}`)\n// } else {\n//     overlap_billing = Math.util.round((night_overlap_cost + Number.EPSILON) * 100) / 100\n// }\n// if (night_overlap_time < 99 && night_overlap_time > 60) {\n//     newNightTIme_hour = Math.floor(night_overlap_time / 60)\n//     newNightTIme_min = Math.floor(night_overlap_time % 60)\n//     overlap_billing = (newNightTIme_hour * night_hourly_rate)\n//     night_overlap_time = parseInt(`${newNightTIme_hour}`)\n// }\n// if (accumalatedTime > 1800 && night_overlap_time >= night_rate_max) {\n//     setBilling(100)\n// }\n// else {\n//     // daytime_billing = 1800 - currentTime\n//     totalbilling = daytime_billing + overlap_billing\n//     // if the setLimit is greater than 6 and the  \n//     console.log(accumalatedTime)\n//     setDayTime(dayTime)\n//     setDayTimeBilling(daytime_billing)\n//     setNightTime(night_overlap_time)\n//     setNightTimeBilling(overlap_billing)\n// }\n// NIGHT GOING INTO DAY BREAK\n// Set Selected time here for tracking and to be pushed to local storage by confirm BTN\n//     setTime(parseInt(`${hours}${minutes}`))\n// }, [hours, minutes])\n//    THEY ARE HERE\n// night_overlap_time = Math.util.round((night_overlap_cost + Number.EPSILON) * 100) / 100\n// how much day time \n// console.log(`/daytime: ${day_overlap_time}`)\n// //day time cost \n// console.log(`/daytime_billing: ${daytime_billing + overlap_billing}`)\n// //how much night time\n// console.log(`/nighttime: ${night_overlap_time}`)\n// // night time cost \n// console.log(`night Cost: $${overlap_billing}`)\n// STRICTLY DAYTIME\n// // DAYTIME OVERLAPPING TO NIGHT \n// else \n// // STRICTLY NIGHT CALCULATIONS\n// else \n// else \n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentGenerator\");","map":{"version":3,"sources":["/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Components/Financials/Calculator/PaymentGenerator.js"],"names":["useStripe","useState","useContext","Component","useEffect","PaymentContext","Util","GeneratePrice","Time","PaymentGenerator","hours","minutes","setNightTime","setNightTimeBilling","setDayTime","setDayTimeBilling","setBilling","setTime","timeDate","Date","night_hourly_rate","night_minute_rate","hourly_rate","minute_rate","day_max_limit","night_max_limit","day_max_rate","night_max_rate","genPrice","util","currentTime","parseInt","getHours","getMinutes","setLimit","accumalatedTime","minuteCheck","hourCheck","Math","floor","night_overlap_time","newMinutes","newHours","daytime_billing","day_overlap_time","extra_overlap","night_time_hours","night_time_billing","dayTime","nightTime","extraTime","sumTotal","check_and_adjust","setbillings","set_day_time","set_daytime_billing","set_night_time","set_nighttime_billing","total_billing","night_time","round","nightPrice","calculate_nighttime_payments","dayPrice","calculate_daytime_payments","day_time","extraPrice","calculate_extratime_payments","console","log"],"mappings":"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","sourcesContent":["import { useStripe } from '@stripe/react-stripe-js'\nimport { useState, useContext, Component} from 'react'\nimport { useEffect } from 'react/cjs/react.development'\nimport { PaymentContext } from '../../../Context/PaymentContext'\nimport Util from './../../Utilities/Utilities'\nimport GeneratePrice from './GeneratePrice'\nimport Time from '../../Timer/Time'\n\n\n\n\nconst PaymentGenerator = (hours, minutes) => {\n    const { setNightTime, setNightTimeBilling, setDayTime, setDayTimeBilling, setBilling, setTime } = useContext(PaymentContext)\n    const timeDate = new Date()\n    const night_hourly_rate = 2.0\n    const night_minute_rate = 0\n    const hourly_rate = 1.75\n    const minute_rate = 0\n    const day_max_limit = 3\n    const night_max_limit = 4\n    var day_max_rate = 5.50\n    var night_max_rate = 8\n    const genPrice = new GeneratePrice()\n    const util = new Util()\n\n\n    //parseInt(`${timeDate.getHours()}${timeDate.getMinutes()}`)\n    var currentTime = parseInt(`${timeDate.getHours()}${timeDate.getMinutes() < 10?`0${timeDate.getMinutes()}`:timeDate.getMinutes()}`)\n    var setLimit = parseInt(`${hours}${minutes}0`)\n    var accumalatedTime = currentTime + setLimit\n    var minuteCheck = accumalatedTime % 100\n    var hourCheck = Math.floor(accumalatedTime / 100)\n    var night_overlap_time\n    var newMinutes\n    var newHours\n    var daytime_billing\n    var day_overlap_time\n    var extra_overlap\n    var night_time_hours\n    var night_time_billing\n\n    var dayTime\n    var nightTime\n    var extraTime\n    var sumTotal\n\n    const check_and_adjust = () => {\n        // Accumulated Time Check\n        if (hourCheck > 23) {\n            hourCheck = hourCheck - 24\n        }\n        if (minuteCheck >= 60) {\n            newMinutes = minuteCheck - 60\n            newHours = Math.floor((hourCheck) + 1)\n            accumalatedTime = parseInt(`${newHours}${newMinutes}`)\n            if (newMinutes < 10) {\n                accumalatedTime = parseInt(`${newHours}0${newMinutes}`)\n            }\n            if (newMinutes === 0) {\n                accumalatedTime = parseInt(`${newHours}00`)\n            }\n        } else {\n            accumalatedTime = currentTime + setLimit //Current time + Set Limit time\n\n        }\n    }\n    check_and_adjust()\n\n\n\n\n    const setbillings = (set_day_time, set_daytime_billing, set_night_time, set_nighttime_billing, total_billing) => {\n        setDayTime(set_day_time)\n        setDayTimeBilling(set_daytime_billing)\n        setNightTime(set_night_time)\n        setNightTimeBilling(set_nighttime_billing)\n        setBilling(total_billing)\n    }\n\n    const night_time = () => {\n        // NEED TO SET CONDITIONS FOR ROLL OVER MINUTES\n        if (currentTime >= 1800 && accumalatedTime <= 3000 || currentTime < 600 && accumalatedTime <= 600) {\n            nightTime = util.round(accumalatedTime, currentTime, 100)\n            const nightPrice = genPrice.calculate_nighttime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate)\n            setbillings(0, 0, nightTime, nightPrice, nightPrice) \n        }\n        // overlap_time\n        if(currentTime >= 1800 && accumalatedTime > 3000 && accumalatedTime <= 4200){ // if current time is greater than 6pm & setTime is > 6am and setTime is < 6pm\n            dayTime = util.round(accumalatedTime, 3000, 100)           // util.round (setTime - nighttime) / 100   \n            nightTime = util.round(3000, currentTime, 100)\n            const dayPrice = genPrice.calculate_daytime_payments(dayTime, hourly_rate, day_max_limit, day_max_rate)\n            const nightPrice = genPrice.calculate_nighttime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate)\n            sumTotal = nightPrice + dayPrice  \n            setbillings(0, 0, night_time_hours, night_time_billing, sumTotal) \n        }\n        if(currentTime < 600 && accumalatedTime > 600 && accumalatedTime <= 1800){ // if current time is < 6am and setTime is greater than\n            day_overlap_time = util.round(accumalatedTime, 600, 100)  \n            setbillings(0, 0, night_time_hours, night_time_billing, night_time_billing) \n        }\n    }\n\n\n    const day_time = () => {\n        // NEED TO SET CONDITIONS FOR ROLL OVER MINUTES \n        if (currentTime > 600 && accumalatedTime <= 1800) {\n            dayTime = util.round(accumalatedTime, currentTime, 100)\n            var dayPrice = genPrice.calculate_daytime_payments(dayTime, hourly_rate, day_max_limit, day_max_rate)\n            setbillings(dayTime, dayPrice, 0, 0, dayPrice)\n            \n        }\n        // overlaping to night time\n        if (currentTime < 1800 && (accumalatedTime > 1800 && accumalatedTime <= 3000)) { //current_time < 6pm(daytime) && setTime > 6pm & setTime is <= 6am then do something\n            dayTime = util.round(1800, currentTime, 100)\n            nightTime = util.round(accumalatedTime, 1800, 100)  // Generate night time\n            var dayPrice = genPrice.calculate_daytime_payments(dayTime, hourly_rate, day_max_limit, day_max_rate)\n            var nightPrice = genPrice.calculate_nighttime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate)\n            sumTotal = dayPrice + nightPrice\n            setbillings(dayTime, dayPrice, nightTime, nightPrice, sumTotal)\n        }\n        // calc extra rollover\n        if(currentTime < 1800 && (accumalatedTime > 1800 && accumalatedTime > 3000)){ \n            dayTime = util.round(1800, currentTime, 100)\n            nightTime = util.round(3000, 1800, 100)\n            extraTime = util.round(accumalatedTime, 3000, 100)\n            var dayPrice = genPrice.calculate_daytime_payments(dayTime, hourly_rate, day_max_limit, day_max_rate)\n            var nightPrice = genPrice.calculate_nighttime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate)\n            var extraPrice = genPrice.calculate_extratime_payments(extraTime, hourly_rate, day_max_limit, day_max_rate)\n            sumTotal = dayPrice + nightPrice + extraPrice\n            console.log(accumalatedTime)\n            setbillings(dayTime, dayPrice, nightTime, nightPrice, sumTotal)\n        }\n    }\n\n\n\n\n    night_time()\n    day_time()\n\n\n\n\n\n\n\n\n\n// const checking_max_calculations = (current_time_period, overlapping_time_period, day_rate, night_rate) => { \n// }\n\n    // const money_charged = () => {\n    // }\n    // money_charged()\n\n\n\n\n\n}\n\n\n// console.log(day_time())\n// console.log(day_to_night_overlap())\n// console.log(night_to_day())\n// console.log(accumalatedTime)\n\n\n\n\n\n\n\nexport default PaymentGenerator;\n\n// setDayTime(dayTime)\n// setDayTimeBilling(daytime_billing)\n// setNightTime(night_overlap_time)\n// setNightTimeBilling(night_time_billing)\n\n\n\n// totalbilling = Math.util.round((nighttime_billing + overlap_billing + Number.EPSILON) * 100) / 100\n// useEffect(() => {\n//     calculate_money()\n// }, [calculate_money])\n\n        \n    // var count_down_hours = Math.util.round((accumalatedTime - currentTime) / 100)\n    // var totalbilling\n\n    // var reg_day_time_min_algorythm\n    // var currentTime_hr\n    // var currentTime_min\n\n    // var night_overlap_cost\n    // var day_overlap_time\n    // var day_overlap_cost\n    // var nighttimeHour\n    // var nighttimeMin\n    // var nighttime_billing\n    // var newDayTime_hour\n    // var newDayTime_min\n    // var newNightTIme_hour\n    // var newNightTIme_min\n\n    // var overlap_billing\n    // var daytimeHour\n    // var daytimeMin\n    // var dayTime\n    // var totalbilling\n    // var nightTime\n    // var night_time_billing\n    // var day_rate_max = 3\n    // var night_rate_max = 5\n    // var totalCost\n    // setbillings(dayTime, daytime_billing, 0, 0, daytime_billing)\n    // setbillings(0, 0, nightTime, night_time_billing, night_time_billing)\n    // Day algor\n\n    // Night\n\n    // const finding_remaining_hours = 18 - timeDate.getHours()\n    // if((setLimit/10) >= day_rate_max && (setLimit/10) <= finding_remaining_hours && accumalatedTime < 1800){ \n    //     totalCost = totalCost + 100\n    //     setBilling(100)\n    // }\n    // else{ \n    //     setBilling(totalbilling)\n    // }\n\n\n\n    // const finding_remaining_hours = 30 - timeDate.getHours()\n    // setBilling(night_time_billing) \n    // if((setLimit/10) >= night_rate_max && (setLimit/10) <= finding_remaining_hours && accumalatedTime <= 2359 || accumalatedTime <= 600){ \n    // setBilling(100)\n    // }\n    // else{ \n    // setBilling(totalbilling)\n    // }\n\n\n\n\n    // Day to night\n\n\n\n\n\n\n\n\n\n\n\n    //         // NIGHT OVERLAPPING TO DAY \n    //         if(currentTime <= 600 && accumalatedTime > 600){ //current_time >\n\n    //                 day_overlap_time = accumalatedTime - 600\n    //                 console.log()\n    //                 day_overlap_cost = Math.floor(day_overlap_time * .07) //.07 is dollar value of 4 dollars per hour\n\n    //                 nighttimeHour = Math.floor((600-currentTime) / 100) // selected hours before night time\n    //                 nighttimeMin = Math.floor(60 - (currentTime % 100))// selected mins before night time\n    //                 nightTime = parseInt(`${nighttimeHour}${nighttimeMin}`)\n    //                 nighttime_billing = nighttimeHour * night_hourly_rate\n\n\n    //                 if(day_overlap_time > 99){\n    //                  newDayTime_hour = Math.floor(day_overlap_time / 100)\n    //                  newDayTime_min = Math.floor(day_overlap_time % 100)\n    //                  overlap_billing = Math.util.round(((newDayTime_hour * 4) + (newDayTime_min * 0.07) + Number.EPSILON) * 100) / 100\n    //                  day_overlap_time = parseInt(`${newDayTime_hour}${newDayTime_min}`)\n    //                }else{\n    //                 overlap_billing = Math.util.round((day_overlap_cost + Number.EPSILON) * 100) / 100\n    //                }\n\n    //             }\n    // }\n\n\n\n    //             if(count_down_hours == 5){ \n    //                 console.log(`${count_down_hours}`)\n    //                 setBilling(5)\n    //                 // setBilling(totalbilling)\n    //             }else{\n    //                 setBilling(totalbilling)\n    //             }\n\n\n    // setDayTime(day_overlap_time)\n    // setDayTimeBilling(overlap_billing)\n    // setNightTime(nightTime)\n    // setNightTimeBilling(nighttime_billing)\n\n    // daytime_billing = 1800 - currentTime\n\n\n\n\n\n\n            // if (night_overlap_time < 60) {\n            //     night_overlap_cost = 1 * night_hourly_rate //.1 is dollar value of 6 dollars per hour\n            // }\n            // else {\n            //     night_overlap_cost = night_overlap_time * night_hourly_rate //.1 is dollar value of 6 dollars per hour\n            // }\n\n            // // Math.floor((1800-currentTime) / 100)\n            // daytimeHour = Math.floor((1800 - currentTime) / 100)// selected hours before night time\n            // reg_day_time_min_algorythm = Math.floor(60 - (currentTime % 100))\n            // if (reg_day_time_min_algorythm == 60) {\n            //     reg_day_time_min_algorythm = `${0}${0}`\n            // }\n            // daytimeMin = reg_day_time_min_algorythm // selected mins before night time\n            // dayTime = parseInt(`${daytimeHour}${daytimeMin}`)\n            // daytime_billing = daytimeHour * hourly_rate\n\n\n            // if (night_overlap_time > 99) {\n            //     newNightTIme_hour = Math.floor(night_overlap_time / 100)\n            //     newNightTIme_min = Math.floor(night_overlap_time % 100)\n            //     overlap_billing = (newNightTIme_hour * night_hourly_rate)\n            //     night_overlap_time = parseInt(`${newNightTIme_hour}${newNightTIme_min}`)\n            // } else {\n            //     overlap_billing = Math.util.round((night_overlap_cost + Number.EPSILON) * 100) / 100\n            // }\n            // if (night_overlap_time < 99 && night_overlap_time > 60) {\n            //     newNightTIme_hour = Math.floor(night_overlap_time / 60)\n            //     newNightTIme_min = Math.floor(night_overlap_time % 60)\n            //     overlap_billing = (newNightTIme_hour * night_hourly_rate)\n            //     night_overlap_time = parseInt(`${newNightTIme_hour}`)\n            // }\n\n            // if (accumalatedTime > 1800 && night_overlap_time >= night_rate_max) {\n            //     setBilling(100)\n            // }\n            // else {\n            //     // daytime_billing = 1800 - currentTime\n            //     totalbilling = daytime_billing + overlap_billing\n            //     // if the setLimit is greater than 6 and the  \n            //     console.log(accumalatedTime)\n            //     setDayTime(dayTime)\n            //     setDayTimeBilling(daytime_billing)\n            //     setNightTime(night_overlap_time)\n            //     setNightTimeBilling(overlap_billing)\n            // }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        // NIGHT GOING INTO DAY BREAK\n\n        // Set Selected time here for tracking and to be pushed to local storage by confirm BTN\n    //     setTime(parseInt(`${hours}${minutes}`))\n    // }, [hours, minutes])\n\n        //    THEY ARE HERE\n            // night_overlap_time = Math.util.round((night_overlap_cost + Number.EPSILON) * 100) / 100\n            // how much day time \n            // console.log(`/daytime: ${day_overlap_time}`)\n            // //day time cost \n            // console.log(`/daytime_billing: ${daytime_billing + overlap_billing}`)\n            // //how much night time\n            // console.log(`/nighttime: ${night_overlap_time}`)\n            // // night time cost \n            // console.log(`night Cost: $${overlap_billing}`)\n\n\n\n\n\n\n\n\n\n\n\n\n        // STRICTLY DAYTIME\n\n\n\n        // // DAYTIME OVERLAPPING TO NIGHT \n        // else \n\n        // // STRICTLY NIGHT CALCULATIONS\n        // else \n        // else \n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}