{"ast":null,"code":"var _jsxFileName = \"/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Components/Buttons/CircleBtns_txt/CircleTxtBtns.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport MaxConditon from '../../../Components/max_selection/MaxSelection';\nimport Time from '../../Timer/Time';\nimport '../CircleBtns_txt/CircleBtnstxt.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CircleTxtBtns = ({\n  title,\n  time,\n  addTime,\n  link\n}) => {\n  _s();\n\n  // const {darkMode} = useContext(PaymentContext)\n  const darkMode = 1800;\n  const [darkModeStyle, setDarkModeStyle] = useState({\n    buttonStyles: 'global_circle_btns',\n    title: 'title'\n  });\n  const [timer, setTimer] = useState({\n    title: title,\n    setTime: parseFloat(time)\n  });\n  const currentTime = new Date();\n  const remMins = 60 - currentTime.getMinutes();\n  var hour_, hour_calc, min_calc, sum;\n\n  const setTime_ = hour => {\n    hour_calc = parseInt((currentTime.getMinutes() > 0 ? hour - 1 : hour_) * 0.041666666666666664);\n    min_calc = remMins * 0.000695;\n    sum = hour_calc + min_calc;\n    addTime(sum);\n  };\n\n  const incrementTime = () => {\n    const time_wheel_hr = parseInt(localStorage.getItem('_time_btn_hr'));\n\n    switch (title) {\n      case title == 'Max' && time_wheel_hr < 6 ? title : '':\n        hour_ = 6 - time_wheel_hr;\n        setTime_(hour_);\n        break;\n\n      case title == 'Max' && time_wheel_hr > 6 && time_wheel_hr < 12 ? title : '':\n        hour_ = 12 - time_wheel_hr + 6;\n        setTime_(hour_);\n        break;\n\n      case title == 'Max' && localStorage.getItem('_time_btn_hr') == '6' ? title : '':\n        hour_ = 12;\n        setTime_(hour_);\n        break;\n\n      default:\n        addTime(timer.setTime);\n        break;\n    }\n  };\n\n  useEffect(() => {\n    if (darkMode >= 1800 || darkMode <= 600) {\n      setDarkModeStyle({\n        buttonStyles: 'global_circle_btns_dark',\n        title: 'title_dark'\n      });\n    }\n\n    if (darkMode < 1800 || darkMode > 600) {\n      setDarkModeStyle({\n        buttonStyles: 'global_circle_btns',\n        title: 'title'\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${darkModeStyle.buttonStyles} content-align`,\n    onClick: incrementTime,\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      className: darkModeStyle.title,\n      children: timer.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CircleTxtBtns, \"bMbOJkWci3Q5P0UcJX73chBItmY=\");\n\n_c = CircleTxtBtns;\nexport default CircleTxtBtns;\n\nvar _c;\n\n$RefreshReg$(_c, \"CircleTxtBtns\");","map":{"version":3,"sources":["/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Components/Buttons/CircleBtns_txt/CircleTxtBtns.js"],"names":["React","useEffect","useState","MaxConditon","Time","CircleTxtBtns","title","time","addTime","link","darkMode","darkModeStyle","setDarkModeStyle","buttonStyles","timer","setTimer","setTime","parseFloat","currentTime","Date","remMins","getMinutes","hour_","hour_calc","min_calc","sum","setTime_","hour","parseInt","incrementTime","time_wheel_hr","localStorage","getItem"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport MaxConditon from '../../../Components/max_selection/MaxSelection'\nimport Time from '../../Timer/Time'\nimport '../CircleBtns_txt/CircleBtnstxt.css'\n\nconst CircleTxtBtns = ({ title, time, addTime, link}) => {\n    // const {darkMode} = useContext(PaymentContext)\n    const darkMode = 1800\n    const [darkModeStyle, setDarkModeStyle] = useState({buttonStyles: 'global_circle_btns', title: 'title'})\n    const [timer, setTimer] = useState({title: title, setTime: parseFloat(time)})\n    const currentTime = new Date()\n    const remMins = (60 - currentTime.getMinutes()) \n    var hour_, hour_calc,min_calc, sum\n\n\n    const setTime_ = (hour) =>{ \n        hour_calc = parseInt((currentTime.getMinutes() > 0?hour - 1: hour_) * 0.041666666666666664)\n        min_calc = remMins * 0.000695\n        sum = hour_calc + min_calc\n        addTime(sum)\n    }\n\n    const incrementTime = () => {\n        const time_wheel_hr = parseInt(localStorage.getItem('_time_btn_hr'))\n        switch(title){\n            case (title =='Max' && time_wheel_hr < 6?title:''):\n                hour_ = (6 - time_wheel_hr) \n                setTime_(hour_)\n                break;\n            case (title =='Max' && (time_wheel_hr > 6 && time_wheel_hr < 12)?title:''):\n                hour_ = ((12 - time_wheel_hr) + 6)\n                setTime_(hour_)\n                break;\n            case (title == 'Max' && localStorage.getItem('_time_btn_hr') == '6'?title:''):\n                hour_ = 12\n                setTime_(hour_)\n                break;\n            default: \n            addTime(timer.setTime)\n            break;\n        }\n    }\n\n    useEffect(() => {\n        if (darkMode >= 1800 || darkMode <= 600) {\n            setDarkModeStyle({\n                buttonStyles: 'global_circle_btns_dark',\n                title: 'title_dark'\n            })\n        }\n        if (darkMode < 1800 || darkMode > 600) {\n            setDarkModeStyle({\n                buttonStyles: 'global_circle_btns',\n                title: 'title'\n            })\n        }\n    }, [])\n\n\n    return (\n        <div className={`${darkModeStyle.buttonStyles} content-align`} onClick={incrementTime}>\n            <span className={darkModeStyle.title}>{timer.title}</span>\n        </div>\n    )\n}\n\nexport default CircleTxtBtns;"]},"metadata":{},"sourceType":"module"}