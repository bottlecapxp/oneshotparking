{"ast":null,"code":"import React, { Component } from 'react';\n\nclass Time extends Component {\n  constructor(props) {\n    super(props);\n\n    this.set_expTime_to_secs = () => {\n      var output = this.sum_hours * 3600 + this.current_mins * 60;\n      return output;\n    };\n\n    this.start_time = () => {\n      return `${this.current_hour}:${this.current_mins}${this.output_meridian}`;\n    };\n\n    this.genrate_expired_time = scrolled_hours => {\n      this.sum_hours = this.current_hour + scrolled_hours;\n      var set_hour_limitors = [12, 24, 36, 48];\n      this.output_hour = this.sum_hours;\n      var button_meridian = this.output_meridian; // mins check\n\n      if (this.current_mins == 0) {\n        this.current_mins = '00';\n      }\n\n      for (var i = 0; i < set_hour_limitors.length; i++) {\n        if (this.sum_hours >= set_hour_limitors[i]) {\n          if (this.sum_hours >= set_hour_limitors[0] && this.sum_hours < set_hour_limitors[1] || this.sum_hours >= set_hour_limitors[2] && this.sum_hours < set_hour_limitors[3]) {\n            this.meridian_units_switch = true;\n          }\n\n          if (this.sum_hours >= set_hour_limitors[1] && this.sum_hours < set_hour_limitors[2]) {\n            this.meridian_units_switch = false;\n          }\n\n          var iterate_set_hour_limitors = this.sum_hours - set_hour_limitors[i];\n          this.output_hour = iterate_set_hour_limitors == 0 ? 12 : iterate_set_hour_limitors;\n        }\n      }\n\n      this.set_expTime_to_secs();\n      this.setState({\n        btn_hour: this.output_meridian,\n        btn_meridian: this.output_meridian\n      });\n      this.output_meridian = this._switch_meridian_unit(this.meridian_units_switch);\n      localStorage.setItem('_time_mdn_time', this.output_meridian);\n      localStorage.setItem('_time_btn_hr', this.output_hour);\n      return `${this.output_hour}:${this.current_mins < 10 ? `0${this.current_mins}` : this.current_mins}${this.output_meridian}`;\n    };\n\n    this._switch_meridian_unit = meridian_ref => {\n      if (meridian_ref) {\n        return this.meridian_units[1];\n      } else if (!meridian_ref) {\n        return this.meridian_units[0];\n      }\n    };\n\n    this.button_max_calculation = () => {\n      const day_limit = 3;\n      const night_limit = 6;\n      const hour_wheel_calc = 0.0417;\n      const min_wheel_calc = hour_wheel_calc / 60;\n      var return_time = ''; // console.log(this.current_mins)\n      // console.log(localStorage.getItem('_time_mdn_time'))\n\n      if (localStorage.getItem('_time_mdn_time') == this.meridian_units[0]) {\n        var remaining_time = 6 - localStorage.getItem('_time_btn_hr');\n\n        if (this.output_hour < 6) {\n          remaining_time >= night_limit ? return_time = remaining_time * hour_wheel_calc : return_time = remaining_time + 12;\n        }\n\n        if (this.output >= 6 && this.output_hour < 12) {\n          var rem_time = 12 - localStorage.getItem('_time_btn_hr');\n          return_time = (rem_time + 12) * hour_wheel_calc; // rem_time >= day_limit?return_time=(rem_time + 12) * hour_wheel_calc:return_time=(rem_time + 12) * hour_wheel_calc\n        }\n      }\n\n      console.log(return_time); // return return_time\n\n      return return_time * 0.0417;\n    };\n\n    this.meridian_units = ['am', 'pm'];\n    this.__init_date__ = new Date();\n    this.current_hour = 5;\n    this.current_mins = this.__init_date__.getMinutes();\n    this.meridian_units_switch = this.current_hour > 12 ? true : false;\n    this.output_hour = '';\n    this.sum_hours = null;\n    this.days = 0;\n    this.output_meridian = '';\n  } // Let's assume 6 is the limit for all time change. \n  // So 6am & 6pm determines if it's night time rate or day time rate. \n  // We need to do the following.\n  // First we check to see Which time of the day we are in. This provides our limit Eg. 1800\n  // As per lot. We get the hourly cap base on price. Which means if the max rate is $5 and per hour is $1\n  // Then anything greater than 5 and lesser than 1800 will be considered Max Rate \n  // Else anything lesser than 5 hours will be calculated at daily rate. \n  // if calculated at daily rate surpasses the time cap then it's shift to nightly rate \n  // \n\n\n}\n\nexport default Time; // if(this.output_hour >= 6 && this.output_hour < 12){ \n//     const max_calculation = (12 - this.output_hour) + 6\n//     if(max_calculation >= day_limit){ \n//         return max_calculation * hour_wheel_calc\n//         console.log(max_calculation)\n//     }\n//     if(max_calculation < day_limit){ \n//         return (max_calculation + 12) * hour_wheel_calc\n//         console.log(max_calculation + 12)\n//     }\n// }\n// if(this.output_hour < 6){ \n//     const night_max_calculation = 6 - this.output_hour\n//     if(night_max_calculation < night_limit){ \n//         return (night_max_calculation + 12) * hour_wheel_calc\n//         console.log(night_max_calculation + 12)\n//     }\n//     return night_max_calculation * hour_wheel_calc\n//     console.log(night_max_calculation)\n// }\n// if(this.output_meridian == this.meridian_units[1]){ \n//     if(this.output_hour <= 6){\n//         const calculate_remaining_time = 6 - this.output_hour\n//         if(calculate_remaining_time < day_limit){ \n//             return (calculate_remaining_time + 12) * hour_wheel_calc\n//             console.log(calculate_remaining_time + 12)\n//         }\n//         return calculate_remaining_time * hour_wheel_calc\n//         console.log(calculate_remaining_time)\n//     }\n//     if(this.output_hour > 6 && this.output_hour <= 12){ \n//         const calc_rem_time = (12 - this.output) + 6\n//         if(calc_rem_time < night_limit){ \n//             console.log((calc_rem_time + 12) * hour_wheel_calc)\n//             return (calc_rem_time + 12) * hour_wheel_calc\n//             console.log(calc_rem_time + 12)\n//         }\n//         console.log(calc_rem_time * hour_wheel_calc)\n//         return calc_rem_time * hour_wheel_calc\n//         console.log(calc_rem_time)\n//     }\n//     // console.log(24 - (this.output_hour + 12) + 6)\n// }\n// set_meridian_unit = (hours) => { \n// var time_expression = this.current_hour + hours\n// switch(this.current_hour){ \n//     case(this.current_hour > 12?this.current_hour: null): \n//     break;\n// }\n// }\n// }\n// const twelve_hour_time = () => { \n// \tif(expiredHours > 12){ \n// \t\texpiredHours = expiredHours - 12 \n// \t\ttwelve_hour_time()\n// \t}\n// }\n// twelve_hour_time()\n// const set_meridiem = () => { \n// \tvar time_expression = currentTime.getHours() + hours\n// \tconst start_meridiem = currentTime.getHours()\n// \tswitch(start_meridiem){ \n// \t\tcase(start_meridiem > 12? start_meridiem: null):\n// \t\tstart_time_unit = time_unit_[1]\n// \t\tbreak;\n// \t\tcase (start_meridiem < 12 ? start_meridiem: null): \n// \t\tstart_time_unit = time_unit_[0]\n// \t\tbreak;\n// \t}\n// \tswitch(time_expression){\n// \t\tcase (time_expression >= 12 && time_expression <= 24 ? time_expression : null):\n// \t\t\ttimeUnit = time_unit_[1]\n// \t\t\tbreak; \n// \t\tcase (time_expression > 24 || time_expression < 12 ? time_expression : null): \n// \t\t\ttimeUnit = time_unit_[0]\n// \t\t\tbreak;\n// \t}\n// \tif(expiredMinutes < 10){\n// \t\texpiredMinutes = `${0}${expiredMinutes}`\n// \t}\n// \tif(expiredMinutes == 60){ \n// \t\texpiredHours = expiredHours + 1\n// \t\texpiredMinutes = '00'\n// \t}\n// }\n// set_meridiem()","map":{"version":3,"sources":["/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Components/Timer/Time.js"],"names":["React","Component","Time","constructor","props","set_expTime_to_secs","output","sum_hours","current_mins","start_time","current_hour","output_meridian","genrate_expired_time","scrolled_hours","set_hour_limitors","output_hour","button_meridian","i","length","meridian_units_switch","iterate_set_hour_limitors","setState","btn_hour","btn_meridian","_switch_meridian_unit","localStorage","setItem","meridian_ref","meridian_units","button_max_calculation","day_limit","night_limit","hour_wheel_calc","min_wheel_calc","return_time","getItem","remaining_time","rem_time","console","log","__init_date__","Date","getMinutes","days"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n\n\n\n\nclass Time extends Component {\n    constructor(props) {\n        super(props)\n        this.meridian_units = ['am', 'pm']\n        this.__init_date__ = new Date()\n        this.current_hour = 5\n        this.current_mins = this.__init_date__.getMinutes()\n        this.meridian_units_switch = this.current_hour > 12? true: false\n        this.output_hour = ''\n        this.sum_hours = null\n        this.days = 0\n        this.output_meridian = ''\n\n    }\n\n    set_expTime_to_secs = () =>{ \n        var output = ((this.sum_hours * 3600) + (this.current_mins * 60))\n        return output\n    }\n\n    start_time = () =>{ \n        return `${this.current_hour}:${this.current_mins}${this.output_meridian}`\n    }\n\n    genrate_expired_time = (scrolled_hours) => {\n        this.sum_hours = this.current_hour + scrolled_hours\n        var set_hour_limitors = [12, 24, 36, 48]\n        this.output_hour = this.sum_hours\n        var button_meridian = this.output_meridian\n\n        // mins check\n        if (this.current_mins == 0) {\n            this.current_mins = '00'\n        }\n\n        for (var i = 0; i < set_hour_limitors.length; i++) {\n            if (this.sum_hours >=set_hour_limitors[i]) {\n                if(this.sum_hours >= set_hour_limitors[0] && this.sum_hours < set_hour_limitors[1] || this.sum_hours >= set_hour_limitors[2] && this.sum_hours < set_hour_limitors[3]){\n                    this.meridian_units_switch = true\n                }\n                if(this.sum_hours >= set_hour_limitors[1] && this.sum_hours < set_hour_limitors[2]){ \n                    this.meridian_units_switch = false\n                }\n                var iterate_set_hour_limitors = this.sum_hours - set_hour_limitors[i]\n                this.output_hour = iterate_set_hour_limitors == 0?12:iterate_set_hour_limitors\n            }\n        }\n        \n        this.set_expTime_to_secs()\n        this.setState({btn_hour: this.output_meridian, btn_meridian: this.output_meridian})\n        this.output_meridian = this._switch_meridian_unit(this.meridian_units_switch)\n        localStorage.setItem('_time_mdn_time', this.output_meridian)\n        localStorage.setItem('_time_btn_hr', this.output_hour)\n        return `${this.output_hour}:${this.current_mins < 10 ? `0${this.current_mins}` : this.current_mins}${this.output_meridian}`\n    }\n\n\n\n    _switch_meridian_unit = (meridian_ref) => {\n        if(meridian_ref){\n            return this.meridian_units[1]\n        }\n        else if(!meridian_ref){ \n            return this.meridian_units[0]\n        }\n    }\n\n\n    button_max_calculation = () => { \n        const day_limit = 3\n        const night_limit = 6\n        const hour_wheel_calc = 0.0417\n        const min_wheel_calc = hour_wheel_calc / 60\n        var return_time = ''\n        // console.log(this.current_mins)\n        // console.log(localStorage.getItem('_time_mdn_time'))\n\n        if(localStorage.getItem('_time_mdn_time') == this.meridian_units[0]){\n            var remaining_time = 6 - localStorage.getItem('_time_btn_hr')\n            if(this.output_hour < 6){ \n                remaining_time >= night_limit?return_time=remaining_time * hour_wheel_calc:return_time = remaining_time + 12\n            }\n            if(this.output >= 6 && this.output_hour < 12){ \n                var rem_time = 12 - localStorage.getItem('_time_btn_hr')\n                return_time=(rem_time + 12) * hour_wheel_calc\n                // rem_time >= day_limit?return_time=(rem_time + 12) * hour_wheel_calc:return_time=(rem_time + 12) * hour_wheel_calc\n            }\n           \n        } \n        console.log(return_time)\n        // return return_time\n        return return_time * 0.0417\n\n\n    }\n\n    // Let's assume 6 is the limit for all time change. \n    // So 6am & 6pm determines if it's night time rate or day time rate. \n    // We need to do the following.\n\n    // First we check to see Which time of the day we are in. This provides our limit Eg. 1800\n    // As per lot. We get the hourly cap base on price. Which means if the max rate is $5 and per hour is $1\n    // Then anything greater than 5 and lesser than 1800 will be considered Max Rate \n    // Else anything lesser than 5 hours will be calculated at daily rate. \n    // if calculated at daily rate surpasses the time cap then it's shift to nightly rate \n    // \n\n}\n\n\n\n\n\n\n\n\nexport default Time;\n\n        \n            \n            // if(this.output_hour >= 6 && this.output_hour < 12){ \n            //     const max_calculation = (12 - this.output_hour) + 6\n            //     if(max_calculation >= day_limit){ \n            //         return max_calculation * hour_wheel_calc\n            //         console.log(max_calculation)\n            //     }\n            //     if(max_calculation < day_limit){ \n            //         return (max_calculation + 12) * hour_wheel_calc\n            //         console.log(max_calculation + 12)\n            //     }\n\n            // }\n            // if(this.output_hour < 6){ \n            //     const night_max_calculation = 6 - this.output_hour\n            //     if(night_max_calculation < night_limit){ \n            //         return (night_max_calculation + 12) * hour_wheel_calc\n            //         console.log(night_max_calculation + 12)\n            //     }\n            //     return night_max_calculation * hour_wheel_calc\n            //     console.log(night_max_calculation)\n            // }\n\n\n        // if(this.output_meridian == this.meridian_units[1]){ \n        //     if(this.output_hour <= 6){\n        //         const calculate_remaining_time = 6 - this.output_hour\n        //         if(calculate_remaining_time < day_limit){ \n        //             return (calculate_remaining_time + 12) * hour_wheel_calc\n        //             console.log(calculate_remaining_time + 12)\n        //         }\n        //         return calculate_remaining_time * hour_wheel_calc\n        //         console.log(calculate_remaining_time)\n        //     }\n        //     if(this.output_hour > 6 && this.output_hour <= 12){ \n        //         const calc_rem_time = (12 - this.output) + 6\n        //         if(calc_rem_time < night_limit){ \n        //             console.log((calc_rem_time + 12) * hour_wheel_calc)\n        //             return (calc_rem_time + 12) * hour_wheel_calc\n        //             console.log(calc_rem_time + 12)\n        //         }\n        //         console.log(calc_rem_time * hour_wheel_calc)\n        //         return calc_rem_time * hour_wheel_calc\n        //         console.log(calc_rem_time)\n        //     }\n\n        //     // console.log(24 - (this.output_hour + 12) + 6)\n        // }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// set_meridian_unit = (hours) => { \n// var time_expression = this.current_hour + hours\n\n// switch(this.current_hour){ \n//     case(this.current_hour > 12?this.current_hour: null): \n\n//     break;\n// }\n// }\n\n\n\n\n// }\n\n\n\n\t// const twelve_hour_time = () => { \n\t// \tif(expiredHours > 12){ \n\t// \t\texpiredHours = expiredHours - 12 \n\t// \t\ttwelve_hour_time()\n\t// \t}\n\t// }\n\t// twelve_hour_time()\n\n\t// const set_meridiem = () => { \n\t// \tvar time_expression = currentTime.getHours() + hours\n\t// \tconst start_meridiem = currentTime.getHours()\n\n\t// \tswitch(start_meridiem){ \n\t// \t\tcase(start_meridiem > 12? start_meridiem: null):\n\t// \t\tstart_time_unit = time_unit_[1]\n\t// \t\tbreak;\n\t// \t\tcase (start_meridiem < 12 ? start_meridiem: null): \n\t// \t\tstart_time_unit = time_unit_[0]\n\t// \t\tbreak;\n\t// \t}\n\n\n\n\t// \tswitch(time_expression){\n\t// \t\tcase (time_expression >= 12 && time_expression <= 24 ? time_expression : null):\n\t// \t\t\ttimeUnit = time_unit_[1]\n\t// \t\t\tbreak; \n\t// \t\tcase (time_expression > 24 || time_expression < 12 ? time_expression : null): \n\t// \t\t\ttimeUnit = time_unit_[0]\n\t// \t\t\tbreak;\n\t// \t}\n\n\t// \tif(expiredMinutes < 10){\n\t// \t\texpiredMinutes = `${0}${expiredMinutes}`\n\t// \t}\n\t// \tif(expiredMinutes == 60){ \n\t// \t\texpiredHours = expiredHours + 1\n\t// \t\texpiredMinutes = '00'\n\t// \t}\n\n\t// }\n\t// set_meridiem()"]},"metadata":{},"sourceType":"module"}