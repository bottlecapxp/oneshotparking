{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useContext } from 'react';\nimport { PaymentContext } from '../../../Context/PaymentContext';\n\nconst PaymentGenerator = (hours, minutes) => {\n  _s();\n\n  const {\n    setNightTime,\n    setNightTimeBilling,\n    setDayTime,\n    setDayTimeBilling,\n    setBilling,\n    setTime\n  } = useContext(PaymentContext);\n  const timeDate = new Date();\n  const night_hourly_rate = 1.75;\n  const night_minute_rate = 0;\n  const hourly_rate = 1.75;\n  const minute_rate = 0; //parseInt(`${timeDate.getHours()}${timeDate.getMinutes()}`)\n\n  var currentTime = parseInt(`${timeDate.getHours()}${timeDate.getMinutes()}`);\n  var setLimit = parseInt(`${hours}${minutes}`);\n  var accumalatedTime = currentTime + setLimit;\n  var minuteCheck = accumalatedTime % 100;\n  var hourCheck = Math.floor(accumalatedTime / 100);\n  var reg_day_time_min_algorythm;\n  var currentTime_hr;\n  var currentTime_min;\n  var night_overlap_time;\n  var night_overlap_cost;\n  var day_overlap_time;\n  var day_overlap_cost;\n  var nighttimeHour;\n  var nighttimeMin;\n  var nighttime_billing;\n  var newDayTime_hour;\n  var newDayTime_min;\n  var newNightTIme_hour;\n  var newNightTIme_min;\n  var newMinutes;\n  var newHours;\n  var daytime_billing;\n  var overlap_billing;\n  var daytimeHour;\n  var daytimeMin;\n  var dayTime;\n  var totalbilling;\n  var nightTime;\n  var night_time_billing;\n\n  const check_and_adjust = () => {\n    // Accumulated Time Check\n    if (hourCheck > 23) {\n      hourCheck = hourCheck - 24;\n    }\n\n    if (minuteCheck >= 60) {\n      newMinutes = minuteCheck - 60;\n      newHours = Math.floor(hourCheck + 1);\n      accumalatedTime = parseInt(`${newHours}${newMinutes}`);\n\n      if (newMinutes < 10) {\n        accumalatedTime = parseInt(`${newHours}0${newMinutes}`);\n      }\n\n      if (newMinutes === 0) {\n        accumalatedTime = parseInt(`${newHours}00`);\n      }\n    } else {\n      accumalatedTime = currentTime + setLimit; //Current time + Set Limit time\n    }\n  };\n\n  check_and_adjust();\n\n  const check_max_time = () => {\n    var count_down_hours = accumalatedTime - currentTime;\n\n    if (count_down_hours == 5) {\n      totalbilling = 5;\n      setBilling(totalbilling);\n    }\n  };\n\n  check_max_time();\n  useEffect(() => {\n    // STRICTLY DAYTIME\n    if (currentTime > 600 && accumalatedTime <= 1800) {\n      // current_time < \n      dayTime = parseInt(`${hours}${minutes}`);\n      night_overlap_time = 0;\n      overlap_billing = 0;\n      daytime_billing = hours * hourly_rate + minutes / 15 * minute_rate;\n      totalbilling = daytime_billing + overlap_billing;\n      setDayTime(dayTime);\n      setDayTimeBilling(daytime_billing);\n      setNightTime(night_overlap_time);\n      setNightTimeBilling(overlap_billing);\n      setBilling(totalbilling);\n    } // DAYTIME OVERLAPPING TO NIGHT \n    else if (currentTime <= 1800 && accumalatedTime > 1800) {\n        //current_time >\n        night_overlap_time = accumalatedTime - 1800;\n        night_overlap_cost = night_overlap_time * .1; //.1 is dollar value of 6 dollars per hour\n        // Math.floor((1800-currentTime) / 100)\n\n        daytimeHour = Math.floor((1800 - currentTime) / 100); // selected hours before night time\n\n        reg_day_time_min_algorythm = Math.floor(60 - currentTime % 100);\n\n        if (reg_day_time_min_algorythm === 60) {\n          reg_day_time_min_algorythm = `${0}${0}`;\n        }\n\n        daytimeMin = reg_day_time_min_algorythm; // selected mins before night time\n\n        dayTime = parseInt(`${daytimeHour}${daytimeMin}`);\n        daytime_billing = daytimeHour * hourly_rate + Math.floor(daytimeMin * 0.27);\n\n        if (night_overlap_time > 99) {\n          newNightTIme_hour = Math.floor(night_overlap_time / 100);\n          newNightTIme_min = Math.floor(night_overlap_time % 100);\n          overlap_billing = newNightTIme_hour * 6 + newNightTIme_min * 0.1;\n          night_overlap_time = parseInt(`${newNightTIme_hour}${newNightTIme_min}`);\n        } else {\n          overlap_billing = Math.round((night_overlap_cost + Number.EPSILON) * 100) / 100;\n        }\n\n        if (night_overlap_time < 99 && night_overlap_time > 60) {\n          newNightTIme_hour = Math.floor(night_overlap_time / 60);\n          newNightTIme_min = Math.floor(night_overlap_time % 60);\n          overlap_billing = newNightTIme_hour * 6 + newNightTIme_min * 0.1;\n          night_overlap_time = parseInt(`${newNightTIme_hour}${newNightTIme_min}`);\n        }\n\n        setDayTime(dayTime);\n        setDayTimeBilling(daytime_billing);\n        setNightTime(night_overlap_time);\n        setNightTimeBilling(overlap_billing); // daytime_billing = 1800 - currentTime\n\n        totalbilling = daytime_billing + overlap_billing;\n        setBilling(totalbilling); //daytime billing\n      } // STRICTLY NIGHT CALCULATIONS\n      else if (currentTime > 1800 && accumalatedTime < 2359 || currentTime < 600 && accumalatedTime <= 600) {\n          dayTime = 0;\n          night_overlap_time = 0;\n          overlap_billing = 0;\n          daytime_billing = 0;\n          nightTime = parseInt(`${hours}${minutes}`); // Might need\n\n          night_time_billing = hours * night_hourly_rate + minutes / 15 * night_minute_rate;\n          setDayTime(dayTime);\n          setDayTimeBilling(daytime_billing);\n          setNightTime(night_overlap_time);\n          setNightTimeBilling(night_time_billing);\n          setBilling(night_time_billing);\n        } // NIGHT OVERLAPPING TO DAY \n        else if (currentTime <= 600 && accumalatedTime > 600) {\n            //current_time >\n            day_overlap_time = accumalatedTime - 600;\n            day_overlap_cost = Math.floor(day_overlap_time * .07); //.07 is dollar value of 4 dollars per hour\n\n            nighttimeHour = Math.floor((600 - currentTime) / 100); // selected hours before night time\n\n            nighttimeMin = Math.floor(60 - currentTime % 100); // selected mins before night time\n\n            nightTime = parseInt(`${nighttimeHour}${nighttimeMin}`);\n            nighttime_billing = nighttimeHour * night_hourly_rate + Math.floor(nighttimeMin * 0.07);\n\n            if (day_overlap_time > 99) {\n              newDayTime_hour = Math.floor(day_overlap_time / 100);\n              newDayTime_min = Math.floor(day_overlap_time % 100);\n              overlap_billing = Math.round((newDayTime_hour * 4 + newDayTime_min * 0.07 + Number.EPSILON) * 100) / 100;\n              day_overlap_time = parseInt(`${newDayTime_hour}${newDayTime_min}`);\n            } else {\n              overlap_billing = Math.round((day_overlap_cost + Number.EPSILON) * 100) / 100;\n            }\n\n            setDayTime(day_overlap_time);\n            setDayTimeBilling(overlap_billing);\n            setNightTime(nightTime);\n            setNightTimeBilling(nighttime_billing); // daytime_billing = 1800 - currentTime\n\n            totalbilling = Math.round((nighttime_billing + overlap_billing + Number.EPSILON) * 100) / 100;\n            setBilling(totalbilling); //daytime billing\n          } // NIGHT GOING INTO DAY BREAK\n    // Set Selected time here for tracking and to be pushed to local storage by confirm BTN\n\n\n    setTime(parseInt(`${hours}${minutes}`));\n  }, [hours, minutes]);\n};\n\n_s(PaymentGenerator, \"I4fejVgDR9RCjmNne9S9Kn77axg=\");\n\n_c = PaymentGenerator;\nexport default PaymentGenerator; //    THEY ARE HERE\n// night_overlap_time = Math.round((night_overlap_cost + Number.EPSILON) * 100) / 100\n// how much day time \n// console.log(`/daytime: ${day_overlap_time}`)\n// //day time cost \n// console.log(`/daytime_billing: ${daytime_billing + overlap_billing}`)\n// //how much night time\n// console.log(`/nighttime: ${night_overlap_time}`)\n// // night time cost \n// console.log(`night Cost: $${overlap_billing}`)\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentGenerator\");","map":{"version":3,"sources":["/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Components/Financials/Calculator/PaymentGenerator.js"],"names":["useEffect","useContext","PaymentContext","PaymentGenerator","hours","minutes","setNightTime","setNightTimeBilling","setDayTime","setDayTimeBilling","setBilling","setTime","timeDate","Date","night_hourly_rate","night_minute_rate","hourly_rate","minute_rate","currentTime","parseInt","getHours","getMinutes","setLimit","accumalatedTime","minuteCheck","hourCheck","Math","floor","reg_day_time_min_algorythm","currentTime_hr","currentTime_min","night_overlap_time","night_overlap_cost","day_overlap_time","day_overlap_cost","nighttimeHour","nighttimeMin","nighttime_billing","newDayTime_hour","newDayTime_min","newNightTIme_hour","newNightTIme_min","newMinutes","newHours","daytime_billing","overlap_billing","daytimeHour","daytimeMin","dayTime","totalbilling","nightTime","night_time_billing","check_and_adjust","check_max_time","count_down_hours","round","Number","EPSILON"],"mappings":"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","sourcesContent":["import { useEffect, useContext } from 'react'\nimport { PaymentContext } from '../../../Context/PaymentContext'\n\n\n\n\n\n\nconst PaymentGenerator = (hours, minutes) => {\n    const {setNightTime, setNightTimeBilling, setDayTime, setDayTimeBilling, setBilling, setTime,} = useContext(PaymentContext)\n    const timeDate = new Date()\n    const night_hourly_rate = 1.75\n    const night_minute_rate = 0\n    const hourly_rate = 1.75\n    const minute_rate = 0\n    //parseInt(`${timeDate.getHours()}${timeDate.getMinutes()}`)\n    var currentTime = parseInt(`${timeDate.getHours()}${timeDate.getMinutes()}`)\n    var setLimit = parseInt(`${hours}${minutes}`)\n    var accumalatedTime = currentTime + setLimit\n    var minuteCheck = accumalatedTime % 100\n    var hourCheck =  Math.floor(accumalatedTime / 100)\n \n\n    var reg_day_time_min_algorythm\n    var currentTime_hr\n    var currentTime_min\n    var night_overlap_time\n    var night_overlap_cost\n    var day_overlap_time\n    var day_overlap_cost\n    var nighttimeHour\n    var nighttimeMin\n    var nighttime_billing\n    var newDayTime_hour\n    var newDayTime_min\n    var newNightTIme_hour\n    var newNightTIme_min\n    var newMinutes\n    var newHours\n    var daytime_billing\n    var overlap_billing\n    var daytimeHour\n    var daytimeMin\n    var dayTime\n    var totalbilling\n    var nightTime\n    var night_time_billing\n\nconst check_and_adjust = () => {\n// Accumulated Time Check\nif(hourCheck > 23){\n    hourCheck = hourCheck - 24\n}\nif( minuteCheck >= 60){\n    newMinutes = minuteCheck - 60\n    newHours = Math.floor((hourCheck) + 1)\n    accumalatedTime = parseInt(`${newHours}${newMinutes}`)\nif(newMinutes < 10){\n        accumalatedTime = parseInt(`${newHours}0${newMinutes}`)\n}\nif(newMinutes === 0){\n    accumalatedTime = parseInt(`${newHours}00`)\n}\n}else {\n    accumalatedTime = currentTime + setLimit //Current time + Set Limit time\n\n}\n}\ncheck_and_adjust()\n\nconst check_max_time = () => {\n    var count_down_hours = accumalatedTime - currentTime\n    if(count_down_hours == 5){ \n        totalbilling = 5\n        setBilling(totalbilling)\n    }\n}\ncheck_max_time()\n\n    useEffect(()=>{\n\n        // STRICTLY DAYTIME\n        if(currentTime > 600 && accumalatedTime <= 1800){ // current_time < \n            dayTime = parseInt(`${hours}${minutes}`)\n            night_overlap_time = 0\n            overlap_billing = 0\n            daytime_billing = hours * hourly_rate + (minutes / 15) * minute_rate\n            totalbilling = daytime_billing + overlap_billing\n\n            setDayTime(dayTime)\n            setDayTimeBilling(daytime_billing)\n            setNightTime(night_overlap_time)\n            setNightTimeBilling(overlap_billing)\n            setBilling(totalbilling)\n        }        \n\n\n        // DAYTIME OVERLAPPING TO NIGHT \n        else if(currentTime <= 1800 && accumalatedTime > 1800){ //current_time >\n            \n            night_overlap_time = accumalatedTime - 1800\n            night_overlap_cost = night_overlap_time * .1 //.1 is dollar value of 6 dollars per hour\n\n            // Math.floor((1800-currentTime) / 100)\n            daytimeHour = Math.floor((1800-currentTime) / 100)// selected hours before night time\n            reg_day_time_min_algorythm = Math.floor(60 - (currentTime % 100))\n            if(reg_day_time_min_algorythm === 60){\n                reg_day_time_min_algorythm = `${0}${0}`\n            }\n            daytimeMin = reg_day_time_min_algorythm// selected mins before night time\n            dayTime = parseInt(`${daytimeHour}${daytimeMin}`)\n            daytime_billing = daytimeHour * hourly_rate + Math.floor(daytimeMin * 0.27)\n        \n\n            if(night_overlap_time > 99){\n             newNightTIme_hour = Math.floor(night_overlap_time / 100)\n             newNightTIme_min = Math.floor(night_overlap_time % 100)\n             overlap_billing = (newNightTIme_hour * 6) + (newNightTIme_min * 0.1)\n             night_overlap_time = parseInt(`${newNightTIme_hour}${newNightTIme_min}`)\n           }else{\n            overlap_billing = Math.round((night_overlap_cost + Number.EPSILON) * 100) / 100\n            }\n           if(night_overlap_time < 99 && night_overlap_time > 60 ){\n            newNightTIme_hour = Math.floor(night_overlap_time / 60)\n            newNightTIme_min = Math.floor(night_overlap_time % 60)\n            overlap_billing = (newNightTIme_hour * 6) + (newNightTIme_min * 0.1)\n            night_overlap_time = parseInt(`${newNightTIme_hour}${newNightTIme_min}`)\n           }\n\n            setDayTime(dayTime)\n            setDayTimeBilling(daytime_billing)\n            setNightTime(night_overlap_time)\n            setNightTimeBilling(overlap_billing)\n           \n            // daytime_billing = 1800 - currentTime\n            totalbilling = daytime_billing + overlap_billing\n            setBilling(totalbilling) //daytime billing\n        }\n        \n        // STRICTLY NIGHT CALCULATIONS\n        else if(currentTime > 1800 && accumalatedTime < 2359 || currentTime < 600 && accumalatedTime <= 600 ){\n            dayTime=0\n            night_overlap_time = 0\n            overlap_billing = 0\n            daytime_billing = 0\n            nightTime = parseInt(`${hours}${minutes}`) // Might need\n            night_time_billing = hours * night_hourly_rate + (minutes / 15) * night_minute_rate\n\n   \n            setDayTime(dayTime)\n            setDayTimeBilling(daytime_billing)\n            setNightTime(night_overlap_time)\n            setNightTimeBilling(night_time_billing)\n            setBilling(night_time_billing) \n           \n        } // NIGHT OVERLAPPING TO DAY \n        else if(currentTime <= 600 && accumalatedTime > 600){ //current_time >\n            \n            day_overlap_time = accumalatedTime - 600\n            day_overlap_cost = Math.floor(day_overlap_time * .07) //.07 is dollar value of 4 dollars per hour\n\n            nighttimeHour = Math.floor((600-currentTime) / 100) // selected hours before night time\n            nighttimeMin = Math.floor(60 - (currentTime % 100))// selected mins before night time\n            nightTime = parseInt(`${nighttimeHour}${nighttimeMin}`)\n            nighttime_billing = nighttimeHour * night_hourly_rate + Math.floor(nighttimeMin * 0.07)\n          \n\n            if(day_overlap_time > 99){\n             newDayTime_hour = Math.floor(day_overlap_time / 100)\n             newDayTime_min = Math.floor(day_overlap_time % 100)\n             overlap_billing = Math.round(((newDayTime_hour * 4) + (newDayTime_min * 0.07) + Number.EPSILON) * 100) / 100\n             day_overlap_time = parseInt(`${newDayTime_hour}${newDayTime_min}`)\n           }else{\n            overlap_billing = Math.round((day_overlap_cost + Number.EPSILON) * 100) / 100\n           }\n           \n\n            \n\n            \n            setDayTime(day_overlap_time)\n            setDayTimeBilling(overlap_billing)\n            setNightTime(nightTime)\n            setNightTimeBilling(nighttime_billing)\n           \n            // daytime_billing = 1800 - currentTime\n            totalbilling = Math.round((nighttime_billing + overlap_billing + Number.EPSILON) * 100) / 100\n            setBilling(totalbilling) //daytime billing\n        }\n\n        // NIGHT GOING INTO DAY BREAK\n\n        // Set Selected time here for tracking and to be pushed to local storage by confirm BTN\n        setTime(parseInt(`${hours}${minutes}`))\n    }, [hours, minutes])\n\n}\n\nexport default PaymentGenerator;\n \n        //    THEY ARE HERE\n            // night_overlap_time = Math.round((night_overlap_cost + Number.EPSILON) * 100) / 100\n            // how much day time \n            // console.log(`/daytime: ${day_overlap_time}`)\n            // //day time cost \n            // console.log(`/daytime_billing: ${daytime_billing + overlap_billing}`)\n            // //how much night time\n            // console.log(`/nighttime: ${night_overlap_time}`)\n            // // night time cost \n            // console.log(`night Cost: $${overlap_billing}`)\n"]},"metadata":{},"sourceType":"module"}