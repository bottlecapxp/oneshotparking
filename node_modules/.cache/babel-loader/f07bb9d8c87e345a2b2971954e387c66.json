{"ast":null,"code":"import { Component } from 'react';\nimport PaymentGenerator from '../Financials/Calculator/PaymentGenerator';\nimport Tick from '../../Assets/tick.mp3';\nimport { Howl, Howler } from 'howler'; // const pGenerator = new PaymentGenerator()\n\nclass TimerLogic extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setValue = valFunc => {\n      this.value = valFunc;\n    };\n\n    this.stepValue = v => {\n      // v stands for value\n      if (v > 1) {\n        return 1;\n      } else {\n        return Math.round(v * 5) / 5; // denotes the amount of steps to take. 5 is assigned to 5 steps given a value of 0.2\n      }\n    };\n\n    this.scrollTime = stepVal => {\n      var givenValue = Math.round(stepVal * 100);\n      console.log(stepVal);\n      console.log(givenValue); // var minutes =  Math.round(300 * givenValue / 100) //300 is max for 5 hours\n      // // console.log(minutes)\n      // // get hours\n      // if (minutes >= 60){\n      //     this.hours = Math.floor(minutes / 60)\n      // }else{\n      //     this.hours = 0\n      // }\n      // // First Check if you're at a full hour\n      // if(minutes / 60 == this.hours){\n      //     this.stagedMinutes = '00'\n      // }\n      // // Else run algorithm\n      // else{\n      //  this.stagedMinutes = (minutes % 60 % 100)\n      // }\n      // PaymentGenerator(this.hours, this.stagedMinutes)\n      // // Sound generator\n      // // this.sound.play()\n      // return(\n      //     parseInt(`${this.hours}${this.stagedMinutes}`)\n      //     // `0${this.hours}h : ${this.stagedMinutes}m`\n      // )\n    };\n\n    this.state = {\n      hours: 0,\n      stagedMinutes: 0,\n      value: 0.0\n    };\n    this.sound = new Howl({\n      src: [Tick],\n      volume: 0.4\n    });\n  }\n\n} // End of Class\n\n\nexport default TimerLogic;","map":{"version":3,"sources":["/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Components/Timer/TimerLogic.js"],"names":["Component","PaymentGenerator","Tick","Howl","Howler","TimerLogic","constructor","props","setValue","valFunc","value","stepValue","v","Math","round","scrollTime","stepVal","givenValue","console","log","state","hours","stagedMinutes","sound","src","volume"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,gBAAP,MAA6B,2CAA7B;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,SAAQC,IAAR,EAAcC,MAAd,QAA2B,QAA3B,C,CAEA;;AAEA,MAAMC,UAAN,SAAyBL,SAAzB,CAAmC;AAC/BM,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SAatBC,QAbsB,GAaXC,OAAO,IAAG;AACrB,WAAKC,KAAL,GAAaD,OAAb;AACC,KAfqB;;AAAA,SAiBtBE,SAjBsB,GAiBVC,CAAC,IAAG;AAAE;AACd,UAAGA,CAAC,GAAG,CAAP,EAAS;AACL,eAAO,CAAP;AACH,OAFD,MAEK;AACD,eAAOC,IAAI,CAACC,KAAL,CAAWF,CAAC,GAAG,CAAf,IAAoB,CAA3B,CADC,CAC4B;AAChC;AACJ,KAvBqB;;AAAA,SA0BtBG,UA1BsB,GA0BTC,OAAO,IAAI;AAChB,UAAIC,UAAU,GAAGJ,IAAI,CAACC,KAAL,CAAWE,OAAO,GAAC,GAAnB,CAAjB;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ,EAHgB,CAIhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAGP,KAzDqB;;AAEd,SAAKG,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE,CADE;AAETC,MAAAA,aAAa,EAAE,CAFN;AAGTZ,MAAAA,KAAK,EAAE;AAHE,KAAb;AAKA,SAAKa,KAAL,GAAa,IAAIpB,IAAJ,CAAS;AAClBqB,MAAAA,GAAG,EAAE,CAACtB,IAAD,CADa;AAElBuB,MAAAA,MAAM,EAAE;AAFU,KAAT,CAAb;AAGH;;AAX8B,C,CAqEjC;;;AAEF,eAAepB,UAAf","sourcesContent":["import { Component } from 'react'\nimport PaymentGenerator from '../Financials/Calculator/PaymentGenerator'\nimport Tick from '../../Assets/tick.mp3'\nimport {Howl, Howler} from 'howler'\n\n// const pGenerator = new PaymentGenerator()\n\nclass TimerLogic extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            hours: 0,\n            stagedMinutes: 0,\n            value: 0.0\n        }\n        this.sound = new Howl({\n            src: [Tick], \n            volume: 0.4})\n    }\n\n\nsetValue = valFunc =>{\nthis.value = valFunc\n}\n\nstepValue = v =>{ // v stands for value\n    if(v > 1){\n        return 1\n    }else{\n        return Math.round(v * 5) / 5 // denotes the amount of steps to take. 5 is assigned to 5 steps given a value of 0.2\n    }\n}\n\n\nscrollTime = stepVal => {\n        var givenValue = Math.round(stepVal*100)\n        console.log(stepVal)\n        console.log(givenValue)\n        // var minutes =  Math.round(300 * givenValue / 100) //300 is max for 5 hours\n        // // console.log(minutes)\n        // // get hours\n        // if (minutes >= 60){\n        //     this.hours = Math.floor(minutes / 60)\n        // }else{\n        //     this.hours = 0\n        // }\n        // // First Check if you're at a full hour\n        // if(minutes / 60 == this.hours){\n        //     this.stagedMinutes = '00'\n        // }\n        // // Else run algorithm\n        // else{\n        //  this.stagedMinutes = (minutes % 60 % 100)\n        // }\n        // PaymentGenerator(this.hours, this.stagedMinutes)\n        // // Sound generator\n        // // this.sound.play()\n  \n        // return(\n\n        //     parseInt(`${this.hours}${this.stagedMinutes}`)\n        //     // `0${this.hours}h : ${this.stagedMinutes}m`\n        // )\n       \n\n}\n\n\n\n\n\n\n\n\n\n\n} // End of Class\n\nexport default TimerLogic"]},"metadata":{},"sourceType":"module"}