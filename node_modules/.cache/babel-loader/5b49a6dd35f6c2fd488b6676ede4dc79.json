{"ast":null,"code":"var _jsxFileName = \"/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Components/Buttons/CircleBtns_txt/CircleTxtBtns.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport '../CircleBtns_txt/CircleBtnstxt.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CircleTxtBtns = ({\n  title,\n  time,\n  addTime,\n  commit\n}) => {\n  _s();\n\n  // const {darkMode} = useContext(PaymentContext)\n  const darkMode = 1800;\n  const [darkModeStyle, setDarkModeStyle] = useState({\n    buttonStyles: 'global_circle_btns',\n    title: 'title'\n  });\n  const [timer, setTimer] = useState({\n    title: title,\n    setTime: parseFloat(time)\n  });\n  const date = new Date();\n  const hour = date.getHours();\n  const limit = 18;\n  const [timeVar, setTimeVar] = useState(time);\n\n  const incrementTime = () => {\n    addTime(timer.setTime, commit);\n    console.log(timer.setTime);\n  };\n\n  const te = () => {};\n\n  useEffect(() => {\n    if (darkMode >= 1800 || darkMode <= 600) {\n      setDarkModeStyle({\n        buttonStyles: 'global_circle_btns_dark',\n        title: 'title_dark'\n      });\n    }\n\n    if (darkMode < 1800 || darkMode > 600) {\n      setDarkModeStyle({\n        buttonStyles: 'global_circle_btns',\n        title: 'title'\n      });\n    }\n\n    const lStorage = localStorage.getItem('max');\n\n    if (timer.setTime * 1000 <= 0) {\n      console.log(hour);\n\n      if (hour < limit && hour > 6) {\n        const remaining_time = limit - hour;\n        setTimer({ ...timer,\n          setTime: `0.0${remaining_time}`\n        });\n        localStorage.setItem('max', true);\n      }\n\n      if (hour >= limit && hour < 24) {\n        const rem_time = 24 - hour + 6;\n        setTimer({ ...timer,\n          setTime: rem_time > 9 ? `0.${rem_time}` : `0.0${rem_time}`\n        }); // need to set condition for when # reaach above 9      \n\n        localStorage.setItem('max', true);\n      }\n\n      if (hour < 6) {\n        const rem_hr = 6 - hour;\n        setTimer({ ...timer,\n          setTime: `0.0${rem_hr}`\n        });\n        localStorage.setItem('max', true);\n      }\n\n      if (lStorage == true) {\n        console.log('work3e');\n      }\n    }\n\n    if (timer.setTime == 0.11) {\n      console.log('worked');\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${darkModeStyle.buttonStyles} content-align`,\n    onClick: incrementTime,\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      className: darkModeStyle.title,\n      children: timer.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CircleTxtBtns, \"NnHVjEvVGIQs76mcWPgvFX2hXrw=\");\n\n_c = CircleTxtBtns;\nexport default CircleTxtBtns;\n\nvar _c;\n\n$RefreshReg$(_c, \"CircleTxtBtns\");","map":{"version":3,"sources":["/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Components/Buttons/CircleBtns_txt/CircleTxtBtns.js"],"names":["React","useEffect","useState","CircleTxtBtns","title","time","addTime","commit","darkMode","darkModeStyle","setDarkModeStyle","buttonStyles","timer","setTimer","setTime","parseFloat","date","Date","hour","getHours","limit","timeVar","setTimeVar","incrementTime","console","log","te","lStorage","localStorage","getItem","remaining_time","setItem","rem_time","rem_hr"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport '../CircleBtns_txt/CircleBtnstxt.css'\n\nconst CircleTxtBtns = ({ title, time, addTime, commit }) => {\n    // const {darkMode} = useContext(PaymentContext)\n    const darkMode = 1800\n    const [darkModeStyle, setDarkModeStyle] = useState({buttonStyles: 'global_circle_btns', title: 'title'})\n    const [timer, setTimer] = useState({title: title, setTime: parseFloat(time)})\n    const date = new Date()\n    const hour = date.getHours()\n    const limit = 18\n    const [timeVar, setTimeVar] = useState(time)\n\n    const incrementTime = () => {\n        addTime(timer.setTime, commit)\n        console.log(timer.setTime)\n    }\n\n    const te = () =>{\n\n    }\n\n\n    useEffect(() => {\n        if (darkMode >= 1800 || darkMode <= 600) {\n            setDarkModeStyle({\n                buttonStyles: 'global_circle_btns_dark',\n                title: 'title_dark'\n            })\n        }\n        if (darkMode < 1800 || darkMode > 600) {\n            setDarkModeStyle({\n                buttonStyles: 'global_circle_btns',\n                title: 'title'\n            })\n        }\n\n        const lStorage = localStorage.getItem('max')\n        if ((timer.setTime * 1000) <= 0) {\n            console.log(hour)\n                if(hour < limit && hour > 6){\n                    const remaining_time = limit - hour\n                    setTimer({...timer, setTime: `0.0${remaining_time}`})\n                    localStorage.setItem('max', true)\n                }\n                if(hour >= limit && hour < 24){\n                    const rem_time =(24 - hour) + 6\n                    setTimer({...timer, setTime: (rem_time > 9?`0.${rem_time}`: `0.0${rem_time}`)}) // need to set condition for when # reaach above 9      \n                    localStorage.setItem('max', true)   \n                }\n                if(hour < 6){\n                    const rem_hr = 6 - hour\n                    setTimer({...timer, setTime: `0.0${rem_hr}`})                \n                    localStorage.setItem('max', true)\n                }\n                if(lStorage == true){ \n                    console.log('work3e')\n                }\n            }\n\n            if(timer.setTime == 0.11){\n                console.log('worked')\n            }\n        \n  \n        \n   \n        \n\n\n\n\n\n\n    }, [])\n\n\n    return (\n        <div className={`${darkModeStyle.buttonStyles} content-align`} onClick={incrementTime}>\n            <span className={darkModeStyle.title}>{timer.title}</span>\n        </div>\n    )\n}\n\nexport default CircleTxtBtns;"]},"metadata":{},"sourceType":"module"}