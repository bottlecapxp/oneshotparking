{"ast":null,"code":"var _jsxFileName = \"/Users/bottlecapmedia/Desktop/OneShot Parking/src/Pages/CardPayment.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport CreditCardIcon from \"../Assets/ccIcon.svg\";\nimport Lock from '../Assets/lock.png';\nimport { useHistory } from 'react-router-dom';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CardPayment = () => {\n  _s();\n\n  const history = useHistory();\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const pay_now = () => {\n    history.push('/remaining-time/');\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const billingDetails = {\n      name: e.target.name.value,\n      email: e.target.email.value,\n      address: {\n        city: e.target.city.value\n      }\n    }; //CREATE PAYMENT INTENT ON THE SERVER\n\n    const {\n      clientSecret\n    } = await fetch('/create-payment-intent', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        paymentMethod: 'card',\n        currency: 'cad'\n      })\n    }).then(r => r.json()); // CONFIRMTHE PAYMENT ON THE CLIENT\n\n    console.log(billingDetails); // if stripe and elements not loaded return null\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    const cardElement = elements.getElement(CardElement);\n    const {\n      error,\n      paymentMethod\n    } = await stripe.createPaymentMethod({\n      type: 'card',\n      card: cardElement\n    });\n\n    if (error) {\n      console.log('[error', error);\n    } else {\n      console.log('[PaymentMethod]', paymentMethod);\n    }\n  };\n\n  const cardElementOptions = {\n    style: {\n      base: {\n        fontSize: '16px'\n      },\n      invalid: {},\n      complete: {}\n    }\n  };\n  {\n    /* <form onSubmit={handleSubmit}>\n       <input type='text' name='name' placeholder='Jane Doe' required></input>\n       <input type='email' name='email' placeholder='JaneDoe@example.com' required></input>\n       <input type='address' name='address' placeholder='1 place rd' required></input>\n       <input type='text' name='city' placeholder='Toronto' required></input>\n       \n        <CardElement options={cardElementOptions}/>\n       <button type='submit' disabled={!stripe}>\n           Pay Now\n       </button>\n    </form> */\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"global_container choose_lot\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"name\",\n        placeholder: \"Jane Doe\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        name: \"email\",\n        placeholder: \"JaneDoe@example.com\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"address\",\n        name: \"address\",\n        placeholder: \"1 place rd\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"city\",\n        placeholder: \"Toronto\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(CardElement, {\n        options: cardElementOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: !stripe,\n        children: \"Pay Now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CardPayment, \"99jALou7W0qReY00KbE6QsRiWaA=\", false, function () {\n  return [useHistory, useStripe, useElements];\n});\n\n_c = CardPayment;\nexport default CardPayment; // <div>\n// <h1 className='global_content_title slim' style={{textAlign: 'center',marginTop: '-50%'}}>Enter your card's information below</h1>\n// <div className='card_'>\n//     {/* Enter your card numner */}\n//     <div className='stacked_'>\n//     <label id='CCnumberLabel'>Enter Your Card Number</label>\n//     <input id='CCnumber'></input>\n//     </div>\n//     {/* Expiration CVC & Icon */}\n//     <div className='auth_holder'>\n//         <div className='stacked_'>\n//         <label>Expiration</label>\n//         <input id='expiration'></input>\n//         </div>\n//         <div className='stacked_'>\n//         <label>CVC</label>\n//         <input id='cvc'></input>\n//         </div>\n//         <div>\n//             <img className='ccIcon' src={CreditCardIcon} alt='creditCard_logo'></img>\n//         </div>\n//     </div>\n//     <div className='securePaymentHolder'>\n//         <div className='securePayment_'>  {/* display flex */}\n//             {/* image */}\n//             <img className='lock' src={Lock}></img>\n//             <p>Secure Payment</p>\n//             {/* text info */}\n//         </div>\n//     </div>\n//     {/* Button here */}\n//     <div className='ccCardSubmissionHolder'>\n//     <input style={{color: '#FF5759'}} className='submitBtn box-shadow ccCardSubmission' onClick={pay_now} type='submit' value='Pay Now'></input>\n//     </div>\n// </div>\n// </div>\n\nvar _c;\n\n$RefreshReg$(_c, \"CardPayment\");","map":{"version":3,"sources":["/Users/bottlecapmedia/Desktop/OneShot Parking/src/Pages/CardPayment.js"],"names":["React","Lock","useHistory","CardElement","useStripe","useElements","CardPayment","history","stripe","elements","pay_now","push","handleSubmit","e","preventDefault","billingDetails","name","target","value","email","address","city","clientSecret","fetch","method","headers","body","JSON","stringify","paymentMethod","currency","then","r","json","console","log","cardElement","getElement","error","createPaymentMethod","type","card","cardElementOptions","style","base","fontSize","invalid","complete"],"mappings":"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","sourcesContent":["import React from 'react'\nimport CreditCardIcon from '../Assets/ccIcon.svg'\nimport Lock from '../Assets/lock.png'\nimport {useHistory} from 'react-router-dom'\nimport {CardElement, useStripe, useElements} from '@stripe/react-stripe-js'; \n\n\nconst CardPayment = () => {\nconst history = useHistory()\nconst stripe = useStripe()\nconst elements = useElements()\nconst pay_now = () =>{\n    history.push('/remaining-time/')\n}\n\n\nconst handleSubmit = async (e) =>{\n    e.preventDefault();\n\n\n    const billingDetails = {\n        name: e.target.name.value, \n        email: e.target.email.value, \n        address: {\n            city: e.target.city.value, \n        }\n    }   \n\n    //CREATE PAYMENT INTENT ON THE SERVER\n    const {clientSecret} = await fetch('/create-payment-intent', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            paymentMethod: 'card',\n            currency: 'cad',\n\n        }),\n    }).then(r => r.json())\n\n\n    // CONFIRMTHE PAYMENT ON THE CLIENT\n\n\n\n    console.log(billingDetails)\n    // if stripe and elements not loaded return null\n    if(!stripe || !elements){\n        return;\n    }\n       const cardElement = elements.getElement(CardElement)\n       \n       const {error, paymentMethod} = await stripe.createPaymentMethod({\n           type: 'card',\n           card: cardElement\n       })\n       if(error){\n           console.log('[error', error);\n       }else{\n           console.log('[PaymentMethod]', paymentMethod);\n       }\n}\n\nconst cardElementOptions = {\n    style: {\n        base:{\n            fontSize: '16px',\n\n        },\n        invalid:{\n            \n        },\n        complete: {\n\n        }\n    }\n}\n\n{/* <form onSubmit={handleSubmit}>\n    <input type='text' name='name' placeholder='Jane Doe' required></input>\n    <input type='email' name='email' placeholder='JaneDoe@example.com' required></input>\n    <input type='address' name='address' placeholder='1 place rd' required></input>\n    <input type='text' name='city' placeholder='Toronto' required></input>\n    \n\n    <CardElement options={cardElementOptions}/>\n    <button type='submit' disabled={!stripe}>\n        Pay Now\n    </button>\n</form> */}\n\nreturn(\n    <div className='global_container choose_lot'>\n    <form onSubmit={handleSubmit}>\n    <input type='text' name='name' placeholder='Jane Doe' required></input>\n    <input type='email' name='email' placeholder='JaneDoe@example.com' required></input>\n    <input type='address' name='address' placeholder='1 place rd' required></input>\n    <input type='text' name='city' placeholder='Toronto' required></input>\n    \n\n    <CardElement options={cardElementOptions}/>\n    <button type='submit' disabled={!stripe}>\n        Pay Now\n    </button>\n</form>\n    </div>\n)\n}\nexport default CardPayment;\n\n// <div>\n// <h1 className='global_content_title slim' style={{textAlign: 'center',marginTop: '-50%'}}>Enter your card's information below</h1>\n// <div className='card_'>\n//     {/* Enter your card numner */}\n//     <div className='stacked_'>\n//     <label id='CCnumberLabel'>Enter Your Card Number</label>\n//     <input id='CCnumber'></input>\n//     </div>\n//     {/* Expiration CVC & Icon */}\n//     <div className='auth_holder'>\n//         <div className='stacked_'>\n//         <label>Expiration</label>\n//         <input id='expiration'></input>\n//         </div>\n//         <div className='stacked_'>\n//         <label>CVC</label>\n//         <input id='cvc'></input>\n//         </div>\n//         <div>\n//             <img className='ccIcon' src={CreditCardIcon} alt='creditCard_logo'></img>\n//         </div>\n//     </div>\n//     <div className='securePaymentHolder'>\n//         <div className='securePayment_'>  {/* display flex */}\n//             {/* image */}\n//             <img className='lock' src={Lock}></img>\n//             <p>Secure Payment</p>\n//             {/* text info */}\n//         </div>\n//     </div>\n\n//     {/* Button here */}\n//     <div className='ccCardSubmissionHolder'>\n//     <input style={{color: '#FF5759'}} className='submitBtn box-shadow ccCardSubmission' onClick={pay_now} type='submit' value='Pay Now'></input>\n//     </div>\n    \n    \n// </div>\n// </div>"]},"metadata":{},"sourceType":"module"}