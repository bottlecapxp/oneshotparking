{"ast":null,"code":"import _classCallCheck from\"/Users/bottlecapmedia/Documents/Applications/OneShot Parking/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _inherits from\"/Users/bottlecapmedia/Documents/Applications/OneShot Parking/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/bottlecapmedia/Documents/Applications/OneShot Parking/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import{Component}from'react';import PaymentGenerator from'../Financials/Calculator/PaymentGenerator';import Tick from'../../Assets/tick.mp3';import{Howl,Howler}from'howler';// const pGenerator = new PaymentGenerator()\nvar TimerLogic=/*#__PURE__*/function(_Component){_inherits(TimerLogic,_Component);var _super=_createSuper(TimerLogic);function TimerLogic(props){var _this;_classCallCheck(this,TimerLogic);_this=_super.call(this,props);_this.setValue=function(valFunc){_this.value=valFunc;};_this.stepValue=function(v){if(v>1){return 1;}else{return Math.round(v*24)/24;}};_this.scrollTime=function(stepVal){var givenValue=Math.round(stepVal*24);// minutes is the stepVal % by 0.0417\nvar convert_to_stepVal=givenValue*0.041666666666666664;var min_calc=Math.round((stepVal-convert_to_stepVal)/0.000695);if(min_calc<0){_this.stagedMinutes=-(-60-min_calc);}else if(min_calc==-1||min_calc==1){_this.stagedMinutes=0;}else{_this.stagedMinutes=min_calc<10&&min_calc>0?\"0\".concat(min_calc):min_calc;}// this.stagedMinutes = min_calc < 0? -(-60 -min_calc) : min_calc //having issues using the % sign. Possibly because we're trying to round a fraction of a fraction String seems to work for now. not the ideal for long term\n// console.log(convert_to_stepVal)\n// console.log(stepVal)\n_this.hours=parseInt(stepVal/0.041666666666666664)==0?parseInt(_this.stagedMinutes/10):parseInt(stepVal/0.041666666666666664);// console.log(`hours: ${this.hours}`)\n// console.log(`minutes: ${min_calc}`)\n// console.log(`stepVal: ${stepVal}`)\nPaymentGenerator(_this.hours,_this.stagedMinutes);//Sound generator      \nvar sound=new Howl({src:[Tick],volume:0.6});sound.play();// console.log(min_calc)\nreturn parseInt(\"\".concat(_this.hours).concat(_this.stagedMinutes<=0?'00':_this.stagedMinutes));};_this.hour=0;_this.stagedMinutes=0;_this.value=0.0;return _this;}return TimerLogic;}(Component);// End of Class\nexport default TimerLogic;// if(min_calc < 0){ \n//     this.stagedMinutes = -(-60 -min_calc)\n// }else if(min_calc == -1){\n//     this.stagedMinutes = 0\n// }\n// else{\n//     this.stagedMinutes = min_calc\n// }\n// minutes =  Math.round(6000 * givenValue / 100)\n// // get hours\n// if (minutes > 60){\n//     this.hours = Math.floor(minutes / 100)\n// } else if(minutes / 60 === 1){\n//     this.hours = 1\n// }else{\n//     this.hours = 0\n// }\n// // First Check if you're at a full hour\n// if(minutes === 60 || (minutes / 60) === this.hours){\n//     this.stagedMinutes = '00'\n// }\n// // Else run algorithm\n// else{\n//  this.stagedMinutes = (minutes % 60 % 100)\n// }\n// var sound = new Howl({\n//     src: [Tick], \n//     volume: 0.7\n// })","map":{"version":3,"sources":["/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Components/Timer/TimerLogic.js"],"names":["Component","PaymentGenerator","Tick","Howl","Howler","TimerLogic","props","setValue","valFunc","value","stepValue","v","Math","round","scrollTime","stepVal","givenValue","convert_to_stepVal","min_calc","stagedMinutes","hours","parseInt","sound","src","volume","play","hour"],"mappings":"6gBAAA,OAASA,SAAT,KAA0B,OAA1B,CACA,MAAOC,CAAAA,gBAAP,KAA6B,2CAA7B,CACA,MAAOC,CAAAA,IAAP,KAAiB,uBAAjB,CACA,OAASC,IAAT,CAAeC,MAAf,KAA6B,QAA7B,CAEA;GAEMC,CAAAA,U,wGACF,oBAAYC,KAAZ,CAAmB,4CACf,uBAAMA,KAAN,EADe,MAQnBC,QARmB,CAQR,SAAAC,OAAO,CAAI,CAClB,MAAKC,KAAL,CAAaD,OAAb,CACH,CAVkB,OAYnBE,SAZmB,CAYP,SAAAC,CAAC,CAAI,CACb,GAAIA,CAAC,CAAG,CAAR,CAAW,CACP,MAAO,EAAP,CACH,CAFD,IAEO,CACH,MAAOC,CAAAA,IAAI,CAACC,KAAL,CAAWF,CAAC,CAAG,EAAf,EAAqB,EAA5B,CACH,CACJ,CAlBkB,OAqBnBG,UArBmB,CAqBN,SAAAC,OAAO,CAAI,CACpB,GAAIC,CAAAA,UAAU,CAAGJ,IAAI,CAACC,KAAL,CAAWE,OAAO,CAAG,EAArB,CAAjB,CACA;AACA,GAAIE,CAAAA,kBAAkB,CAAGD,UAAU,CAAG,oBAAtC,CACA,GAAME,CAAAA,QAAQ,CAAGN,IAAI,CAACC,KAAL,CAAW,CAACE,OAAO,CAAGE,kBAAX,EAAiC,QAA5C,CAAjB,CACA,GAAGC,QAAQ,CAAG,CAAd,CAAgB,CACZ,MAAKC,aAAL,CAAqB,EAAE,CAAC,EAAD,CAAKD,QAAP,CAArB,CACH,CAFD,IAEM,IAAGA,QAAQ,EAAI,CAAC,CAAb,EAAkBA,QAAQ,EAAI,CAAjC,CAAmC,CACrC,MAAKC,aAAL,CAAqB,CAArB,CACH,CAFK,IAGF,CACA,MAAKA,aAAL,CAAsBD,QAAQ,CAAG,EAAX,EAAiBA,QAAQ,CAAG,CAA5B,YAAkCA,QAAlC,EAA8CA,QAApE,CACH,CAGD;AACA;AACA;AACA,MAAKE,KAAL,CAAcC,QAAQ,CAACN,OAAO,CAAG,oBAAX,CAAR,EAA4C,CAA5C,CAA+CM,QAAQ,CAAC,MAAKF,aAAL,CAAqB,EAAtB,CAAvD,CAAiFE,QAAQ,CAACN,OAAO,CAAG,oBAAX,CAAvG,CACA;AACA;AACA;AACAd,gBAAgB,CAAC,MAAKmB,KAAN,CAAa,MAAKD,aAAlB,CAAhB,CAEA;AACA,GAAMG,CAAAA,KAAK,CAAG,GAAInB,CAAAA,IAAJ,CAAS,CACnBoB,GAAG,CAAE,CAACrB,IAAD,CADc,CAEnBsB,MAAM,CAAE,GAFW,CAAT,CAAd,CAIAF,KAAK,CAACG,IAAN,GACA;AACA,MACIJ,CAAAA,QAAQ,WAAI,MAAKD,KAAT,SAAiB,MAAKD,aAAL,EAAsB,CAAtB,CAA0B,IAA1B,CAAiC,MAAKA,aAAvD,EADZ,CAIH,CAxDkB,CAEf,MAAKO,IAAL,CAAY,CAAZ,CACA,MAAKP,aAAL,CAAqB,CAArB,CACA,MAAKV,KAAL,CAAa,GAAb,CAJe,aAKlB,C,oBANoBT,S,EAqEvB;AAEF,cAAeK,CAAAA,UAAf,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEQ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGR;AACA;AACA;AACA","sourcesContent":["import { Component } from 'react'\nimport PaymentGenerator from '../Financials/Calculator/PaymentGenerator'\nimport Tick from '../../Assets/tick.mp3'\nimport { Howl, Howler } from 'howler'\n\n// const pGenerator = new PaymentGenerator()\n\nclass TimerLogic extends Component {\n    constructor(props) {\n        super(props)\n        this.hour = 0\n        this.stagedMinutes = 0\n        this.value = 0.0\n    }\n\n\n    setValue = valFunc => {\n        this.value = valFunc\n    }\n\n    stepValue = v => {\n        if (v > 1) {\n            return 1\n        } else {\n            return Math.round(v * 24) / 24\n        }\n    }\n\n\n    scrollTime = stepVal => {\n        var givenValue = Math.round(stepVal * 24)\n        // minutes is the stepVal % by 0.0417\n        var convert_to_stepVal = givenValue * 0.041666666666666664\n        const min_calc = Math.round((stepVal - convert_to_stepVal) / 0.000695)\n        if(min_calc < 0){ \n            this.stagedMinutes = -(-60 -min_calc)\n        }else if(min_calc == -1 || min_calc == 1){\n            this.stagedMinutes = 0\n        }\n        else{\n            this.stagedMinutes = (min_calc < 10 && min_calc > 0?`0${min_calc}`: min_calc )\n        }\n       \n\n        // this.stagedMinutes = min_calc < 0? -(-60 -min_calc) : min_calc //having issues using the % sign. Possibly because we're trying to round a fraction of a fraction String seems to work for now. not the ideal for long term\n        // console.log(convert_to_stepVal)\n        // console.log(stepVal)\n        this.hours = (parseInt(stepVal / 0.041666666666666664) == 0? parseInt(this.stagedMinutes / 10):parseInt(stepVal / 0.041666666666666664) )\n        // console.log(`hours: ${this.hours}`)\n        // console.log(`minutes: ${min_calc}`)\n        // console.log(`stepVal: ${stepVal}`)\n        PaymentGenerator(this.hours, this.stagedMinutes)\n\n        //Sound generator      \n        const sound = new Howl({\n            src: [Tick],\n            volume: 0.6\n        })\n        sound.play()\n        // console.log(min_calc)\n        return (\n            parseInt(`${this.hours}${this.stagedMinutes <= 0 ? '00' : this.stagedMinutes}`)\n        )\n\n    }\n\n\n\n\n\n\n\n\n\n\n\n} // End of Class\n\nexport default TimerLogic\n\n// if(min_calc < 0){ \n//     this.stagedMinutes = -(-60 -min_calc)\n// }else if(min_calc == -1){\n//     this.stagedMinutes = 0\n// }\n// else{\n//     this.stagedMinutes = min_calc\n// }\n\n\n// minutes =  Math.round(6000 * givenValue / 100)\n\n        // // get hours\n        // if (minutes > 60){\n        //     this.hours = Math.floor(minutes / 100)\n        // } else if(minutes / 60 === 1){\n        //     this.hours = 1\n        // }else{\n        //     this.hours = 0\n        // }\n        // // First Check if you're at a full hour\n        // if(minutes === 60 || (minutes / 60) === this.hours){\n        //     this.stagedMinutes = '00'\n        // }\n        // // Else run algorithm\n        // else{\n        //  this.stagedMinutes = (minutes % 60 % 100)\n        // }\n\n\n// var sound = new Howl({\n//     src: [Tick], \n//     volume: 0.7\n// })"]},"metadata":{},"sourceType":"module"}