{"ast":null,"code":"var _jsxFileName = \"/Users/bottlecapmedia/Desktop/Applications/OneShot Parking/src/Pages/CountDown.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect } from 'react';\nimport { PaymentContext } from '../Context/PaymentContext';\nimport Receipt from '../Components/Receipt/Receipt';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CountDown = () => {\n  _s();\n\n  const {\n    darkMode\n  } = useContext(PaymentContext);\n  const getSetTime = localStorage.getItem('timeStore');\n  const [showReceipt, setShowReceipt] = useState(false);\n  const expiredTime = localStorage.getItem('expTime');\n  const [darkModeStyle, setDarkModeStyle] = useState({\n    globalContainer: 'global_container',\n    color: '#585858',\n    circleAnimation: 'circleAnimation',\n    countDownAdj: 'countdown_adjustment'\n  });\n  const [containerStyling, setContainerStyling] = useState({\n    divStyle: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    buttonStyle: {\n      marginTop: '30px',\n      border: '1px solid #848484',\n      fontSize: '13px',\n      // border: '1px solid #FF4F4F',\n      padding: '10px',\n      borderRadius: '10px',\n      margin: '0px 5px 0px 5px',\n      boxShadow: '10px 10px 30px rgba(174, 174, 192, 0.4), -10px -10px 30px #FFFFFF'\n    },\n    buttonDiv: {\n      width: '100%',\n      display: 'flex',\n      justifyContent: 'space-around'\n    }\n  }); // Add this to local storage as the initial time\n\n  const [countDown, setCountDown] = useState({\n    hours: null,\n    mins: null,\n    secs: null,\n    ms: null // hours: Math.round(getSetTime / 100),\n    // mins: getSetTime % 100,\n    // secs: 60,\n    // ms: 1000\n\n  });\n\n  const toggle = () => {\n    setShowReceipt(!showReceipt);\n  }; // if(localStorage.getItem('hours') === null || ){\n  // }\n  // Set mutable variables for updates\n  // These are the times updated times     \n  // var updated_hours = localStorage.getItem('hours'), updated_mins = localStorage.getItem('mins'),  updated_secs = localStorage.getItem('secs'), updated_ms = localStorage.getItem('ms')\n\n\n  useEffect(() => {\n    if (darkMode >= 1800 || darkMode <= 600) {\n      setDarkModeStyle({\n        globalContainer: 'global_container_dark',\n        color: 'white',\n        submitBtn: 'submitBtn_dark',\n        circleAnimation: 'circleAnimation_dark',\n        countDownAdj: 'countdown_adjustment_dark'\n      });\n      setContainerStyling({\n        divStyle: {\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center'\n        },\n        buttonStyle: {\n          marginTop: '30px',\n          border: '1px solid #EA4335',\n          fontSize: '13px',\n          // border: '1px solid #FF4F4F',\n          padding: '10px',\n          borderRadius: '10px',\n          margin: '0px 5px 0px 5px',\n          color: '#EA4335',\n          background: '#1E2834',\n          boxSizing: 'border-box',\n          boxShadow: '10px 10px 30px rgba(0, 0, 0, 0.6), -10px -10px 30px rgba(255, 255, 255, 0.12)'\n        },\n        buttonDiv: {\n          width: '100%',\n          display: 'flex',\n          justifyContent: 'space-around'\n        }\n      });\n    } // Set var to local storage so time is not lost. \n\n\n    localStorage.setItem('hours', Math.round(getSetTime / 100));\n    localStorage.setItem('mins', getSetTime % 100);\n    localStorage.setItem('secs', 60);\n    localStorage.setItem('ms', 1000);\n    setInterval(() => {\n      setCountDown({\n        hours: localStorage.getItem('hours'),\n        mins: localStorage.getItem('mins'),\n        secs: localStorage.getItem('secs')\n      });\n    }, 1000);\n  }, []);\n\n  const run = () => {\n    const localStorage_secs = localStorage.getItem('secs');\n    localStorage.setItem('secs', localStorage_secs--); // if(updated_ms === 0){\n    //     updated_secs--\n    //     updated_ms = 1000\n    // }\n\n    if (updated_secs === 0) {\n      updated_mins--;\n      localStorage.setItem('mins', updated_mins);\n      localStorage.setItem('secs', 60); // updated_secs = 60\n    }\n\n    if (updated_mins === 0) {\n      updated_hours--;\n      localStorage.setItem('hours', updated_hours);\n      localStorage.setItem('mins', 60); // updated_mins = 60\n    }\n\n    if (updated_hours === 0) {\n      localStorage.setItem('hours', '00'); // updated_hours = '00'\n    } // console.log(updated_secs)\n\n\n    setTimeout(run, 1000);\n  };\n\n  run(); // setInterval(run, 1000)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${darkModeStyle.globalContainer} choose_lot`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: containerStyling.divStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: darkModeStyle.circleAnimation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"countdown_digits_holder\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: darkModeStyle.countDownAdj,\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            style: {\n              marginBottom: '0px'\n            },\n            children: \"Active Session\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"countdown_digits\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"digits\",\n              children: `${countDown.hours}h`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"digits\",\n              children: `${countDown.mins}m`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"digits\",\n              children: [`${countDown.secs}`, \"s\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 13\n      }, this), showReceipt ? /*#__PURE__*/_jsxDEV(Receipt, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 22\n      }, this) : '', /*#__PURE__*/_jsxDEV(\"h4\", {\n        style: {\n          marginTop: '30%',\n          color: darkModeStyle.color\n        },\n        children: [\"Your Time Expires at: \", expiredTime]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: containerStyling.buttonDiv,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: containerStyling.buttonStyle,\n          children: \"Extend My Time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          onClick: toggle,\n          style: containerStyling.buttonStyle,\n          children: \"View My Receipt\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 1\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CountDown, \"DudUQ9lWrm3gyV81fromPOwBBVM=\");\n\n_c = CountDown;\n\nvar _c;\n\n$RefreshReg$(_c, \"CountDown\");","map":{"version":3,"sources":["/Users/bottlecapmedia/Desktop/Applications/OneShot Parking/src/Pages/CountDown.js"],"names":["React","useState","useContext","useEffect","PaymentContext","Receipt","CountDown","darkMode","getSetTime","localStorage","getItem","showReceipt","setShowReceipt","expiredTime","darkModeStyle","setDarkModeStyle","globalContainer","color","circleAnimation","countDownAdj","containerStyling","setContainerStyling","divStyle","display","flexDirection","alignItems","justifyContent","buttonStyle","marginTop","border","fontSize","padding","borderRadius","margin","boxShadow","buttonDiv","width","countDown","setCountDown","hours","mins","secs","ms","toggle","submitBtn","background","boxSizing","setItem","Math","round","setInterval","run","localStorage_secs","updated_secs","updated_mins","updated_hours","setTimeout","marginBottom"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect} from 'react'\nimport {PaymentContext} from '../Context/PaymentContext'\nimport Receipt from '../Components/Receipt/Receipt'\n\n\n\nexport const CountDown = () => {\n    const { darkMode } = useContext(PaymentContext)\n    const getSetTime = localStorage.getItem('timeStore')\n    const [showReceipt, setShowReceipt] = useState(false)\n    const expiredTime = localStorage.getItem('expTime')\n    const [darkModeStyle, setDarkModeStyle] = useState({\n        globalContainer: 'global_container', \n        color: '#585858',    \n        circleAnimation: 'circleAnimation', \n        countDownAdj: 'countdown_adjustment'\n    })\n\n    const [containerStyling, setContainerStyling] = useState({\n        divStyle:{\n            display:'flex', \n            flexDirection: 'column', \n            alignItems: 'center', \n            justifyContent: 'center'\n        },\n        buttonStyle:{\n            marginTop: '30px',\n            border: '1px solid #848484',\n            fontSize: '13px',\n            // border: '1px solid #FF4F4F',\n            padding: '10px',\n            borderRadius: '10px', \n            margin: '0px 5px 0px 5px',\n            boxShadow: '10px 10px 30px rgba(174, 174, 192, 0.4), -10px -10px 30px #FFFFFF'\n        },\n        buttonDiv: {\n            width: '100%',\n            display: 'flex',\n            justifyContent: 'space-around'\n        }\n    })\n    // Add this to local storage as the initial time\n    const [countDown, setCountDown] = useState({\n        hours: null, \n        mins: null, \n        secs: null, \n        ms: null\n        // hours: Math.round(getSetTime / 100),\n        // mins: getSetTime % 100,\n        // secs: 60,\n        // ms: 1000\n    })\n    \n    const toggle = () =>{\n        setShowReceipt(!showReceipt)\n    }\n     \n    // if(localStorage.getItem('hours') === null || ){\n\n    // }\n\n\n\n\n\n\n\n\n    // Set mutable variables for updates\n    // These are the times updated times     \n    // var updated_hours = localStorage.getItem('hours'), updated_mins = localStorage.getItem('mins'),  updated_secs = localStorage.getItem('secs'), updated_ms = localStorage.getItem('ms')\n\n    useEffect(()=>{\n        if(darkMode >= 1800 || darkMode <= 600){\n            setDarkModeStyle({\n                globalContainer: 'global_container_dark',\n                color: 'white',\n                submitBtn: 'submitBtn_dark',\n                circleAnimation: 'circleAnimation_dark',\n                countDownAdj: 'countdown_adjustment_dark'\n            })\n            setContainerStyling({\n                divStyle:{\n                    display:'flex', \n                    flexDirection: 'column', \n                    alignItems: 'center', \n                    justifyContent: 'center'\n                },\n                buttonStyle:{\n                    marginTop: '30px',\n                    border: '1px solid #EA4335',\n                    fontSize: '13px',\n                    // border: '1px solid #FF4F4F',\n                    padding: '10px',\n                    borderRadius: '10px', \n                    margin: '0px 5px 0px 5px',\n                    color: '#EA4335',\n                    background: '#1E2834',\n                    boxSizing: 'border-box',\n                    boxShadow: '10px 10px 30px rgba(0, 0, 0, 0.6), -10px -10px 30px rgba(255, 255, 255, 0.12)'\n                   \n                },\n                buttonDiv: {\n                    width: '100%',\n                    display: 'flex',\n                    justifyContent: 'space-around'\n                }\n            })\n        }\n\n        // Set var to local storage so time is not lost. \n\n        localStorage.setItem('hours', Math.round(getSetTime / 100))\n        localStorage.setItem('mins', getSetTime % 100)\n        localStorage.setItem('secs', 60)\n        localStorage.setItem('ms', 1000)\n\n\n\n        setInterval(()=>{\n            setCountDown({\n                hours: localStorage.getItem('hours'),\n                mins: localStorage.getItem('mins'), \n                secs: localStorage.getItem('secs'),\n            })      \n        }, 1000)\n\n\n    },[])\n\n\n\n\n    const run = () => { \n        const localStorage_secs = localStorage.getItem('secs')\n        localStorage.setItem('secs',localStorage_secs--)\n      \n        // if(updated_ms === 0){\n        //     updated_secs--\n        //     updated_ms = 1000\n        // }\n        if(updated_secs === 0){\n            updated_mins--\n            localStorage.setItem('mins', updated_mins)\n            localStorage.setItem('secs', 60)\n            // updated_secs = 60\n        }\n        if(updated_mins === 0){\n            updated_hours--\n            localStorage.setItem('hours', updated_hours)\n            localStorage.setItem('mins', 60)\n            // updated_mins = 60\n        }\n        if(updated_hours === 0){\n            localStorage.setItem('hours', '00')\n            // updated_hours = '00'\n        }\n        // console.log(updated_secs)\n        setTimeout(run, 1000)\n    }\nrun()\n    // setInterval(run, 1000)\n\n\n\n\n    \n    return (\n        <div className={`${darkModeStyle.globalContainer} choose_lot`}>\n<div style={containerStyling.divStyle}>\n<div className={darkModeStyle.circleAnimation}></div>\n            <div className='countdown_digits_holder'>\n                <div className={darkModeStyle.countDownAdj}>\n                    <h3 style={{marginBottom: '0px'}}>Active Session</h3>\n                <div className='countdown_digits'>\n                    <span className='digits'>{`${countDown.hours}h`}</span> \n                    <span className='digits'>{`${countDown.mins}m`}</span>\n                    <span className='digits' >{`${countDown.secs}`}s</span>\n                </div>\n                </div>\n        \n        </div>\n        {showReceipt?<Receipt />:'' }\n   \n        <h4 style={{marginTop: '30%', color: darkModeStyle.color}}>Your Time Expires at: {expiredTime}</h4>\n        <div style={containerStyling.buttonDiv}>\n        <span style={containerStyling.buttonStyle}>Extend My Time</span>\n        <span onClick={toggle} style={containerStyling.buttonStyle}>View My Receipt</span>\n        </div>\n\n</div>\n\n            {/* Count down time */}\n            {/* Buttone to Extend time here */}\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}