{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useContext } from 'react';\nimport { useEffect } from 'react/cjs/react.development';\nimport { PaymentContext } from '../../../Context/PaymentContext';\nimport Time from '../../Timer/Time';\n\nconst PaymentGenerator = (hours, minutes) => {\n  _s();\n\n  const {\n    setNightTime,\n    setNightTimeBilling,\n    setDayTime,\n    setDayTimeBilling,\n    setBilling,\n    setTime\n  } = useContext(PaymentContext);\n  const timeDate = new Date();\n  const night_hourly_rate = 1.75;\n  const night_minute_rate = 0;\n  const hourly_rate = 1.75;\n  const minute_rate = 0; //parseInt(`${timeDate.getHours()}${timeDate.getMinutes()}`)\n\n  var currentTime = parseInt(`${timeDate.getHours()}${timeDate.getMinutes()}`);\n  var setLimit = parseInt(`${hours}${minutes}`);\n  var accumalatedTime = currentTime + setLimit;\n  var minuteCheck = accumalatedTime % 100;\n  var hourCheck = Math.floor(accumalatedTime / 100);\n  var count_down_hours = Math.round((accumalatedTime - currentTime) / 100);\n  var reg_day_time_min_algorythm;\n  var currentTime_hr;\n  var currentTime_min;\n  var night_overlap_time;\n  var night_overlap_cost;\n  var day_overlap_time;\n  var day_overlap_cost;\n  var nighttimeHour;\n  var nighttimeMin;\n  var nighttime_billing;\n  var newDayTime_hour;\n  var newDayTime_min;\n  var newNightTIme_hour;\n  var newNightTIme_min;\n  var newMinutes;\n  var newHours;\n  var daytime_billing;\n  var overlap_billing;\n  var daytimeHour;\n  var daytimeMin;\n  var dayTime;\n  var totalbilling;\n  var nightTime;\n  var night_time_billing;\n  var day_rate_max = 3;\n  var night_rate_max = 5;\n  var totalCost;\n\n  const check_and_adjust = () => {\n    // Accumulated Time Check\n    if (hourCheck > 23) {\n      hourCheck = hourCheck - 24;\n    }\n\n    if (minuteCheck >= 60) {\n      newMinutes = minuteCheck - 60;\n      newHours = Math.floor(hourCheck + 1);\n      accumalatedTime = parseInt(`${newHours}${newMinutes}`);\n\n      if (newMinutes < 10) {\n        accumalatedTime = parseInt(`${newHours}0${newMinutes}`);\n      }\n\n      if (newMinutes === 0) {\n        accumalatedTime = parseInt(`${newHours}00`);\n      }\n    } else {\n      accumalatedTime = currentTime + setLimit; //Current time + Set Limit time\n    }\n  };\n\n  check_and_adjust();\n\n  const calculate_money = () => {\n    var wheel_scroll = setLimit / 10;\n    console.log(setLimit);\n\n    if (currentTime > 600) {\n      console.log(accumalatedTime);\n\n      if (accumalatedTime < 1800) {\n        console.log('lesser');\n      } else if (accumalatedTime > 1800) {\n        console.log('lesser');\n      }\n    }\n  };\n\n  useEffect(() => {\n    calculate_money();\n  }, [calculate_money]);\n\n  const setbillings = (set_day_time, set_night_time, set_daytime_billing, set_nighttime_billing) => {\n    setDayTime(set_day_time);\n    setDayTimeBilling(set_daytime_billing);\n    setNightTime(set_night_time);\n    setNightTimeBilling(set_nighttime_billing);\n  };\n\n  const money_charged = () => {\n    // Day algor\n    if (currentTime > 600 && accumalatedTime < 1800) {\n      dayTime = parseInt(`${hours}${minutes}`);\n      daytime_billing = hours * hourly_rate;\n      totalbilling = daytime_billing + overlap_billing;\n      setbillings(dayTime, 0, 0, 0);\n      const finding_remaining_hours = 18 - timeDate.getHours();\n\n      if (setLimit / 10 >= day_rate_max && setLimit / 10 <= finding_remaining_hours && accumalatedTime < 1800) {\n        totalCost = totalCost + 100;\n        setBilling(100);\n      } else {\n        setBilling(totalbilling);\n      }\n    } // Night\n\n\n    if (currentTime > 1800 && accumalatedTime < 2359 || currentTime < 600 && accumalatedTime <= 600) {\n      nightTime = parseInt(`${hours}`); // Might need\n\n      night_time_billing = hours * night_hourly_rate;\n      setbillings(0, 0, nightTime, night_time_billing); // setBilling(night_time_billing) \n\n      const finding_remaining_hours = 30 - timeDate.getHours();\n\n      if (setLimit / 10 >= night_rate_max && setLimit / 10 <= finding_remaining_hours && accumalatedTime <= 2359 || accumalatedTime <= 600) {\n        setBilling(100);\n      } else {\n        setBilling(totalbilling);\n      }\n    } // Day to night\n\n\n    if (currentTime <= 1800 && accumalatedTime > 1800) {\n      //current_time >\n      night_overlap_time = accumalatedTime - 1800;\n\n      if (night_overlap_time < 60) {\n        night_overlap_cost = 1 * night_hourly_rate; //.1 is dollar value of 6 dollars per hour\n      } else {\n        night_overlap_cost = night_overlap_time * night_hourly_rate; //.1 is dollar value of 6 dollars per hour\n      } // Math.floor((1800-currentTime) / 100)\n\n\n      daytimeHour = Math.floor((1800 - currentTime) / 100); // selected hours before night time\n\n      reg_day_time_min_algorythm = Math.floor(60 - currentTime % 100);\n\n      if (reg_day_time_min_algorythm == 60) {\n        reg_day_time_min_algorythm = `${0}${0}`;\n      }\n\n      daytimeMin = reg_day_time_min_algorythm; // selected mins before night time\n\n      dayTime = parseInt(`${daytimeHour}${daytimeMin}`);\n      daytime_billing = daytimeHour * hourly_rate;\n\n      if (night_overlap_time > 99) {\n        newNightTIme_hour = Math.floor(night_overlap_time / 100);\n        newNightTIme_min = Math.floor(night_overlap_time % 100);\n        overlap_billing = newNightTIme_hour * night_hourly_rate;\n        night_overlap_time = parseInt(`${newNightTIme_hour}${newNightTIme_min}`);\n      } else {\n        overlap_billing = Math.round((night_overlap_cost + Number.EPSILON) * 100) / 100;\n      }\n\n      if (night_overlap_time < 99 && night_overlap_time > 60) {\n        newNightTIme_hour = Math.floor(night_overlap_time / 60);\n        newNightTIme_min = Math.floor(night_overlap_time % 60);\n        overlap_billing = newNightTIme_hour * night_hourly_rate;\n        night_overlap_time = parseInt(`${newNightTIme_hour}`);\n      }\n\n      if (accumalatedTime > 1800 && night_overlap_time >= night_rate_max) {\n        setBilling(100);\n      } else {\n        // daytime_billing = 1800 - currentTime\n        totalbilling = daytime_billing + overlap_billing; // if the setLimit is greater than 6 and the  \n\n        console.log(accumalatedTime);\n        setDayTime(dayTime);\n        setDayTimeBilling(daytime_billing);\n        setNightTime(night_overlap_time);\n        setNightTimeBilling(overlap_billing);\n      } // if(count_down_hours == 5){ \n      //     console.log(`${count_down_hours}`)\n      //     setBilling(5)\n      //     // setBilling(totalbilling)\n      // }else{\n      //     setBilling(totalbilling)\n      // }\n\n    } //         // NIGHT OVERLAPPING TO DAY \n    //         if(currentTime <= 600 && accumalatedTime > 600){ //current_time >\n    //                 day_overlap_time = accumalatedTime - 600\n    //                 console.log()\n    //                 day_overlap_cost = Math.floor(day_overlap_time * .07) //.07 is dollar value of 4 dollars per hour\n    //                 nighttimeHour = Math.floor((600-currentTime) / 100) // selected hours before night time\n    //                 nighttimeMin = Math.floor(60 - (currentTime % 100))// selected mins before night time\n    //                 nightTime = parseInt(`${nighttimeHour}${nighttimeMin}`)\n    //                 nighttime_billing = nighttimeHour * night_hourly_rate\n    //                 if(day_overlap_time > 99){\n    //                  newDayTime_hour = Math.floor(day_overlap_time / 100)\n    //                  newDayTime_min = Math.floor(day_overlap_time % 100)\n    //                  overlap_billing = Math.round(((newDayTime_hour * 4) + (newDayTime_min * 0.07) + Number.EPSILON) * 100) / 100\n    //                  day_overlap_time = parseInt(`${newDayTime_hour}${newDayTime_min}`)\n    //                }else{\n    //                 overlap_billing = Math.round((day_overlap_cost + Number.EPSILON) * 100) / 100\n    //                }\n    //             }\n    // }\n    //             if(count_down_hours == 5){ \n    //                 console.log(`${count_down_hours}`)\n    //                 setBilling(5)\n    //                 // setBilling(totalbilling)\n    //             }else{\n    //                 setBilling(totalbilling)\n    //             }\n    // setDayTime(day_overlap_time)\n    // setDayTimeBilling(overlap_billing)\n    // setNightTime(nightTime)\n    // setNightTimeBilling(nighttime_billing)\n    // daytime_billing = 1800 - currentTime\n\n  };\n\n  totalbilling = Math.round((nighttime_billing + overlap_billing + Number.EPSILON) * 100) / 100;\n  money_charged();\n};\n\n_s(PaymentGenerator, \"I4fejVgDR9RCjmNne9S9Kn77axg=\");\n\n_c = PaymentGenerator;\nexport default PaymentGenerator; // setDayTime(dayTime)\n// setDayTimeBilling(daytime_billing)\n// setNightTime(night_overlap_time)\n// setNightTimeBilling(night_time_billing)\n// NIGHT GOING INTO DAY BREAK\n// Set Selected time here for tracking and to be pushed to local storage by confirm BTN\n//     setTime(parseInt(`${hours}${minutes}`))\n// }, [hours, minutes])\n//    THEY ARE HERE\n// night_overlap_time = Math.round((night_overlap_cost + Number.EPSILON) * 100) / 100\n// how much day time \n// console.log(`/daytime: ${day_overlap_time}`)\n// //day time cost \n// console.log(`/daytime_billing: ${daytime_billing + overlap_billing}`)\n// //how much night time\n// console.log(`/nighttime: ${night_overlap_time}`)\n// // night time cost \n// console.log(`night Cost: $${overlap_billing}`)\n// STRICTLY DAYTIME\n// // DAYTIME OVERLAPPING TO NIGHT \n// else \n// // STRICTLY NIGHT CALCULATIONS\n// else \n// else \n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentGenerator\");","map":{"version":3,"sources":["/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Components/Financials/Calculator/PaymentGenerator.js"],"names":["useState","useContext","useEffect","PaymentContext","Time","PaymentGenerator","hours","minutes","setNightTime","setNightTimeBilling","setDayTime","setDayTimeBilling","setBilling","setTime","timeDate","Date","night_hourly_rate","night_minute_rate","hourly_rate","minute_rate","currentTime","parseInt","getHours","getMinutes","setLimit","accumalatedTime","minuteCheck","hourCheck","Math","floor","count_down_hours","round","reg_day_time_min_algorythm","currentTime_hr","currentTime_min","night_overlap_time","night_overlap_cost","day_overlap_time","day_overlap_cost","nighttimeHour","nighttimeMin","nighttime_billing","newDayTime_hour","newDayTime_min","newNightTIme_hour","newNightTIme_min","newMinutes","newHours","daytime_billing","overlap_billing","daytimeHour","daytimeMin","dayTime","totalbilling","nightTime","night_time_billing","day_rate_max","night_rate_max","totalCost","check_and_adjust","calculate_money","wheel_scroll","console","log","setbillings","set_day_time","set_night_time","set_daytime_billing","set_nighttime_billing","money_charged","finding_remaining_hours","Number","EPSILON"],"mappings":"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","sourcesContent":["import { useState, useContext } from 'react'\nimport { useEffect } from 'react/cjs/react.development'\nimport { PaymentContext } from '../../../Context/PaymentContext'\nimport Time from '../../Timer/Time'\n\n\n\n\n\n\nconst PaymentGenerator = (hours, minutes) => {\n    const {setNightTime, setNightTimeBilling, setDayTime, setDayTimeBilling, setBilling, setTime,} = useContext(PaymentContext)\n    const timeDate = new Date()\n    const night_hourly_rate = 1.75\n    const night_minute_rate = 0\n    const hourly_rate = 1.75\n    const minute_rate = 0\n    //parseInt(`${timeDate.getHours()}${timeDate.getMinutes()}`)\n    var currentTime = parseInt(`${timeDate.getHours()}${timeDate.getMinutes()}`)\n    var setLimit = parseInt(`${hours}${minutes}`)\n    var accumalatedTime = currentTime + setLimit\n    var minuteCheck = accumalatedTime % 100\n    var hourCheck =  Math.floor(accumalatedTime / 100)\n    var count_down_hours = Math.round((accumalatedTime - currentTime) / 100)\n\n    var reg_day_time_min_algorythm\n    var currentTime_hr\n    var currentTime_min\n    var night_overlap_time\n    var night_overlap_cost\n    var day_overlap_time\n    var day_overlap_cost\n    var nighttimeHour\n    var nighttimeMin\n    var nighttime_billing\n    var newDayTime_hour\n    var newDayTime_min\n    var newNightTIme_hour\n    var newNightTIme_min\n    var newMinutes\n    var newHours\n    var daytime_billing\n    var overlap_billing\n    var daytimeHour\n    var daytimeMin\n    var dayTime\n    var totalbilling\n    var nightTime\n    var night_time_billing\n    var day_rate_max = 3\n    var night_rate_max = 5\n    var totalCost\n\n\n\n\n\nconst check_and_adjust = () => {\n// Accumulated Time Check\nif(hourCheck > 23){\n    hourCheck = hourCheck - 24\n}\nif( minuteCheck >= 60){\n    newMinutes = minuteCheck - 60\n    newHours = Math.floor((hourCheck) + 1)\n    accumalatedTime = parseInt(`${newHours}${newMinutes}`)\nif(newMinutes < 10){\n        accumalatedTime = parseInt(`${newHours}0${newMinutes}`)\n}\nif(newMinutes === 0){\n    accumalatedTime = parseInt(`${newHours}00`)\n}\n}else {\n    accumalatedTime = currentTime + setLimit //Current time + Set Limit time\n\n}\n}\ncheck_and_adjust()\n\n\n\nconst calculate_money = () => { \n    var wheel_scroll = setLimit / 10\n    console.log(setLimit)\n    if(currentTime > 600){ \n        console.log(accumalatedTime)\n        if(accumalatedTime < 1800){ \n            console.log('lesser')\n        } else if(accumalatedTime > 1800){ \n            console.log('lesser')\n        }\n    }\n}\n\nuseEffect(()=>{\ncalculate_money()\n}, [calculate_money])\n\n\nconst setbillings = (set_day_time, set_night_time, set_daytime_billing, set_nighttime_billing) => { \n    setDayTime(set_day_time)\n    setDayTimeBilling(set_daytime_billing)\n    setNightTime(set_night_time)\n    setNightTimeBilling(set_nighttime_billing)\n}\n\n\nconst money_charged = () => { \n    // Day algor\n    if(currentTime > 600 && accumalatedTime < 1800){\n        dayTime = parseInt(`${hours}${minutes}`)\n        daytime_billing = hours * hourly_rate \n        totalbilling = daytime_billing + overlap_billing\n\n        setbillings(dayTime, 0, 0, 0)\n\n        const finding_remaining_hours = 18 - timeDate.getHours()\n        if((setLimit/10) >= day_rate_max && (setLimit/10) <= finding_remaining_hours && accumalatedTime < 1800){ \n            totalCost = totalCost + 100\n            setBilling(100)\n        }\n        else{ \n            setBilling(totalbilling)\n        }\n    }\n\n        // Night\n    if(currentTime > 1800 && accumalatedTime < 2359 || currentTime < 600 && accumalatedTime <= 600 ){\n            nightTime = parseInt(`${hours}`) // Might need\n            night_time_billing = hours * night_hourly_rate\n            setbillings(0, 0, nightTime, night_time_billing)\n            // setBilling(night_time_billing) \n            const finding_remaining_hours = 30 - timeDate.getHours()\n            if((setLimit/10) >= night_rate_max && (setLimit/10) <= finding_remaining_hours && accumalatedTime <= 2359 || accumalatedTime <= 600){ \n                setBilling(100)\n            }\n            else{ \n                setBilling(totalbilling)\n            }\n    } \n\n\n\n\n\n    // Day to night\n    if(currentTime <= 1800 && accumalatedTime > 1800){ //current_time >\n        night_overlap_time = accumalatedTime - 1800\n\n        if(night_overlap_time < 60){ \n            night_overlap_cost = 1 * night_hourly_rate //.1 is dollar value of 6 dollars per hour\n        } \n        else{\n            night_overlap_cost = night_overlap_time * night_hourly_rate //.1 is dollar value of 6 dollars per hour\n        }\n    \n        // Math.floor((1800-currentTime) / 100)\n        daytimeHour = Math.floor((1800 - currentTime) / 100)// selected hours before night time\n        reg_day_time_min_algorythm = Math.floor(60 - (currentTime % 100))\n        if(reg_day_time_min_algorythm == 60){\n            reg_day_time_min_algorythm = `${0}${0}`\n        }\n        daytimeMin = reg_day_time_min_algorythm // selected mins before night time\n        dayTime = parseInt(`${daytimeHour}${daytimeMin}`)\n        daytime_billing = daytimeHour * hourly_rate\n    \n\n        if(night_overlap_time > 99){\n         newNightTIme_hour = Math.floor(night_overlap_time / 100)\n         newNightTIme_min = Math.floor(night_overlap_time % 100)\n         overlap_billing = (newNightTIme_hour * night_hourly_rate)\n         night_overlap_time = parseInt(`${newNightTIme_hour}${newNightTIme_min}`)\n       }else{\n        overlap_billing = Math.round((night_overlap_cost + Number.EPSILON) * 100) / 100\n        }\n       if(night_overlap_time < 99 && night_overlap_time > 60 ){\n        newNightTIme_hour = Math.floor(night_overlap_time / 60)\n        newNightTIme_min = Math.floor(night_overlap_time % 60)\n        overlap_billing = (newNightTIme_hour * night_hourly_rate)\n        night_overlap_time = parseInt(`${newNightTIme_hour}`)\n       }\n      \n        if(accumalatedTime > 1800 && night_overlap_time >= night_rate_max){ \n            setBilling(100)\n        }\n        else{ \n        // daytime_billing = 1800 - currentTime\n        totalbilling = daytime_billing + overlap_billing\n        // if the setLimit is greater than 6 and the  \n        console.log(accumalatedTime)\n        setDayTime(dayTime)\n        setDayTimeBilling(daytime_billing)\n        setNightTime(night_overlap_time)\n        setNightTimeBilling(overlap_billing)\n        }\n\n\n\n\n        // if(count_down_hours == 5){ \n        //     console.log(`${count_down_hours}`)\n        //     setBilling(5)\n        //     // setBilling(totalbilling)\n        // }else{\n        //     setBilling(totalbilling)\n        // }\n    }\n\n\n\n\n\n\n\n\n\n        \n//         // NIGHT OVERLAPPING TO DAY \n//         if(currentTime <= 600 && accumalatedTime > 600){ //current_time >\n        \n//                 day_overlap_time = accumalatedTime - 600\n//                 console.log()\n//                 day_overlap_cost = Math.floor(day_overlap_time * .07) //.07 is dollar value of 4 dollars per hour\n    \n//                 nighttimeHour = Math.floor((600-currentTime) / 100) // selected hours before night time\n//                 nighttimeMin = Math.floor(60 - (currentTime % 100))// selected mins before night time\n//                 nightTime = parseInt(`${nighttimeHour}${nighttimeMin}`)\n//                 nighttime_billing = nighttimeHour * night_hourly_rate\n              \n    \n//                 if(day_overlap_time > 99){\n//                  newDayTime_hour = Math.floor(day_overlap_time / 100)\n//                  newDayTime_min = Math.floor(day_overlap_time % 100)\n//                  overlap_billing = Math.round(((newDayTime_hour * 4) + (newDayTime_min * 0.07) + Number.EPSILON) * 100) / 100\n//                  day_overlap_time = parseInt(`${newDayTime_hour}${newDayTime_min}`)\n//                }else{\n//                 overlap_billing = Math.round((day_overlap_cost + Number.EPSILON) * 100) / 100\n//                }\n\n//             }\n// }\n\n\n\n//             if(count_down_hours == 5){ \n//                 console.log(`${count_down_hours}`)\n//                 setBilling(5)\n//                 // setBilling(totalbilling)\n//             }else{\n//                 setBilling(totalbilling)\n//             }\n\n\n            // setDayTime(day_overlap_time)\n            // setDayTimeBilling(overlap_billing)\n            // setNightTime(nightTime)\n            // setNightTimeBilling(nighttime_billing)\n           \n            // daytime_billing = 1800 - currentTime\n        }\n            totalbilling = Math.round((nighttime_billing + overlap_billing + Number.EPSILON) * 100) / 100\n\n      \n                money_charged()\n          \n        }\n\n\n\n\n\nexport default PaymentGenerator;\n\n// setDayTime(dayTime)\n// setDayTimeBilling(daytime_billing)\n// setNightTime(night_overlap_time)\n// setNightTimeBilling(night_time_billing)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        // NIGHT GOING INTO DAY BREAK\n\n        // Set Selected time here for tracking and to be pushed to local storage by confirm BTN\n    //     setTime(parseInt(`${hours}${minutes}`))\n    // }, [hours, minutes])\n \n        //    THEY ARE HERE\n            // night_overlap_time = Math.round((night_overlap_cost + Number.EPSILON) * 100) / 100\n            // how much day time \n            // console.log(`/daytime: ${day_overlap_time}`)\n            // //day time cost \n            // console.log(`/daytime_billing: ${daytime_billing + overlap_billing}`)\n            // //how much night time\n            // console.log(`/nighttime: ${night_overlap_time}`)\n            // // night time cost \n            // console.log(`night Cost: $${overlap_billing}`)\n\n\n\n\n\n\n\n\n\n\n\n\n        // STRICTLY DAYTIME\n      \n\n\n        // // DAYTIME OVERLAPPING TO NIGHT \n        // else \n        \n        // // STRICTLY NIGHT CALCULATIONS\n        // else \n        // else \n           \n\n            \n\n            \n"]},"metadata":{},"sourceType":"module"}