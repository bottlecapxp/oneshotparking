{"ast":null,"code":"import React, { Component } from 'react';\nimport PaymentGenerator from '../Financials/Calculator/PaymentGenerator ';\n\nclass TimerLogic extends Component {\n  constructor(props) {\n    super(props);\n    this.pGenerator = new PaymentGenerator();\n\n    this.setValue = valFunc => {\n      this.value = valFunc;\n    };\n\n    this.stepValue = v => {\n      if (v > 1) {\n        return 1;\n      } else {\n        return Math.round(v * 20) / 20;\n      }\n    };\n\n    this.scrollTime = stepVal => {\n      var givenValue = Math.round(stepVal * 100);\n      var minutes = Math.round(300 * givenValue / 100); //300 is max for 5 hours\n      // get hours\n\n      if (minutes > 60) {\n        this.hours = Math.floor(minutes / 60);\n      } else if (minutes / 60 === 1) {\n        this.hours = 1;\n      } else {\n        this.hours = 0;\n      } // First Check if you're at a full hour\n\n\n      if (minutes === 60 || minutes / 60 === this.hours) {\n        this.stagedMinutes = '00';\n      } // Else run algorithm\n      else {\n          this.stagedMinutes = minutes % 60 % 100;\n        }\n\n      this.pGenerator(this.hours, this.stagedMinutes);\n      return `0${this.hours} : ${this.stagedMinutes}`;\n    };\n\n    this.state = {\n      hours: 0,\n      stagedMinutes: 0,\n      value: 0.0\n    };\n  } // btnClick_AddTime = (timeIncrement) =>{\n  // switch (timeIncrement) {\n  //     case timeIncrement === 30:\n  //         this.stagedMinutes = this.stagedMinutes + timeIncrement\n  //         this.value = 0.06\n  //         break;\n  //     case timeIncrement === 1:\n  //         this.hours = this.hours + timeIncrement\n  //         this.value = 0.13\n  //         break;\n  //     default:\n  //         break;\n  // }\n  // }\n\n\n}\n\nexport default TimerLogic;","map":{"version":3,"sources":["/Users/bottlecapmedia/Desktop/OneShot Parking/src/Components/Timer/TimerLogic.js"],"names":["React","Component","PaymentGenerator","TimerLogic","constructor","props","pGenerator","setValue","valFunc","value","stepValue","v","Math","round","scrollTime","stepVal","givenValue","minutes","hours","floor","stagedMinutes","state"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,gBAAP,MAA6B,4CAA7B;;AAEA,MAAMC,UAAN,SAAyBF,SAAzB,CAAmC;AAC/BG,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AADc,SAQtBC,UARsB,GAQT,IAAIJ,gBAAJ,EARS;;AAAA,SAUtBK,QAVsB,GAUXC,OAAO,IAAG;AACrB,WAAKC,KAAL,GAAaD,OAAb;AACC,KAZqB;;AAAA,SActBE,SAdsB,GAcVC,CAAC,IAAG;AACZ,UAAGA,CAAC,GAAG,CAAP,EAAS;AACL,eAAO,CAAP;AACH,OAFD,MAEK;AACD,eAAOC,IAAI,CAACC,KAAL,CAAWF,CAAC,GAAG,EAAf,IAAqB,EAA5B;AACH;AACJ,KApBqB;;AAAA,SAuBtBG,UAvBsB,GAuBTC,OAAO,IAAI;AAChB,UAAIC,UAAU,GAAGJ,IAAI,CAACC,KAAL,CAAWE,OAAO,GAAC,GAAnB,CAAjB;AACA,UAAIE,OAAO,GAAIL,IAAI,CAACC,KAAL,CAAW,MAAMG,UAAN,GAAmB,GAA9B,CAAf,CAFgB,CAEkC;AAElD;;AACA,UAAIC,OAAO,GAAG,EAAd,EAAiB;AACb,aAAKC,KAAL,GAAaN,IAAI,CAACO,KAAL,CAAWF,OAAO,GAAG,EAArB,CAAb;AACH,OAFD,MAEO,IAAGA,OAAO,GAAG,EAAV,KAAiB,CAApB,EAAsB;AACzB,aAAKC,KAAL,GAAa,CAAb;AACH,OAFM,MAEF;AACD,aAAKA,KAAL,GAAa,CAAb;AACH,OAXe,CAYhB;;;AACA,UAAGD,OAAO,KAAK,EAAZ,IAAmBA,OAAO,GAAG,EAAX,KAAmB,KAAKC,KAA7C,EAAmD;AAC/C,aAAKE,aAAL,GAAqB,IAArB;AACH,OAFD,CAGA;AAHA,WAII;AACH,eAAKA,aAAL,GAAsBH,OAAO,GAAG,EAAV,GAAe,GAArC;AACA;;AACD,WAAKX,UAAL,CAAgB,KAAKY,KAArB,EAA4B,KAAKE,aAAjC;AACA,aACK,IAAG,KAAKF,KAAM,MAAK,KAAKE,aAAc,EAD3C;AAIP,KAhDqB;;AAEd,SAAKC,KAAL,GAAa;AACTH,MAAAA,KAAK,EAAE,CADE;AAETE,MAAAA,aAAa,EAAE,CAFN;AAGTX,MAAAA,KAAK,EAAE;AAHE,KAAb;AAKH,GAR8B,CAoDnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAjEmC;;AAsEnC,eAAeN,UAAf","sourcesContent":["import React, { Component } from 'react'\nimport PaymentGenerator from '../Financials/Calculator/PaymentGenerator '\n\nclass TimerLogic extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            hours: 0,\n            stagedMinutes: 0,\n            value: 0.0\n        }\n    }\npGenerator = new PaymentGenerator()\n\nsetValue = valFunc =>{\nthis.value = valFunc\n}\n\nstepValue = v =>{\n    if(v > 1){\n        return 1\n    }else{\n        return Math.round(v * 20) / 20\n    }\n}\n\n\nscrollTime = stepVal => {\n        var givenValue = Math.round(stepVal*100)\n        var minutes =  Math.round(300 * givenValue / 100) //300 is max for 5 hours\n\n        // get hours\n        if (minutes > 60){\n            this.hours = Math.floor(minutes / 60)\n        } else if(minutes / 60 === 1){\n            this.hours = 1\n        }else{\n            this.hours = 0\n        }\n        // First Check if you're at a full hour\n        if(minutes === 60 || (minutes / 60) === this.hours){\n            this.stagedMinutes = '00'\n        }\n        // Else run algorithm\n        else{\n         this.stagedMinutes = (minutes % 60 % 100)\n        }\n        this.pGenerator(this.hours, this.stagedMinutes)\n        return(\n            `0${this.hours} : ${this.stagedMinutes}`\n        )\n\n}\n\n\n// btnClick_AddTime = (timeIncrement) =>{\n// switch (timeIncrement) {\n//     case timeIncrement === 30:\n//         this.stagedMinutes = this.stagedMinutes + timeIncrement\n//         this.value = 0.06\n//         break;\n//     case timeIncrement === 1:\n//         this.hours = this.hours + timeIncrement\n//         this.value = 0.13\n//         break;\n//     default:\n//         break;\n// }\n// }\n\n\n}\n\nexport default TimerLogic"]},"metadata":{},"sourceType":"module"}