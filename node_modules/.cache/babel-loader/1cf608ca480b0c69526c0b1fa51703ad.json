{"ast":null,"code":"var _jsxFileName = \"/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Pages/SetTime.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport { PaymentContext } from '../Context/PaymentContext';\nimport \"../Pages/pages.css\";\nimport CircleTxtBtns from \"../Components/Buttons/CircleBtns_txt/CircleTxtBtns\";\nimport CircleBtnsImg from \"../Components/Buttons/CircleBtn_img/CircleBtnsImg\";\nimport Timer from \"../Components/Timer/Timer\";\nimport Time from \"../Components/Timer/Time\";\nimport MaxCondition from '../Components/max_selection/MaxSelection';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SetTime = props => {\n  _s();\n\n  const {\n    darkMode\n  } = useContext(PaymentContext);\n  const [darkModeStyle, setDarkModeStyle] = useState({\n    globalContainer: 'global_container'\n  });\n  const [lot, setLot] = useState(0);\n  const [btnClickUpdate, setBtnClickUpdate] = useState(0.0);\n  const [val, setVal] = useState(0.0);\n  const mxCond = new MaxCondition();\n  const date = new Date();\n  var max_num = date.getHours();\n  const time = new Time();\n  var button_hours, button_meridian; // Time update nested func for button onClick()\n\n  const timeUpdate = val => {\n    var nValue = parseFloat(val);\n    setVal(nValue); // check for match\n\n    if (val == btnClickUpdate) {\n      reset();\n    } else setBtnClickUpdate(nValue);\n  };\n\n  useEffect(() => {\n    button_hours = localStorage.getItem('_time_btn_hr');\n    button_meridian = localStorage.getItem('_time_mdn_time');\n    localStorage.setItem('max', 0);\n\n    if (localStorage.getItem('lot') === null) {\n      // localStorage.setItem('lot', 4001)\n      localStorage.setItem('lot', props.match.params.lot);\n    } else if (localStorage.getItem('lot') != null) {\n      localStorage.removeItem('lot');\n      setTimeout(() => {\n        localStorage.setItem('lot', props.match.params.lot);\n      }, 10);\n    }\n\n    setLot(props.match.params.lot);\n\n    if (darkMode >= 1800 || darkMode <= 600) {\n      setDarkModeStyle({\n        globalContainer: 'global_container_dark'\n      });\n    }\n\n    if (btnClickUpdate == 0) {\n      setBtnClickUpdate(val);\n    }\n  }, [btnClickUpdate]);\n\n  const reset = () => {\n    setBtnClickUpdate(0.0);\n  };\n\n  const set_max_skip = time.button_max_calculation(button_hours, button_meridian);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${darkModeStyle.globalContainer} choose_lot`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"content_holder\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer_holder\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lot-info\",\n          children: /*#__PURE__*/_jsxDEV(\"h5\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"LOT NUMBER:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 11\n            }, this), \" \", lot]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Timer, {\n          addTime: btnClickUpdate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"align_timer_btns\",\n        children: [/*#__PURE__*/_jsxDEV(CircleTxtBtns, {\n          addTime: timeUpdate,\n          title: \"-1 Hr\",\n          time: \"-0.0417\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(CircleTxtBtns, {\n          addTime: timeUpdate,\n          title: \"Max\",\n          time: set_max_skip\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(CircleTxtBtns, {\n          addTime: timeUpdate,\n          title: \"+1 Hr\",\n          time: \"0.0417\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"align_timer_btns btns_img_container\",\n        children: /*#__PURE__*/_jsxDEV(CircleBtnsImg, {\n          title: \"Confirm\",\n          img: \"\",\n          class: \"plateCapture\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 3\n  }, this);\n};\n\n_s(SetTime, \"1FbjUFmLiGLWbV20k3/SlFAPrAc=\");\n\n_c = SetTime;\nexport default SetTime; //  else if(newCheck == false) {\n// \t\t\tswitch (hour) {\n// \t\t\t\tcase (hour < 18 && hour > 6 ? hour : ''):\n// \t\t\t\t\tconst remaining_time = 18 - hour\n// \t\t\t\t\tmax_num = parseFloat(`0.0${remaining_time}`)\n// \t\t\t\t\tlocalStorage.setItem('max', 1)\n// \t\t\t\t\t// console.log(`rem_hr ${remaining_time}`)\n// \t\t\t\t\tbreak;\n// \t\t\t\tcase (hour >= 18 && hour < 24 ? hour : ''):\n// \t\t\t\t\tconst rem_time = (24 - hour) + 6\n// \t\t\t\t\tmax_num = (rem_time > 9 ? max_num = parseFloat(`0.${rem_time}`) : parseFloat(`0.0${rem_time}`))\n// \t\t\t\t\tlocalStorage.setItem('max', 1)\n// \t\t\t\t\tbreak;\n// \t\t\t\tcase (hour < 6 ? hour : ''):\n// \t\t\t\t\tconst rem_hr = 6 - hour\n// \t\t\t\t\tmax_num = `0.0${rem_hr}`\n// \t\t\t\t\tlocalStorage.setItem('max', 1)\n// \t\t\t\t\tbreak;\n// \t\t\t\tdefault: \n// \t\t\t\t\tmax_num = '0.12'\n// \t\t\t\t\tbreak;\n// \t\t\t}\n// \t\t}\n\nvar _c;\n\n$RefreshReg$(_c, \"SetTime\");","map":{"version":3,"sources":["/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Pages/SetTime.js"],"names":["React","useContext","useEffect","useState","PaymentContext","CircleTxtBtns","CircleBtnsImg","Timer","Time","MaxCondition","SetTime","props","darkMode","darkModeStyle","setDarkModeStyle","globalContainer","lot","setLot","btnClickUpdate","setBtnClickUpdate","val","setVal","mxCond","date","Date","max_num","getHours","time","button_hours","button_meridian","timeUpdate","nValue","parseFloat","reset","localStorage","getItem","setItem","match","params","removeItem","setTimeout","set_max_skip","button_max_calculation"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react'\nimport { PaymentContext } from '../Context/PaymentContext'\nimport \"../Pages/pages.css\";\nimport CircleTxtBtns from \"../Components/Buttons/CircleBtns_txt/CircleTxtBtns\";\nimport CircleBtnsImg from \"../Components/Buttons/CircleBtn_img/CircleBtnsImg\";\nimport Timer from \"../Components/Timer/Timer\";\nimport Time from \"../Components/Timer/Time\";\nimport MaxCondition from '../Components/max_selection/MaxSelection'\n\n\nconst SetTime = (props) => {\n\tconst { darkMode } = useContext(PaymentContext)\n\tconst [darkModeStyle, setDarkModeStyle] = useState({ globalContainer: 'global_container' })\n\tconst [lot, setLot] = useState(0)\n\tconst [btnClickUpdate, setBtnClickUpdate] = useState(0.0)\n\tconst [val, setVal] = useState(0.0)\n\tconst mxCond = new MaxCondition()\n\tconst date = new Date()\n\tvar max_num = date.getHours()\n\tconst time = new Time()\n\tvar button_hours, button_meridian\n\t// Time update nested func for button onClick()\n\tconst timeUpdate = (val) => {\n\t\tvar nValue = parseFloat(val)\n\t\tsetVal(nValue)\n\t\t// check for match\n\t\tif (val == btnClickUpdate) {\n\t\t\treset()\n\t\t}\n\t\telse (\n\t\t\tsetBtnClickUpdate(nValue)\n\t\t)\n\t}\n\n\tuseEffect(() => {\n\t\tbutton_hours = localStorage.getItem('_time_btn_hr')\n\t\tbutton_meridian = localStorage.getItem('_time_mdn_time')\n\n\n\t\tlocalStorage.setItem('max', 0)\n\t\tif (localStorage.getItem('lot') === null) {\n\t\t\t// localStorage.setItem('lot', 4001)\n\t\t\tlocalStorage.setItem('lot', props.match.params.lot)\n\t\t}\n\t\telse if (localStorage.getItem('lot') != null) {\n\t\t\tlocalStorage.removeItem('lot')\n\t\t\tsetTimeout(() => {\n\t\t\t\tlocalStorage.setItem('lot', props.match.params.lot)\n\t\t\t}, 10)\n\t\t}\n\t\tsetLot(props.match.params.lot)\n\t\tif (darkMode >= 1800 || darkMode <= 600) {\n\t\t\tsetDarkModeStyle({\n\t\t\t\tglobalContainer: 'global_container_dark',\n\t\t\t})\n\t\t}\n\n\t\tif (btnClickUpdate == 0) {\n\t\t\tsetBtnClickUpdate(val)\n\t\t}\n\t}, [btnClickUpdate])\n\n\n\tconst reset = () => {\n\t\tsetBtnClickUpdate(0.0)\n\t}\n\n\n\n\n\n\n\n\n\n\tconst set_max_skip = time.button_max_calculation(button_hours, button_meridian)\n\n\treturn (\n\t\t<div className={`${darkModeStyle.globalContainer} choose_lot`}>\n\n\t\t\t<div id='content_holder'>\n\t\t\t\t<div className='timer_holder'>\n\t\t\t\t\t<div className='lot-info'>\n\t\t\t\t\t\t<h5><strong>LOT NUMBER:</strong> {lot}</h5>\n\t\t\t\t\t</div>\n\t\t\t\t\t<Timer addTime={btnClickUpdate} />\n\t\t\t\t</div>\n\t\t\t\t<div className='align_timer_btns'>\n\t\t\t\t\t<CircleTxtBtns addTime={timeUpdate} title='-1 Hr' time='-0.0417' />\n\t\t\t\t\t<CircleTxtBtns addTime={timeUpdate} title='Max' time={set_max_skip} />\n\t\t\t\t\t<CircleTxtBtns addTime={timeUpdate} title='+1 Hr' time='0.0417' />\n\t\t\t\t</div>\n\n\t\t\t\t<div className='align_timer_btns btns_img_container'>\n\t\t\t\t\t{/* <CircleBtnsImg title='' img='' /> */}\n\t\t\t\t\t<CircleBtnsImg title='Confirm' img='' class='plateCapture' />\n\t\t\t\t\t{/* <CircleBtnsImg title='' img='' /> */}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default SetTime;\n//  else if(newCheck == false) {\n// \t\t\tswitch (hour) {\n// \t\t\t\tcase (hour < 18 && hour > 6 ? hour : ''):\n// \t\t\t\t\tconst remaining_time = 18 - hour\n// \t\t\t\t\tmax_num = parseFloat(`0.0${remaining_time}`)\n// \t\t\t\t\tlocalStorage.setItem('max', 1)\n// \t\t\t\t\t// console.log(`rem_hr ${remaining_time}`)\n// \t\t\t\t\tbreak;\n// \t\t\t\tcase (hour >= 18 && hour < 24 ? hour : ''):\n// \t\t\t\t\tconst rem_time = (24 - hour) + 6\n// \t\t\t\t\tmax_num = (rem_time > 9 ? max_num = parseFloat(`0.${rem_time}`) : parseFloat(`0.0${rem_time}`))\n// \t\t\t\t\tlocalStorage.setItem('max', 1)\n// \t\t\t\t\tbreak;\n// \t\t\t\tcase (hour < 6 ? hour : ''):\n// \t\t\t\t\tconst rem_hr = 6 - hour\n// \t\t\t\t\tmax_num = `0.0${rem_hr}`\n// \t\t\t\t\tlocalStorage.setItem('max', 1)\n// \t\t\t\t\tbreak;\n// \t\t\t\tdefault: \n// \t\t\t\t\tmax_num = '0.12'\n// \t\t\t\t\tbreak;\n// \t\t\t}\n// \t\t}"]},"metadata":{},"sourceType":"module"}