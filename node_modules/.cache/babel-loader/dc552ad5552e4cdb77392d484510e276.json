{"ast":null,"code":"var _jsxFileName = \"/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Components/Buttons/CircleBtns_txt/CircleTxtBtns.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport '../CircleBtns_txt/CircleBtnstxt.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CircleTxtBtns = ({\n  title,\n  time,\n  addTime\n}) => {\n  _s();\n\n  // const {darkMode} = useContext(PaymentContext)\n  const darkMode = 1800;\n  const [darkModeStyle, setDarkModeStyle] = useState({\n    buttonStyles: 'global_circle_btns',\n    title: 'title'\n  }); // instiate hours for all day calc\n\n  const dateTime = new Date();\n  const hour = dateTime.getHours();\n  const mins = dateTime.getMinutes();\n  useEffect(() => {\n    if (darkMode >= 1800 || darkMode <= 600) {\n      setDarkModeStyle({\n        buttonStyles: 'global_circle_btns_dark',\n        title: 'title_dark'\n      });\n    }\n\n    if (darkMode < 1800 || darkMode > 600) {\n      setDarkModeStyle({\n        buttonStyles: 'global_circle_btns',\n        title: 'title'\n      });\n    } // Case all day? set Conditions 18 refs 6pm & 6 ref 6am\n\n\n    if (time == 0) {\n      // console.log(64800 / 3600)\n      const limit = 64800;\n\n      switch (hour) {\n        case hour < 18 && hour > 6 ? hour : '':\n          const current_time_in_secs = hour * 3600 + mins * 60;\n          const setHours = Math.floor((limit - current_time_in_secs) / 3600);\n          const setMins = Math.floor((limit - current_time_in_secs) % 60);\n          console.log((limit - current_time_in_secs) / 3600);\n          const remaining_time_in_secs = limit - current_time_in_secs;\n          const calc_day_time = remaining_time_in_secs / 3600;\n          setTimer({ ...timer,\n            setTime: parseFloat(`0.0${calc_day_time}`)\n          });\n          break;\n        // case (hour > 18 && hour < 24?hour: ''): \n        // const calc_late_night = (24 - hour) + 6\n        // setTimer({...timer, setTime: parseFloat(`0.0${calc_late_night}`) })\n        // break;\n        // case (hour < 6?hour: ''): \n        // const calc_early_morning = 6 - hour\n        // setTimer({...timer, setTime: parseFloat(`0.0${calc_early_morning}`) })\n        // break;\n      }\n    }\n  }, []);\n  const [timer, setTimer] = useState({\n    title: title,\n    setTime: parseFloat(time)\n  });\n\n  const incrementTime = () => {\n    console.log(timer.setTime);\n    addTime(timer.setTime);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${darkModeStyle.buttonStyles} content-align`,\n    onClick: incrementTime,\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      className: darkModeStyle.title,\n      children: timer.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CircleTxtBtns, \"pVAD3ZtklRR/KAuJwZHmR5G2CII=\");\n\n_c = CircleTxtBtns;\nexport default CircleTxtBtns;\n\nvar _c;\n\n$RefreshReg$(_c, \"CircleTxtBtns\");","map":{"version":3,"sources":["/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Components/Buttons/CircleBtns_txt/CircleTxtBtns.js"],"names":["React","useEffect","useState","CircleTxtBtns","title","time","addTime","darkMode","darkModeStyle","setDarkModeStyle","buttonStyles","dateTime","Date","hour","getHours","mins","getMinutes","limit","current_time_in_secs","setHours","Math","floor","setMins","console","log","remaining_time_in_secs","calc_day_time","setTimer","timer","setTime","parseFloat","incrementTime"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport '../CircleBtns_txt/CircleBtnstxt.css'\n\nconst CircleTxtBtns = ({title, time, addTime}) => {\n        // const {darkMode} = useContext(PaymentContext)\n        const darkMode = 1800\n        const [darkModeStyle, setDarkModeStyle] = useState({\n            buttonStyles: 'global_circle_btns',\n            title: 'title'\n        })\n        // instiate hours for all day calc\n        const dateTime = new Date()\n        const hour = dateTime.getHours()\n        const mins = dateTime.getMinutes()\n    \n    useEffect(()=>{\n        if(darkMode >= 1800 || darkMode <= 600){\n            setDarkModeStyle({\n                buttonStyles: 'global_circle_btns_dark', \n                title: 'title_dark'\n            })\n        }\n        if(darkMode < 1800 || darkMode > 600){\n            setDarkModeStyle({\n                buttonStyles: 'global_circle_btns', \n                title: 'title'\n            })\n        }\n        // Case all day? set Conditions 18 refs 6pm & 6 ref 6am\n        if(time == 0){\n            // console.log(64800 / 3600)\n            const limit = 64800\n            switch(hour){ \n                case (hour < 18 && hour > 6?hour:''):\n                const current_time_in_secs = (hour * 3600)+(mins * 60)\n                const setHours = (Math.floor((limit - current_time_in_secs) / 3600))\n                const setMins = (Math.floor((limit - current_time_in_secs) % 60))\n                console.log((limit - current_time_in_secs) / 3600)\n                const remaining_time_in_secs = limit - current_time_in_secs\n\n                const calc_day_time = remaining_time_in_secs / 3600\n                setTimer({...timer, setTime: parseFloat(`0.0${calc_day_time}`) })\n                break;\n                // case (hour > 18 && hour < 24?hour: ''): \n                // const calc_late_night = (24 - hour) + 6\n                // setTimer({...timer, setTime: parseFloat(`0.0${calc_late_night}`) })\n                // break;\n                // case (hour < 6?hour: ''): \n                // const calc_early_morning = 6 - hour\n                // setTimer({...timer, setTime: parseFloat(`0.0${calc_early_morning}`) })\n                // break;\n            }\n        } \n    }, [])\n\n\n    const [timer, setTimer] = useState({\n        title: title,\n        setTime: parseFloat(time)\n    })\n\n   \n\n\n\n\n\n\n\n    const incrementTime = () =>{\n\n    console.log(timer.setTime)\n     addTime(timer.setTime)\n    }\n    return (\n        <div className={`${darkModeStyle.buttonStyles} content-align`} onClick={incrementTime}>\n            <span className={darkModeStyle.title}>{timer.title}</span>\n        </div>\n    )\n}\n\nexport default CircleTxtBtns;"]},"metadata":{},"sourceType":"module"}