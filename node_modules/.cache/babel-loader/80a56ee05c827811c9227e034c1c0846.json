{"ast":null,"code":"// import { useStripe } from '@stripe/react-stripe-js'\nimport{useContext}from'react';import{PaymentContext}from'../../../Context/PaymentContext';import MaxSelection from'../../max_selection/MaxSelection';import Util from'./../../Utilities/Utilities';import GeneratePrice from'./GeneratePrice';var PaymentGenerator=function PaymentGenerator(hours,minutes,trigger){console.log(\"hours - \".concat(hours,\" mins - \").concat(minutes));var _useContext=useContext(PaymentContext),setNightTime=_useContext.setNightTime,setNightTimeBilling=_useContext.setNightTimeBilling,setDayTime=_useContext.setDayTime,setDayTimeBilling=_useContext.setDayTimeBilling,setBilling=_useContext.setBilling,setTime=_useContext.setTime;var timeDate=new Date();var night_hourly_rate=.20;var hourly_rate=.10;var day_max_limit=2;var night_max_limit=3;var day_max_rate=.20;var night_max_rate=.60;var genPrice=new GeneratePrice();var util=new Util();var maxLimit_overflow;var day_minute_rate=hourly_rate/60;var night_minute_rate=night_hourly_rate/60;var check_expired_hour=localStorage.getItem('_time_btn_hr');//parseInt(`${timeDate.getHours()}${timeDate.getMinutes()}`)\nvar currentTime=parseInt(\"\".concat(timeDate.getHours()).concat(timeDate.getMinutes()<10?\"0\".concat(timeDate.getMinutes()):timeDate.getMinutes()));var setLimit=parseInt(\"\".concat(hours).concat(minutes,\"0\"));var accumalatedTime=currentTime+setLimit;var minuteCheck=accumalatedTime%100;var hourCheck=Math.floor(accumalatedTime/100);var newMinutes,newHours,dayTime,nightTime,extraTime,sumTotal;var check_and_adjust=function check_and_adjust(){// Accumulated Time Check\nif(hourCheck>23){hourCheck=hourCheck-24;}if(minuteCheck>=60){newMinutes=minuteCheck-60;newHours=Math.floor(hourCheck+1);accumalatedTime=parseInt(\"\".concat(newHours).concat(newMinutes));if(newMinutes<10){accumalatedTime=parseInt(\"\".concat(newHours,\"0\").concat(newMinutes));}if(newMinutes===0){accumalatedTime=parseInt(\"\".concat(newHours,\"00\"));}}else{accumalatedTime=currentTime+setLimit;//Current time + Set Limit time\n}};check_and_adjust();var setbillings=function setbillings(set_day_time,set_daytime_billing,set_night_time,set_nighttime_billing,total_billing){setDayTime(set_day_time);setDayTimeBilling(set_daytime_billing);setNightTime(set_night_time);setNightTimeBilling(set_nighttime_billing);setBilling(total_billing);};var max_calculations=function max_calculations(){var timeSlot_bool=null;if(minutes>0){var maxBtn_timeSkip=parseInt(\"\".concat(hours).concat(minutes));var currentMinuteCheck=currentTime%100;var sumTime=currentTime+maxBtn_timeSkip;if(currentMinuteCheck+minutes==60){sumTime=sumTime+40;}// Check parameters timeSlot of current time => (True = Night \\ False = Day)\ncurrentTime>1800||currentTime<600?timeSlot_bool=true:timeSlot_bool=false;var max_cost_calc=0;var max_limits=[1800,3000,4200,5400,600];//day // night // day\nif(timeSlot_bool==false&&sumTime==max_limits[0]){var dayTimes=util.round(max_limits[0],currentTime,100);console.log(dayTimes);var dayPrice=genPrice.max_calculate_daytime_payments(dayTimes,hourly_rate,day_max_limit,day_max_rate);console.log('max Trigger - '+dayPrice);setbillings(dayTime,dayPrice,0,0,dayPrice);}if(timeSlot_bool==false&&sumTime==max_limits[1]){dayTime=util.round(max_limits[0],currentTime,100);nightTime=util.round(sumTime,max_limits[0],100);var _dayPrice=genPrice.max_calculate_daytime_payments(dayTime,hourly_rate,day_max_limit,day_max_rate);var nightPrice=genPrice.max_calculate_nighttime_payments(nightTime,night_hourly_rate,night_max_limit,night_max_rate);sumTotal=nightPrice+_dayPrice;setbillings(dayTime,_dayPrice,nightTime,nightPrice,sumTotal);}if(timeSlot_bool==false&&sumTime==max_limits[2]){dayTime=util.round(max_limits[0],currentTime,100);nightTime=util.round(max_limits[1],max_limits[0],100);extraTime=util.round(sumTime,max_limits[1],100);var _dayPrice2=genPrice.max_calculate_daytime_payments(dayTime,hourly_rate,day_max_limit,day_max_rate);var _nightPrice=genPrice.max_calculate_nighttime_payments(nightTime,night_hourly_rate,night_max_limit,night_max_rate);var extraPrice=genPrice.max_calculate_extratime_payments(extraTime,night_hourly_rate,night_max_limit,night_max_rate);sumTotal=_nightPrice+_dayPrice2+extraPrice;setbillings(dayTime,_dayPrice2,nightTime,_nightPrice,sumTotal);}// Night\nif(timeSlot_bool==true&&sumTime==max_limits[1]){//3000\nnightTime=util.round(max_limits[1],currentTime,100);var _nightPrice2=genPrice.max_calculate_daytime_payments(nightTime,night_hourly_rate,night_max_limit,night_max_rate);console.log('max Trigger - '+_nightPrice2);setbillings(nightTime,_nightPrice2,0,0,_nightPrice2);}if(timeSlot_bool==true&&sumTime==max_limits[2]){// 4200\nnightTime=util.round(max_limits[1],currentTime,100);dayTime=util.round(max_limits[2],max_limits[1],100);var _dayPrice3=genPrice.max_calculate_daytime_payments(dayTime,hourly_rate,day_max_limit,day_max_rate);var _nightPrice3=genPrice.max_calculate_nighttime_payments(nightTime,night_hourly_rate,night_max_limit,night_max_rate);sumTotal=_nightPrice3+_dayPrice3;setbillings(dayTime,_dayPrice3,nightTime,_nightPrice3,sumTotal);}if(timeSlot_bool==true&&sumTime==max_limits[3]){// 5400\nnightTime=util.round(max_limits[1],currentTime,100);dayTime=util.round(max_limits[2],max_limits[1],100);extraTime=util.round(max_limits[3],max_limits[2],100);var _dayPrice4=genPrice.max_calculate_daytime_payments(dayTime,hourly_rate,day_max_limit,day_max_rate);var _nightPrice4=genPrice.max_calculate_nighttime_payments(nightTime,night_hourly_rate,night_max_limit,night_max_rate);var _extraPrice=genPrice.max_calculate_extratime_payments(extraTime,night_hourly_rate,night_max_limit,night_max_rate);sumTotal=_nightPrice4+_dayPrice4+_extraPrice;setbillings(dayTime,_dayPrice4,nightTime,_nightPrice4,sumTotal);}// starting from below 6am\nif(timeSlot_bool==true&&sumTime==max_limits[4]){// 600\nnightTime=util.round(max_limits[4],currentTime,100);var _nightPrice5=genPrice.max_calculate_nighttime_payments(nightTime,night_hourly_rate,night_max_limit,night_max_rate);setbillings(0,0,nightTime,_nightPrice5,_nightPrice5);}if(timeSlot_bool==true&&sumTime==max_limits[0]){// 1800 starting from below 6am\nnightTime=util.round(max_limits[4],currentTime,100);dayTime=util.round(max_limits[0],max_limits[4],100);var _dayPrice5=genPrice.max_calculate_daytime_payments(dayTime,hourly_rate,day_max_limit,day_max_rate);var _nightPrice6=genPrice.max_calculate_nighttime_payments(nightTime,night_hourly_rate,night_max_limit,night_max_rate);sumTotal=_nightPrice6+_dayPrice5;setbillings(dayTime,_dayPrice5,nightTime,_nightPrice6,sumTotal);}if(timeSlot_bool==true&&currentTime<600&&sumTime==max_limits[1]){// 3000 starting from 6am\nnightTime=util.round(max_limits[4],currentTime,100);dayTime=util.round(max_limits[0],max_limits[4],100);extraTime=util.round(max_limits[2],max_limits[0],100);var _dayPrice6=genPrice.max_calculate_daytime_payments(dayTime,hourly_rate,day_max_limit,day_max_rate);var _nightPrice7=genPrice.max_calculate_nighttime_payments(nightTime,night_hourly_rate,night_max_limit,night_max_rate);var _extraPrice2=genPrice.max_calculate_extratime_payments(extraTime,night_hourly_rate,night_max_limit,night_max_rate);sumTotal=_nightPrice7+_dayPrice6+_extraPrice2;setbillings(dayTime,_dayPrice6,nightTime,_nightPrice7,sumTotal);}}};var night_time=function night_time(){// NEED TO SET CONDITIONS FOR ROLL OVER MINUTES\nif(currentTime>=1800&&accumalatedTime<=3000||currentTime<600&&accumalatedTime<=600){nightTime=util.round(accumalatedTime,currentTime,100);var nightPrice=genPrice.calculate_nighttime_payments(nightTime,night_hourly_rate,night_max_limit,night_max_rate);console.log(nightPrice);setbillings(0,0,nightTime,nightPrice,nightPrice);}// overlap_time\nif(currentTime>=1800&&accumalatedTime>3000&&accumalatedTime<=4200){// if current time is greater than 6pm & setTime is > 6am and setTime is < 6pm\ndayTime=util.round(accumalatedTime,3000,100);// util.round (setTime - nighttime) / 100   \nnightTime=util.round(3000,currentTime,100);maxLimit_overflow=util.overlap_limit(3000,4200,accumalatedTime,day_minute_rate);console.log(accumalatedTime);var dayPrice=genPrice.calculate_daytime_payments(dayTime,hourly_rate,day_max_limit,day_max_rate,maxLimit_overflow);var _nightPrice8=genPrice.calculate_nighttime_payments(nightTime,night_hourly_rate,night_max_limit,night_max_rate);sumTotal=_nightPrice8+dayPrice;setbillings(0,0,nightTime,_nightPrice8,parseFloat(sumTotal).toFixed(2));}//night => day => night\nif(currentTime>=1800&&accumalatedTime>4200){nightTime=util.round(3000,currentTime,100);dayTime=util.round(accumalatedTime,3000,100);extraTime=util.round(accumalatedTime,4200,100);console.log(accumalatedTime);maxLimit_overflow=util.overlap_limit(4200,5400,accumalatedTime,night_minute_rate);var _dayPrice7=genPrice.calculate_daytime_payments(dayTime,hourly_rate,day_max_limit,day_max_rate);var _nightPrice9=genPrice.calculate_nighttime_payments(nightTime,night_hourly_rate,night_max_limit,night_max_rate);var extraPrice=genPrice.calculate_extratime_payments(extraTime,night_hourly_rate,night_max_limit,night_max_rate,maxLimit_overflow);sumTotal=_dayPrice7+_nightPrice9+extraPrice;setbillings(0,0,nightTime,_nightPrice9,parseFloat(sumTotal).toFixed(2));}// night below 6am => day below => 6pm\nif(currentTime<600&&accumalatedTime>600&&accumalatedTime<=1800){// if current time is < 6am and setTime is greater than\ndayTime=util.round(accumalatedTime,600,100);nightTime=util.round(600,currentTime,100);maxLimit_overflow=util.overlap_limit(600,1800,accumalatedTime,day_minute_rate,maxLimit_overflow);var _dayPrice8=genPrice.calculate_daytime_payments(dayTime,hourly_rate,day_max_limit,day_max_rate);var _nightPrice10=genPrice.calculate_nighttime_payments(nightTime,night_hourly_rate,night_max_limit,night_max_rate);sumTotal=_dayPrice8+_nightPrice10;setbillings(dayTime,_dayPrice8,nightTime,_nightPrice10,parseFloat(sumTotal).toFixed(2));}// night below 6am => pass day => night again\nif(currentTime<600&&accumalatedTime>1800&&accumalatedTime<=3000){dayTime=util.round(1800,600,100);nightTime=util.round(600,currentTime,100);extraTime=util.round(accumalatedTime,1800,100);maxLimit_overflow=util.overlap_limit(1800,3000,accumalatedTime,night_minute_rate);var _dayPrice9=genPrice.calculate_daytime_payments(dayTime,hourly_rate,day_max_limit,day_max_rate);var _nightPrice11=genPrice.calculate_nighttime_payments(nightTime,night_hourly_rate,night_max_limit,night_max_rate);var _extraPrice3=genPrice.calculate_extratime_payments(extraTime,night_hourly_rate,night_max_limit,night_max_rate,maxLimit_overflow);sumTotal=_dayPrice9+_nightPrice11+_extraPrice3;setbillings(dayTime,_dayPrice9,nightTime,_nightPrice11,parseFloat(sumTotal).toFixed(2));}};var day_time=function day_time(){// NEED TO SET CONDITIONS FOR ROLL OVER MINUTES \nif(currentTime>600&&accumalatedTime<=1800){dayTime=util.round(accumalatedTime,currentTime,100);var dayPrice=genPrice.calculate_daytime_payments(dayTime,hourly_rate,day_max_limit,day_max_rate);setbillings(dayTime,dayPrice,0,0,parseFloat(dayPrice).toFixed(2));}// overlaping day => night\nif(currentTime<1800&&accumalatedTime>1800&&accumalatedTime<=3000){//current_time < 6pm(daytime) && setTime > 6pm & setTime is <= 6am then do something\ndayTime=util.round(1800,currentTime,100);nightTime=util.round(accumalatedTime,1800,100);// Generate night time\nmaxLimit_overflow=util.overlap_limit(1800,3000,accumalatedTime,night_minute_rate);var dayPrice=genPrice.calculate_daytime_payments(dayTime,hourly_rate,day_max_limit,day_max_rate);var nightPrice=genPrice.calculate_nighttime_payments(nightTime,night_hourly_rate,night_max_limit,night_max_rate,maxLimit_overflow);console.log(currentTime);console.log(accumalatedTime);console.log(maxLimit_overflow);sumTotal=eval(dayPrice+nightPrice);console.log(sumTotal);setbillings(dayTime,dayPrice,nightTime,nightPrice,parseFloat(sumTotal).toFixed(2));}// day => night => day\nif(currentTime<1800&&accumalatedTime>1800&&accumalatedTime>3000){dayTime=util.round(1800,currentTime,100);nightTime=util.round(3000,1800,100);extraTime=util.round(accumalatedTime,3000,100);maxLimit_overflow=util.overlap_limit(3000,4200,accumalatedTime,day_minute_rate);var _dayPrice10=genPrice.calculate_daytime_payments(dayTime,hourly_rate,day_max_limit,day_max_rate);var _nightPrice12=genPrice.calculate_nighttime_payments(nightTime,night_hourly_rate,night_max_limit,night_max_rate);var extraPrice=genPrice.calculate_extratime_payments(extraTime,hourly_rate,day_max_limit,day_max_rate,maxLimit_overflow);sumTotal=eval(_dayPrice10+_nightPrice12+extraPrice);console.log('this triggered too');setbillings(dayTime,_dayPrice10,nightTime,_nightPrice12,parseFloat(sumTotal).toFixed(2));}};if(minutes>0){max_calculations();}if(minutes<=0){night_time();day_time();}};export default PaymentGenerator;","map":{"version":3,"sources":["/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Components/Financials/Calculator/PaymentGenerator.js"],"names":["useContext","PaymentContext","MaxSelection","Util","GeneratePrice","PaymentGenerator","hours","minutes","trigger","console","log","setNightTime","setNightTimeBilling","setDayTime","setDayTimeBilling","setBilling","setTime","timeDate","Date","night_hourly_rate","hourly_rate","day_max_limit","night_max_limit","day_max_rate","night_max_rate","genPrice","util","maxLimit_overflow","day_minute_rate","night_minute_rate","check_expired_hour","localStorage","getItem","currentTime","parseInt","getHours","getMinutes","setLimit","accumalatedTime","minuteCheck","hourCheck","Math","floor","newMinutes","newHours","dayTime","nightTime","extraTime","sumTotal","check_and_adjust","setbillings","set_day_time","set_daytime_billing","set_night_time","set_nighttime_billing","total_billing","max_calculations","timeSlot_bool","maxBtn_timeSkip","currentMinuteCheck","sumTime","max_cost_calc","max_limits","dayTimes","round","dayPrice","max_calculate_daytime_payments","nightPrice","max_calculate_nighttime_payments","extraPrice","max_calculate_extratime_payments","night_time","calculate_nighttime_payments","overlap_limit","calculate_daytime_payments","parseFloat","toFixed","calculate_extratime_payments","day_time","eval"],"mappings":"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","sourcesContent":["// import { useStripe } from '@stripe/react-stripe-js'\nimport { useContext} from 'react'\nimport { PaymentContext } from '../../../Context/PaymentContext'\nimport MaxSelection from '../../max_selection/MaxSelection'\nimport Util from './../../Utilities/Utilities'\nimport GeneratePrice from './GeneratePrice'\n\n\n\n\n\nconst PaymentGenerator = (hours, minutes, trigger) => {\n\n    console.log(`hours - ${hours} mins - ${minutes}`)\n    const { setNightTime, setNightTimeBilling, setDayTime, setDayTimeBilling, setBilling, setTime } = useContext(PaymentContext)\n    const timeDate = new Date()\n    const night_hourly_rate = .20\n    const hourly_rate = .10\n    const day_max_limit = 2\n    const night_max_limit = 3\n    var day_max_rate = .20\n    var night_max_rate = .60\n    const genPrice = new GeneratePrice()\n    const util = new Util()\n    var maxLimit_overflow\n    const day_minute_rate = hourly_rate / 60\n    const night_minute_rate = night_hourly_rate / 60\n    const check_expired_hour = localStorage.getItem('_time_btn_hr')\n\n    //parseInt(`${timeDate.getHours()}${timeDate.getMinutes()}`)\n    var currentTime = parseInt(`${timeDate.getHours()}${timeDate.getMinutes() < 10?`0${timeDate.getMinutes()}`:timeDate.getMinutes()}`)\n    var setLimit = parseInt(`${hours}${minutes}0`)\n    var accumalatedTime = currentTime + setLimit\n    var minuteCheck = accumalatedTime % 100\n    var hourCheck = Math.floor(accumalatedTime / 100)\n    var newMinutes, newHours, dayTime, nightTime, extraTime, sumTotal\n    \n\n\n    const check_and_adjust = () => {\n        // Accumulated Time Check\n        if (hourCheck > 23) {\n            hourCheck = hourCheck - 24\n        }\n        if (minuteCheck >= 60) {\n            newMinutes = minuteCheck - 60\n            newHours = Math.floor((hourCheck) + 1)\n            accumalatedTime = parseInt(`${newHours}${newMinutes}`)\n            if (newMinutes < 10) {\n                accumalatedTime = parseInt(`${newHours}0${newMinutes}`)\n            }\n            if (newMinutes === 0) {\n                accumalatedTime = parseInt(`${newHours}00`)\n            }\n        } else {\n            accumalatedTime = currentTime + setLimit //Current time + Set Limit time\n\n        }\n    }\n    check_and_adjust()\n\n\n    const setbillings = (set_day_time, set_daytime_billing, set_night_time, set_nighttime_billing, total_billing) => {\n        setDayTime(set_day_time)\n        setDayTimeBilling(set_daytime_billing)\n        setNightTime(set_night_time)\n        setNightTimeBilling(set_nighttime_billing)\n        setBilling(total_billing)\n    }\n\n\n    const max_calculations = () => { \n        var timeSlot_bool = null\n\n        if(minutes > 0){ \n            var maxBtn_timeSkip = parseInt(`${hours}${minutes}`)\n            const currentMinuteCheck = currentTime % 100\n            var sumTime = (currentTime + maxBtn_timeSkip)\n            if(currentMinuteCheck + minutes == 60){ \n                sumTime = sumTime + 40\n            }\n\n            // Check parameters timeSlot of current time => (True = Night \\ False = Day)\n            currentTime > 1800 || currentTime < 600?timeSlot_bool = true:timeSlot_bool = false \n            \n\n            var max_cost_calc = 0\n            const max_limits = [1800,3000,4200, 5400, 600, ] //day // night // day\n            \n            if(timeSlot_bool == false && sumTime == max_limits[0]){ \n                var dayTimes = util.round(max_limits[0], currentTime, 100)\n                console.log(dayTimes)\n                const dayPrice = genPrice.max_calculate_daytime_payments(dayTimes, hourly_rate, day_max_limit, day_max_rate)\n                console.log('max Trigger - ' + dayPrice)\n                setbillings(dayTime, dayPrice, 0, 0, dayPrice)\n            }\n            if(timeSlot_bool == false && sumTime == max_limits[1]){ \n                dayTime = util.round(max_limits[0], currentTime, 100)\n                nightTime = util.round(sumTime, max_limits[0], 100)\n                const dayPrice = genPrice.max_calculate_daytime_payments(dayTime, hourly_rate, day_max_limit, day_max_rate)\n                const nightPrice = genPrice.max_calculate_nighttime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate)\n                sumTotal = nightPrice + dayPrice\n                setbillings(dayTime, dayPrice, nightTime, nightPrice, sumTotal)\n            }\n            if(timeSlot_bool == false && sumTime == max_limits[2]){ \n                dayTime = util.round(max_limits[0], currentTime, 100)\n                nightTime = util.round(max_limits[1], max_limits[0], 100)\n                extraTime = util.round(sumTime, max_limits[1], 100)\n                const dayPrice = genPrice.max_calculate_daytime_payments(dayTime, hourly_rate, day_max_limit, day_max_rate)\n                const nightPrice = genPrice.max_calculate_nighttime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate)\n                const extraPrice = genPrice.max_calculate_extratime_payments(extraTime, night_hourly_rate, night_max_limit, night_max_rate)\n                sumTotal = nightPrice + dayPrice + extraPrice\n                setbillings(dayTime, dayPrice, nightTime, nightPrice, sumTotal)\n            }\n\n            // Night\n            if(timeSlot_bool == true && sumTime == max_limits[1]){ //3000\n                nightTime = util.round(max_limits[1], currentTime, 100)\n                const nightPrice = genPrice.max_calculate_daytime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate)\n                console.log('max Trigger - ' + nightPrice)\n                setbillings(nightTime, nightPrice, 0, 0, nightPrice)\n            }\n            if(timeSlot_bool == true && sumTime == max_limits[2]){ // 4200\n                nightTime = util.round(max_limits[1], currentTime, 100)\n                dayTime = util.round(max_limits[2], max_limits[1], 100)\n                const dayPrice = genPrice.max_calculate_daytime_payments(dayTime, hourly_rate, day_max_limit, day_max_rate)\n                const nightPrice = genPrice.max_calculate_nighttime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate)\n                sumTotal = nightPrice + dayPrice\n                setbillings(dayTime, dayPrice, nightTime, nightPrice, sumTotal)\n            }\n            if(timeSlot_bool == true && sumTime == max_limits[3]){ // 5400\n                nightTime = util.round(max_limits[1], currentTime, 100)\n                dayTime = util.round(max_limits[2], max_limits[1], 100)\n                extraTime = util.round(max_limits[3], max_limits[2], 100)\n                const dayPrice = genPrice.max_calculate_daytime_payments(dayTime, hourly_rate, day_max_limit, day_max_rate)\n                const nightPrice = genPrice.max_calculate_nighttime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate)\n                const extraPrice = genPrice.max_calculate_extratime_payments(extraTime, night_hourly_rate, night_max_limit, night_max_rate)\n                sumTotal = nightPrice + dayPrice + extraPrice\n                setbillings(dayTime, dayPrice, nightTime, nightPrice, sumTotal)\n            }\n\n            // starting from below 6am\n            if(timeSlot_bool == true && sumTime == max_limits[4]){ // 600\n                nightTime = util.round(max_limits[4], currentTime, 100)\n                const nightPrice = genPrice.max_calculate_nighttime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate)\n                setbillings(0, 0, nightTime, nightPrice, nightPrice)\n            }\n            if(timeSlot_bool == true && sumTime == max_limits[0]){ // 1800 starting from below 6am\n                nightTime = util.round(max_limits[4], currentTime, 100)\n                dayTime = util.round(max_limits[0], max_limits[4], 100)\n                const dayPrice = genPrice.max_calculate_daytime_payments(dayTime, hourly_rate, day_max_limit, day_max_rate)\n                const nightPrice = genPrice.max_calculate_nighttime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate)\n                sumTotal = nightPrice + dayPrice\n                setbillings(dayTime, dayPrice, nightTime, nightPrice, sumTotal)\n            }\n            if(timeSlot_bool == true && (currentTime < 600 && sumTime == max_limits[1])){ // 3000 starting from 6am\n                nightTime = util.round(max_limits[4], currentTime, 100)\n                dayTime = util.round(max_limits[0], max_limits[4], 100)\n                extraTime = util.round(max_limits[2], max_limits[0], 100)\n                const dayPrice = genPrice.max_calculate_daytime_payments(dayTime, hourly_rate, day_max_limit, day_max_rate)\n                const nightPrice = genPrice.max_calculate_nighttime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate)\n                const extraPrice = genPrice.max_calculate_extratime_payments(extraTime, night_hourly_rate, night_max_limit, night_max_rate)\n                sumTotal = nightPrice + dayPrice + extraPrice\n                setbillings(dayTime, dayPrice, nightTime, nightPrice, sumTotal)\n            }\n        }\n    }\n\n\n\n    const night_time = () => {\n        // NEED TO SET CONDITIONS FOR ROLL OVER MINUTES\n        if (currentTime >= 1800 && accumalatedTime <= 3000 || currentTime < 600 && accumalatedTime <= 600) {\n            nightTime = util.round(accumalatedTime, currentTime, 100)\n            const nightPrice = genPrice.calculate_nighttime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate)\n            console.log(nightPrice)\n            setbillings(0, 0, nightTime, nightPrice, nightPrice) \n        }\n        // overlap_time\n        if(currentTime >= 1800 && accumalatedTime > 3000 && accumalatedTime <= 4200){ // if current time is greater than 6pm & setTime is > 6am and setTime is < 6pm\n            dayTime = util.round(accumalatedTime, 3000, 100)           // util.round (setTime - nighttime) / 100   \n            nightTime = util.round(3000, currentTime, 100)\n            maxLimit_overflow = util.overlap_limit(3000,4200, accumalatedTime, day_minute_rate)\n            console.log(accumalatedTime)\n            const dayPrice = genPrice.calculate_daytime_payments(dayTime, hourly_rate, day_max_limit, day_max_rate, maxLimit_overflow)\n            const nightPrice = genPrice.calculate_nighttime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate)\n            sumTotal = nightPrice + dayPrice\n            setbillings(0, 0, nightTime, nightPrice, parseFloat(sumTotal).toFixed(2)) \n        }\n        //night => day => night\n        if(currentTime >= 1800 && accumalatedTime > 4200){ \n            nightTime = util.round(3000, currentTime, 100)\n            dayTime = util.round(accumalatedTime, 3000, 100)  \n            extraTime = util.round(accumalatedTime, 4200, 100)\n            console.log(accumalatedTime)\n            maxLimit_overflow = util.overlap_limit(4200, 5400, accumalatedTime, night_minute_rate)\n            const dayPrice = genPrice.calculate_daytime_payments(dayTime, hourly_rate, day_max_limit, day_max_rate)\n            const nightPrice = genPrice.calculate_nighttime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate)\n            const extraPrice = genPrice.calculate_extratime_payments(extraTime, night_hourly_rate,night_max_limit, night_max_rate, maxLimit_overflow)\n            sumTotal = dayPrice + nightPrice + extraPrice\n            setbillings(0,0, nightTime, nightPrice, parseFloat(sumTotal).toFixed(2))\n        }\n\n        // night below 6am => day below => 6pm\n        if(currentTime < 600 && accumalatedTime > 600 && accumalatedTime <= 1800){ // if current time is < 6am and setTime is greater than\n            dayTime = util.round(accumalatedTime, 600, 100)  \n            nightTime = util.round(600, currentTime, 100)\n            maxLimit_overflow = util.overlap_limit(600, 1800, accumalatedTime, day_minute_rate, maxLimit_overflow)\n            const dayPrice = genPrice.calculate_daytime_payments(dayTime, hourly_rate, day_max_limit, day_max_rate)\n            const nightPrice = genPrice.calculate_nighttime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate)\n            sumTotal = dayPrice + nightPrice\n            setbillings(dayTime,dayPrice, nightTime, nightPrice, parseFloat(sumTotal).toFixed(2))\n        }\n        // night below 6am => pass day => night again\n        if(currentTime < 600 && accumalatedTime > 1800 && accumalatedTime <= 3000){ \n            dayTime = util.round(1800, 600, 100)  \n            nightTime = util.round(600, currentTime, 100)\n            extraTime = util.round(accumalatedTime, 1800, 100)\n            maxLimit_overflow = util.overlap_limit(1800, 3000, accumalatedTime, night_minute_rate)\n            const dayPrice = genPrice.calculate_daytime_payments(dayTime, hourly_rate, day_max_limit, day_max_rate)\n            const nightPrice = genPrice.calculate_nighttime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate)\n            const extraPrice = genPrice.calculate_extratime_payments(extraTime, night_hourly_rate, night_max_limit, night_max_rate, maxLimit_overflow)\n            sumTotal = dayPrice + nightPrice + extraPrice\n            setbillings(dayTime,dayPrice, nightTime, nightPrice, parseFloat(sumTotal).toFixed(2))\n        }\n    }\n\n\n    const day_time = () => {\n        // NEED TO SET CONDITIONS FOR ROLL OVER MINUTES \n        if (currentTime > 600 && accumalatedTime <= 1800) {\n            dayTime = util.round(accumalatedTime, currentTime, 100)\n            var dayPrice = genPrice.calculate_daytime_payments(dayTime, hourly_rate, day_max_limit, day_max_rate)\n            setbillings(dayTime, dayPrice, 0, 0, parseFloat(dayPrice).toFixed(2))\n            \n        }\n        // overlaping day => night\n        if (currentTime < 1800 && (accumalatedTime > 1800 && accumalatedTime <= 3000)) { //current_time < 6pm(daytime) && setTime > 6pm & setTime is <= 6am then do something\n            dayTime = util.round(1800, currentTime, 100)\n            nightTime = util.round(accumalatedTime, 1800, 100)  // Generate night time\n            maxLimit_overflow = util.overlap_limit(1800,3000, accumalatedTime, night_minute_rate)\n            var dayPrice = genPrice.calculate_daytime_payments(dayTime, hourly_rate, day_max_limit, day_max_rate)\n            var nightPrice = genPrice.calculate_nighttime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate, maxLimit_overflow)\n\n\n            console.log(currentTime)\n            console.log(accumalatedTime)\n            console.log(maxLimit_overflow)\n            sumTotal = eval(dayPrice + nightPrice)\n            console.log(sumTotal)\n            setbillings(dayTime, dayPrice, nightTime, nightPrice, parseFloat(sumTotal).toFixed(2))\n        }\n        // day => night => day\n        if(currentTime < 1800 && (accumalatedTime > 1800 && accumalatedTime > 3000)){ \n            dayTime = util.round(1800, currentTime, 100)\n            nightTime = util.round(3000, 1800, 100)\n            extraTime = util.round(accumalatedTime, 3000, 100)\n            maxLimit_overflow = util.overlap_limit(3000,4200, accumalatedTime, day_minute_rate)\n            const dayPrice = genPrice.calculate_daytime_payments(dayTime, hourly_rate, day_max_limit, day_max_rate)\n            const nightPrice = genPrice.calculate_nighttime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate)\n            const extraPrice = genPrice.calculate_extratime_payments(extraTime, hourly_rate, day_max_limit, day_max_rate, maxLimit_overflow)\n            sumTotal = eval(dayPrice + nightPrice + extraPrice)\n            console.log('this triggered too')\n            setbillings(dayTime, dayPrice, nightTime, nightPrice, parseFloat(sumTotal).toFixed(2))\n        }\n    }\n\n    if(minutes > 0){ \n        max_calculations()\n    }\n    if(minutes <= 0){ \n        night_time()\n        day_time()\n    }\n\n\n}\n\nexport default PaymentGenerator;\n\n\n"]},"metadata":{},"sourceType":"module"}