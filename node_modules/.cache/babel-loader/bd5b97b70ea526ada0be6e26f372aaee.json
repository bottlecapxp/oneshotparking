{"ast":null,"code":"var _jsxFileName = \"/Users/bottlecapmedia/Desktop/OneShot Parking/src/Pages/CardPayment.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport CreditCardIcon from \"../Assets/ccIcon.svg\";\nimport Lock from '../Assets/lock.png';\nimport { useHistory } from 'react-router-dom';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js'; // const axios = require('axios').default;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CardPayment = () => {\n  _s();\n\n  // using state to keep track of stripe payment, show errors, and manange user interface\n  const [succeeded, setSucceeded] = useState(false);\n  const [error, setError] = useState(null);\n  const [processing, setProcessing] = useState('');\n  const [disabled, setDisabled] = useState(true);\n  const [clientSecret, setClientSecrete] = useState(''); // extract stripe and element \n\n  const stripe = useStripe();\n  const elements = useElements();\n  useEffect(() => {\n    window.fetch('/create-payment-intent', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify({\n        items: [{\n          parking_id: 'xl-lot23w'\n        }]\n      })\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      setClientSecrete(data.clientSecret);\n    });\n  }, []);\n\n  const handleChange = async event => {\n    event.preventDefault(); //Listen for changes in the CardElement\n    // and display any errors as the customer types their card details\n\n    setDisabled(event.empty);\n    setError(event.error ? event.error.message : '');\n  };\n\n  const handleSubmimt = async ev => {\n    ev.preventDefault();\n    setProcessing(true);\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement)\n      }\n    });\n  };\n\n  const cardElementOptions = {\n    style: {\n      base: {\n        fontSize: '16px'\n      },\n      invalid: {},\n      complete: {}\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(CardElement, {\n        id: \"card-element\",\n        options: cardElementOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: !stripe,\n        children: \"Pay Now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-error\",\n        role: \"alert\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CardPayment, \"STpojJBdxP3hw2YIu6x/VkAmW4Y=\", false, function () {\n  return [useStripe, useElements];\n});\n\n_c = CardPayment;\nexport default CardPayment;\n\nvar _c;\n\n$RefreshReg$(_c, \"CardPayment\");","map":{"version":3,"sources":["/Users/bottlecapmedia/Desktop/OneShot Parking/src/Pages/CardPayment.js"],"names":["React","useEffect","useState","Lock","useHistory","CardElement","useStripe","useElements","CardPayment","succeeded","setSucceeded","error","setError","processing","setProcessing","disabled","setDisabled","clientSecret","setClientSecrete","stripe","elements","window","fetch","method","headers","body","JSON","stringify","items","parking_id","then","res","json","data","handleChange","event","preventDefault","empty","message","handleSubmimt","ev","payload","confirmCardPayment","payment_method","card","getElement","cardElementOptions","style","base","fontSize","invalid","complete"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport CreditCardIcon from '../Assets/ccIcon.svg'\nimport Lock from '../Assets/lock.png'\nimport {useHistory} from 'react-router-dom'\nimport {CardElement, useStripe, useElements} from '@stripe/react-stripe-js'; \n\n\n// const axios = require('axios').default;\nconst CardPayment = () => {\n\n\n// using state to keep track of stripe payment, show errors, and manange user interface\nconst [succeeded, setSucceeded] = useState(false)\nconst [error, setError] = useState(null)\nconst [processing, setProcessing] = useState('')\nconst [disabled, setDisabled] = useState(true)\nconst [clientSecret, setClientSecrete] = useState('')\n\n\n// extract stripe and element \nconst stripe = useStripe()\nconst elements = useElements()\n    \nuseEffect(()=>{\n    window.fetch('/create-payment-intent', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json', \n            'Accept': 'application/json'\n        },\n        body: JSON.stringify({items: [{parking_id: 'xl-lot23w'}]})\n    }).then(res => {\n        return res.json();\n    }).then(data => {\n        setClientSecrete(data.clientSecret)\n\n    })\n}, [])\n\nconst handleChange = async (event) =>{\n    event.preventDefault()\n\n    //Listen for changes in the CardElement\n    // and display any errors as the customer types their card details\n    setDisabled(event.empty);\n    setError(event.error ? event.error.message : '')\n\n}\n\nconst handleSubmimt = async (ev) => {\n    ev.preventDefault()\n    setProcessing(true)\n\n    if(!stripe || !elements){\n        return;\n    } \n     \n    const payload = await stripe.confirmCardPayment(clientSecret, {\n        payment_method: { \n            card: elements.getElement(CardElement)\n        }\n    })\n\n\n\n}\n\n\nconst cardElementOptions = {\n    style: {\n        base:{\n            fontSize: '16px',\n\n        },\n        invalid:{\n            \n        },\n        complete: {\n\n        }\n    }\n}\n\n\n\nreturn(\n    <div className=''>\n    <form>\n    <CardElement id='card-element' options={cardElementOptions}/>\n    <button type='submit' disabled={!stripe}>\n        Pay Now\n    </button>\n    <div className='card-error' role='alert'> \n    {error}\n    </div>\n</form>\n    </div>\n)\n}\nexport default CardPayment;\n\n\n"]},"metadata":{},"sourceType":"module"}