{"ast":null,"code":"import React, { Component } from 'react';\n\nclass Convert_to_meridian extends Component {\n  constructor(props) {\n    super(props);\n\n    this.genrate_expired_time = scrolled_hours => {\n      var sum_hours = this.current_hour + scrolled_hours;\n\n      if (hour > 12) {\n        var twelve_hour_time = hour - 12;\n        return twelve_hour_time;\n      } else {\n        return hour;\n      }\n    };\n\n    this.meridian_units = ['am', 'pm'];\n    this.__init_date__ = new Date();\n    this.current_hour = this.__init_date__.getHours();\n    this.currnet_mins = this.__init_date__.getMinutes();\n  }\n\n}\n\nexport default Convert_to_meridian; // set_meridian_unit = (hours) => { \n// var time_expression = this.current_hour + hours\n// switch(this.current_hour){ \n//     case(this.current_hour > 12?this.current_hour: null): \n//     break;\n// }\n// }\n// }\n// const twelve_hour_time = () => { \n// \tif(expiredHours > 12){ \n// \t\texpiredHours = expiredHours - 12 \n// \t\ttwelve_hour_time()\n// \t}\n// }\n// twelve_hour_time()\n// const set_meridiem = () => { \n// \tvar time_expression = currentTime.getHours() + hours\n// \tconst start_meridiem = currentTime.getHours()\n// \tswitch(start_meridiem){ \n// \t\tcase(start_meridiem > 12? start_meridiem: null):\n// \t\tstart_time_unit = time_unit_[1]\n// \t\tbreak;\n// \t\tcase (start_meridiem < 12 ? start_meridiem: null): \n// \t\tstart_time_unit = time_unit_[0]\n// \t\tbreak;\n// \t}\n// \tswitch(time_expression){\n// \t\tcase (time_expression >= 12 && time_expression <= 24 ? time_expression : null):\n// \t\t\ttimeUnit = time_unit_[1]\n// \t\t\tbreak; \n// \t\tcase (time_expression > 24 || time_expression < 12 ? time_expression : null): \n// \t\t\ttimeUnit = time_unit_[0]\n// \t\t\tbreak;\n// \t}\n// \tif(expiredMinutes < 10){\n// \t\texpiredMinutes = `${0}${expiredMinutes}`\n// \t}\n// \tif(expiredMinutes == 60){ \n// \t\texpiredHours = expiredHours + 1\n// \t\texpiredMinutes = '00'\n// \t}\n// }\n// set_meridiem()","map":{"version":3,"sources":["/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Components/Timer/ConvertToMeridian.js"],"names":["React","Component","Convert_to_meridian","constructor","props","genrate_expired_time","scrolled_hours","sum_hours","current_hour","hour","twelve_hour_time","meridian_units","__init_date__","Date","getHours","currnet_mins","getMinutes"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAKA,MAAMC,mBAAN,SAAkCD,SAAlC,CAA2C;AACvCE,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SAUlBC,oBAVkB,GAUMC,cAAD,IAAmB;AACtC,UAAIC,SAAS,GAAG,KAAKC,YAAL,GAAoBF,cAApC;;AACA,UAAGG,IAAI,GAAG,EAAV,EAAa;AACT,YAAIC,gBAAgB,GAAGD,IAAI,GAAG,EAA9B;AACA,eAAOC,gBAAP;AACH,OAHD,MAII;AACA,eAAOD,IAAP;AACH;AACJ,KAnBiB;;AAEf,SAAKE,cAAL,GAAsB,CAAC,IAAD,EAAM,IAAN,CAAtB;AACA,SAAKC,aAAL,GAAqB,IAAIC,IAAJ,EAArB;AACA,SAAKL,YAAL,GAAoB,KAAKI,aAAL,CAAmBE,QAAnB,EAApB;AACA,SAAKC,YAAL,GAAoB,KAAKH,aAAL,CAAmBI,UAAnB,EAApB;AACF;;AAPsC;;AAuB3C,eAAed,mBAAf,C,CAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAKA;AAIC;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["import React, { Component } from 'react'\n\n\n\n\nclass Convert_to_meridian extends Component{\n    constructor(props){ \n        super(props)\n       this.meridian_units = ['am','pm']\n       this.__init_date__ = new Date()\n       this.current_hour = this.__init_date__.getHours()\n       this.currnet_mins = this.__init_date__.getMinutes()\n    }\n\n\n\n    genrate_expired_time = (scrolled_hours) =>{ \n        var sum_hours = this.current_hour + scrolled_hours\n        if(hour > 12){ \n            var twelve_hour_time = hour - 12\n            return twelve_hour_time\n        }\n        else{ \n            return hour\n        }\n    }\n}\n\nexport default Convert_to_meridian;\n\n// set_meridian_unit = (hours) => { \n// var time_expression = this.current_hour + hours\n\n// switch(this.current_hour){ \n//     case(this.current_hour > 12?this.current_hour: null): \n\n//     break;\n// }\n// }\n\n\n\n\n// }\n\n\n\n\t// const twelve_hour_time = () => { \n\t// \tif(expiredHours > 12){ \n\t// \t\texpiredHours = expiredHours - 12 \n\t// \t\ttwelve_hour_time()\n\t// \t}\n\t// }\n\t// twelve_hour_time()\n\n\t// const set_meridiem = () => { \n\t// \tvar time_expression = currentTime.getHours() + hours\n\t// \tconst start_meridiem = currentTime.getHours()\n\n\t// \tswitch(start_meridiem){ \n\t// \t\tcase(start_meridiem > 12? start_meridiem: null):\n\t// \t\tstart_time_unit = time_unit_[1]\n\t// \t\tbreak;\n\t// \t\tcase (start_meridiem < 12 ? start_meridiem: null): \n\t// \t\tstart_time_unit = time_unit_[0]\n\t// \t\tbreak;\n\t// \t}\n\n\n\n\t// \tswitch(time_expression){\n\t// \t\tcase (time_expression >= 12 && time_expression <= 24 ? time_expression : null):\n\t// \t\t\ttimeUnit = time_unit_[1]\n\t// \t\t\tbreak; \n\t// \t\tcase (time_expression > 24 || time_expression < 12 ? time_expression : null): \n\t// \t\t\ttimeUnit = time_unit_[0]\n\t// \t\t\tbreak;\n\t// \t}\n\n\t// \tif(expiredMinutes < 10){\n\t// \t\texpiredMinutes = `${0}${expiredMinutes}`\n\t// \t}\n\t// \tif(expiredMinutes == 60){ \n\t// \t\texpiredHours = expiredHours + 1\n\t// \t\texpiredMinutes = '00'\n\t// \t}\n\n\t// }\n\t// set_meridiem()"]},"metadata":{},"sourceType":"module"}