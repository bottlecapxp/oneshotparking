{"ast":null,"code":"var _jsxFileName = \"/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Components/Buttons/CircleBtns_txt/CircleTxtBtns.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport MaxConditon from '../../../Components/max_selection/MaxSelection';\nimport Time from '../../Timer/Time';\nimport '../CircleBtns_txt/CircleBtnstxt.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CircleTxtBtns = ({\n  title,\n  time,\n  addTime,\n  checked,\n  t\n}) => {\n  _s();\n\n  // const {darkMode} = useContext(PaymentContext)\n  const darkMode = 1800;\n  const [darkModeStyle, setDarkModeStyle] = useState({\n    buttonStyles: 'global_circle_btns',\n    title: 'title'\n  });\n  const [timer, setTimer] = useState({\n    title: title,\n    setTime: parseFloat(time)\n  });\n  const max_condition = new MaxConditon();\n  const newTimeClass = new Time();\n  var c = 0;\n\n  const incrementTime = () => {\n    const time_wheel_hr = parseInt(localStorage.getItem('_time_btn_hr'));\n\n    if (title == 'Max' && localStorage.getItem('_time_btn_hr') == '6') {\n      addTime(12 * 0.0417);\n    }\n\n    if (title == 'Max' && localStorage.getItem('_time_btn_meridian') == 'pm' && time_wheel_hr < 6) {\n      addtime;\n    } else {\n      addTime(timer.setTime);\n    }\n  };\n\n  useEffect(() => {\n    if (darkMode >= 1800 || darkMode <= 600) {\n      setDarkModeStyle({\n        buttonStyles: 'global_circle_btns_dark',\n        title: 'title_dark'\n      });\n    }\n\n    if (darkMode < 1800 || darkMode > 600) {\n      setDarkModeStyle({\n        buttonStyles: 'global_circle_btns',\n        title: 'title'\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${darkModeStyle.buttonStyles} content-align`,\n    onClick: incrementTime,\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      className: darkModeStyle.title,\n      children: timer.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CircleTxtBtns, \"bMbOJkWci3Q5P0UcJX73chBItmY=\");\n\n_c = CircleTxtBtns;\nexport default CircleTxtBtns;\n\nvar _c;\n\n$RefreshReg$(_c, \"CircleTxtBtns\");","map":{"version":3,"sources":["/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Components/Buttons/CircleBtns_txt/CircleTxtBtns.js"],"names":["React","useEffect","useState","MaxConditon","Time","CircleTxtBtns","title","time","addTime","checked","t","darkMode","darkModeStyle","setDarkModeStyle","buttonStyles","timer","setTimer","setTime","parseFloat","max_condition","newTimeClass","c","incrementTime","time_wheel_hr","parseInt","localStorage","getItem","addtime"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,gDAAxB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,OAAO,qCAAP;;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,IAAT;AAAeC,EAAAA,OAAf;AAAwBC,EAAAA,OAAxB;AAAiCC,EAAAA;AAAjC,CAAD,KAAyC;AAAA;;AAC3D;AACA,QAAMC,QAAQ,GAAG,IAAjB;AACA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCX,QAAQ,CAAC;AAACY,IAAAA,YAAY,EAAE,oBAAf;AAAqCR,IAAAA,KAAK,EAAE;AAA5C,GAAD,CAAlD;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAC;AAACI,IAAAA,KAAK,EAAEA,KAAR;AAAeW,IAAAA,OAAO,EAAEC,UAAU,CAACX,IAAD;AAAlC,GAAD,CAAlC;AACH,QAAMY,aAAa,GAAG,IAAIhB,WAAJ,EAAtB;AACG,QAAMiB,YAAY,GAAG,IAAIhB,IAAJ,EAArB;AACA,MAAIiB,CAAC,GAAG,CAAR;;AACA,QAAMC,aAAa,GAAG,MAAM;AACxB,UAAMC,aAAa,GAAGC,QAAQ,CAACC,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAD,CAA9B;;AACA,QAAGpB,KAAK,IAAI,KAAT,IAAkBmB,YAAY,CAACC,OAAb,CAAqB,cAArB,KAAwC,GAA7D,EAAiE;AAC7DlB,MAAAA,OAAO,CAAC,KAAK,MAAN,CAAP;AACH;;AACD,QAAGF,KAAK,IAAG,KAAR,IAAiBmB,YAAY,CAACC,OAAb,CAAqB,oBAArB,KAA8C,IAA/D,IAAuEH,aAAa,GAAG,CAA1F,EAA4F;AACxFI,MAAAA,OAAO;AACV,KAFD,MAII;AACAnB,MAAAA,OAAO,CAACO,KAAK,CAACE,OAAP,CAAP;AACH;AAEJ,GAbD;;AAcAhB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIU,QAAQ,IAAI,IAAZ,IAAoBA,QAAQ,IAAI,GAApC,EAAyC;AACrCE,MAAAA,gBAAgB,CAAC;AACbC,QAAAA,YAAY,EAAE,yBADD;AAEbR,QAAAA,KAAK,EAAE;AAFM,OAAD,CAAhB;AAIH;;AACD,QAAIK,QAAQ,GAAG,IAAX,IAAmBA,QAAQ,GAAG,GAAlC,EAAuC;AACnCE,MAAAA,gBAAgB,CAAC;AACbC,QAAAA,YAAY,EAAE,oBADD;AAEbR,QAAAA,KAAK,EAAE;AAFM,OAAD,CAAhB;AAIH;AACJ,GAbQ,EAaN,EAbM,CAAT;AAgBA,sBACI;AAAK,IAAA,SAAS,EAAG,GAAEM,aAAa,CAACE,YAAa,gBAA9C;AAA+D,IAAA,OAAO,EAAEQ,aAAxE;AAAA,2BACI;AAAM,MAAA,SAAS,EAAEV,aAAa,CAACN,KAA/B;AAAA,gBAAuCS,KAAK,CAACT;AAA7C;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CA3CD;;GAAMD,a;;KAAAA,a;AA6CN,eAAeA,aAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport MaxConditon from '../../../Components/max_selection/MaxSelection'\nimport Time from '../../Timer/Time'\nimport '../CircleBtns_txt/CircleBtnstxt.css'\n\nconst CircleTxtBtns = ({ title, time, addTime, checked, t}) => {\n    // const {darkMode} = useContext(PaymentContext)\n    const darkMode = 1800\n    const [darkModeStyle, setDarkModeStyle] = useState({buttonStyles: 'global_circle_btns', title: 'title'})\n    const [timer, setTimer] = useState({title: title, setTime: parseFloat(time)})\n\tconst max_condition = new MaxConditon()\n    const newTimeClass = new Time()\n    var c = 0\n    const incrementTime = () => {\n        const time_wheel_hr = parseInt(localStorage.getItem('_time_btn_hr'))\n        if(title == 'Max' && localStorage.getItem('_time_btn_hr') == '6'){ \n            addTime(12 * 0.0417)\n        }\n        if(title =='Max' && localStorage.getItem('_time_btn_meridian') == 'pm' && time_wheel_hr < 6){ \n            addtime\n        }\n        \n        else{\n            addTime(timer.setTime)\n        }\n        \n    }\n    useEffect(() => {\n        if (darkMode >= 1800 || darkMode <= 600) {\n            setDarkModeStyle({\n                buttonStyles: 'global_circle_btns_dark',\n                title: 'title_dark'\n            })\n        }\n        if (darkMode < 1800 || darkMode > 600) {\n            setDarkModeStyle({\n                buttonStyles: 'global_circle_btns',\n                title: 'title'\n            })\n        }\n    }, [])\n\n\n    return (\n        <div className={`${darkModeStyle.buttonStyles} content-align`} onClick={incrementTime}>\n            <span className={darkModeStyle.title}>{timer.title}</span>\n        </div>\n    )\n}\n\nexport default CircleTxtBtns;"]},"metadata":{},"sourceType":"module"}