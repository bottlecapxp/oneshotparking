{"ast":null,"code":"var _jsxFileName = \"/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Components/Buttons/CircleBtns_txt/CircleTxtBtns.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport '../CircleBtns_txt/CircleBtnstxt.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CircleTxtBtns = ({\n  title,\n  time,\n  addTime,\n  commit\n}) => {\n  _s();\n\n  // const {darkMode} = useContext(PaymentContext)\n  const darkMode = 1800;\n  const [darkModeStyle, setDarkModeStyle] = useState({\n    buttonStyles: 'global_circle_btns',\n    title: 'title'\n  });\n  const [timer, setTimer] = useState({\n    title: title,\n    setTime: parseFloat(time)\n  });\n  const date = new Date();\n  const hour = date.getHours();\n  const limit = 18;\n  var initial_max_value = 0;\n\n  const incrementTime = () => {\n    addTime(timer.setTime, commit);\n  };\n\n  useEffect(() => {\n    if (darkMode >= 1800 || darkMode <= 600) {\n      setDarkModeStyle({\n        buttonStyles: 'global_circle_btns_dark',\n        title: 'title_dark'\n      });\n    }\n\n    if (darkMode < 1800 || darkMode > 600) {\n      setDarkModeStyle({\n        buttonStyles: 'global_circle_btns',\n        title: 'title'\n      });\n    }\n\n    if (initial_max_value == 0 && time == 0) {\n      switch (hour) {\n        case hour < limit && hour > 6 ? hour : '':\n          const remaining_time = limit - hour;\n          setTimer({ ...timer,\n            setTime: `0.0${remaining_time}`\n          });\n          localStorage.setItem('max', 1);\n          break;\n\n        case hour > limit && hour < 24 ? hour : '':\n          const rem_time = 24 - hour + 6;\n          setTimer({ ...timer,\n            setTime: `0.0${rem_time}`\n          }); // need to set condition for when # reaach above 9      \n\n          localStorage.setItem('max', 1);\n          break;\n\n        case hour < 6 ? hour : '':\n          const rem_hr = 6 - hour;\n          setTimer({ ...timer,\n            setTime: `0.0${rem_hr}`\n          });\n          localStorage.setItem('max', 1);\n          break;\n      }\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${darkModeStyle.buttonStyles} content-align`,\n    onClick: incrementTime,\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      className: darkModeStyle.title,\n      children: timer.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CircleTxtBtns, \"bMbOJkWci3Q5P0UcJX73chBItmY=\");\n\n_c = CircleTxtBtns;\nexport default CircleTxtBtns;\n\nvar _c;\n\n$RefreshReg$(_c, \"CircleTxtBtns\");","map":{"version":3,"sources":["/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Components/Buttons/CircleBtns_txt/CircleTxtBtns.js"],"names":["React","useEffect","useState","CircleTxtBtns","title","time","addTime","commit","darkMode","darkModeStyle","setDarkModeStyle","buttonStyles","timer","setTimer","setTime","parseFloat","date","Date","hour","getHours","limit","initial_max_value","incrementTime","remaining_time","localStorage","setItem","rem_time","rem_hr"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport '../CircleBtns_txt/CircleBtnstxt.css'\n\nconst CircleTxtBtns = ({ title, time, addTime, commit }) => {\n    // const {darkMode} = useContext(PaymentContext)\n    const darkMode = 1800\n    const [darkModeStyle, setDarkModeStyle] = useState({buttonStyles: 'global_circle_btns', title: 'title'})\n    const [timer, setTimer] = useState({title: title, setTime: parseFloat(time)})\n    const date = new Date()\n    const hour = date.getHours()\n    const limit = 18\n    var initial_max_value = 0\n\n    const incrementTime = () => {\n        addTime(timer.setTime, commit)\n    }\n\n    useEffect(() => {\n        if (darkMode >= 1800 || darkMode <= 600) {\n            setDarkModeStyle({\n                buttonStyles: 'global_circle_btns_dark',\n                title: 'title_dark'\n            })\n        }\n        if (darkMode < 1800 || darkMode > 600) {\n            setDarkModeStyle({\n                buttonStyles: 'global_circle_btns',\n                title: 'title'\n            })\n        }\n\n        \n        if (initial_max_value == 0 && time == 0) {\n            switch (hour) {\n                case (hour < limit && hour > 6 ? hour : ''):\n                    const remaining_time = limit - hour\n                    setTimer({...timer, setTime: `0.0${remaining_time}`})\n                    localStorage.setItem('max', 1)\n                break;\n\n                case (hour > limit && hour < 24?hour:''): \n                    const rem_time =(24 - hour) + 6\n                    setTimer({...timer, setTime: `0.0${rem_time}`}) // need to set condition for when # reaach above 9      \n                    localStorage.setItem('max', 1)        \n                break;\n\n                case (hour < 6? hour : ''): \n                const rem_hr = 6 - hour\n                setTimer({...timer, setTime: `0.0${rem_hr}`})                \n                localStorage.setItem('max', 1)\n                break;\n            }\n        }\n\n\n\n\n\n    }, [])\n\n\n    return (\n        <div className={`${darkModeStyle.buttonStyles} content-align`} onClick={incrementTime}>\n            <span className={darkModeStyle.title}>{timer.title}</span>\n        </div>\n    )\n}\n\nexport default CircleTxtBtns;"]},"metadata":{},"sourceType":"module"}