{"ast":null,"code":"var _jsxFileName = \"/Users/bottlecapmedia/Desktop/OneShot Parking/src/Pages/CountDown.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CountDown = () => {\n  _s();\n\n  const getSetTime = localStorage.getItem('timeStore');\n  const [countDown, setCountDown] = useState({\n    hours: Math.round(getSetTime / 100),\n    mins: getSetTime % 100,\n    secs: 60,\n    ms: 1000\n  }); // Set mutable variables for updates\n\n  var updated_hours = countDown.hours,\n      updated_mins = countDown.mins,\n      updated_secs = countDown.secs,\n      updated_ms = countDown.ms;\n  useEffect(() => {\n    setInterval(() => {\n      setCountDown({\n        hours: updated_hours,\n        mins: updated_mins,\n        secs: updated_secs,\n        ms: updated_ms\n      });\n    }, 1000);\n  }, []);\n\n  const run = () => {\n    updated_secs--;\n\n    if (updated_ms === 0) {\n      updated_secs--;\n      updated_ms = 100;\n    }\n\n    if (updated_secs === 0) {\n      updated_mins--;\n      updated_secs = 60;\n    }\n\n    if (updated_mins === 0) {\n      updated_hours--;\n      updated_mins = 60;\n    }\n\n    if (updated_hours === 0) {\n      updated_hours = '00';\n    } // console.log(updated_secs)\n\n\n    setTimeout(run, 1000);\n  };\n\n  run(); // setInterval(run, 1000)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"global_container choose_lot\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"countdown_digits_holder\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Remaing Time\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"countdown_adjustment\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"countdown_digits\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"digits\",\n            children: `${countDown.hours}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"digits\",\n            children: `${countDown.mins}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"digits\",\n            children: [`${countDown.secs}`, \"s\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Button\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CountDown, \"2ox60g95Ir+ZucZY3lUQDBq9+Y8=\");\n\n_c = CountDown;\n\nvar _c;\n\n$RefreshReg$(_c, \"CountDown\");","map":{"version":3,"sources":["/Users/bottlecapmedia/Desktop/OneShot Parking/src/Pages/CountDown.js"],"names":["React","useState","useContext","useEffect","CountDown","getSetTime","localStorage","getItem","countDown","setCountDown","hours","Math","round","mins","secs","ms","updated_hours","updated_mins","updated_secs","updated_ms","setInterval","run","setTimeout"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;;AAIA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAC3B,QAAMC,UAAU,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAnB;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC;AACvCS,IAAAA,KAAK,EAAEC,IAAI,CAACC,KAAL,CAAWP,UAAU,GAAG,GAAxB,CADgC;AAEvCQ,IAAAA,IAAI,EAAER,UAAU,GAAG,GAFoB;AAGvCS,IAAAA,IAAI,EAAE,EAHiC;AAIvCC,IAAAA,EAAE,EAAE;AAJmC,GAAD,CAA1C,CAF2B,CAU3B;;AACA,MAAIC,aAAa,GAAGR,SAAS,CAACE,KAA9B;AAAA,MAAqCO,YAAY,GAAGT,SAAS,CAACK,IAA9D;AAAA,MAAqEK,YAAY,GAAGV,SAAS,CAACM,IAA9F;AAAA,MAAoGK,UAAU,GAAGX,SAAS,CAACO,EAA3H;AAEAZ,EAAAA,SAAS,CAAC,MAAI;AACViB,IAAAA,WAAW,CAAC,MAAI;AACZX,MAAAA,YAAY,CAAC;AACTC,QAAAA,KAAK,EAAEM,aADE;AAETH,QAAAA,IAAI,EAAEI,YAFG;AAGTH,QAAAA,IAAI,EAAEI,YAHG;AAITH,QAAAA,EAAE,EAAEI;AAJK,OAAD,CAAZ;AAMH,KAPU,EAOR,IAPQ,CAAX;AAUH,GAXQ,EAWP,EAXO,CAAT;;AAcA,QAAME,GAAG,GAAG,MAAM;AACdH,IAAAA,YAAY;;AACZ,QAAGC,UAAU,KAAK,CAAlB,EAAoB;AAChBD,MAAAA,YAAY;AACZC,MAAAA,UAAU,GAAG,GAAb;AACH;;AACD,QAAGD,YAAY,KAAK,CAApB,EAAsB;AAClBD,MAAAA,YAAY;AACZC,MAAAA,YAAY,GAAG,EAAf;AACH;;AACD,QAAGD,YAAY,KAAK,CAApB,EAAsB;AAClBD,MAAAA,aAAa;AACbC,MAAAA,YAAY,GAAG,EAAf;AACH;;AAED,QAAGD,aAAa,KAAK,CAArB,EAAuB;AACnBA,MAAAA,aAAa,GAAG,IAAhB;AACH,KAjBa,CAkBd;;;AACAM,IAAAA,UAAU,CAACD,GAAD,EAAM,IAAN,CAAV;AACH,GApBD;;AAqBJA,EAAAA,GAAG,GAhD4B,CAiD3B;;AAGA,sBACI;AAAK,IAAA,SAAS,EAAC,6BAAf;AAAA,2BAEI;AAAK,MAAA,SAAS,EAAC,yBAAf;AAAA,8BAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAII;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA,+BACA;AAAK,UAAA,SAAS,EAAC,kBAAf;AAAA,kCACI;AAAM,YAAA,SAAS,EAAC,QAAhB;AAAA,sBAA2B,GAAEb,SAAS,CAACE,KAAM;AAA7C;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAM,YAAA,SAAS,EAAC,QAAhB;AAAA,sBAA2B,GAAEF,SAAS,CAACK,IAAK;AAA5C;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAGI;AAAM,YAAA,SAAS,EAAC,QAAhB;AAAA,uBAA4B,GAAEL,SAAS,CAACM,IAAK,EAA7C;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cAJJ,eAWJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAXI;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAoBH,CAxEM;;GAAMV,S;;KAAAA,S","sourcesContent":["import React, { useState, useContext, useEffect } from 'react'\n\n\n\nexport const CountDown = () => {\n    const getSetTime = localStorage.getItem('timeStore')\n    const [countDown, setCountDown] = useState({\n        hours: Math.round(getSetTime / 100),\n        mins: getSetTime % 100,\n        secs: 60,\n        ms: 1000\n    })\n\n\n    // Set mutable variables for updates\n    var updated_hours = countDown.hours, updated_mins = countDown.mins,  updated_secs = countDown.secs, updated_ms = countDown.ms\n\n    useEffect(()=>{\n        setInterval(()=>{\n            setCountDown({\n                hours: updated_hours,\n                mins: updated_mins, \n                secs: updated_secs,\n                ms: updated_ms\n            })\n        }, 1000)\n\n\n    },[])\n\n\n    const run = () => { \n        updated_secs--\n        if(updated_ms === 0){\n            updated_secs--\n            updated_ms = 100\n        }\n        if(updated_secs === 0){\n            updated_mins--\n            updated_secs = 60\n        }\n        if(updated_mins === 0){\n            updated_hours--\n            updated_mins = 60\n        }\n        \n        if(updated_hours === 0){\n            updated_hours = '00'\n        }\n        // console.log(updated_secs)\n        setTimeout(run, 1000)\n    }\nrun()\n    // setInterval(run, 1000)\n\n    \n    return (\n        <div className='global_container choose_lot'>\n\n            <div className='countdown_digits_holder'>\n\n                <span>Remaing Time</span>\n\n                <div className='countdown_adjustment'>\n                <div className='countdown_digits'>\n                    <span className='digits'>{`${countDown.hours}`}</span>\n                    <span className='digits'>{`${countDown.mins}`}</span>\n                    <span className='digits' >{`${countDown.secs}`}s</span>\n                </div>\n                </div>\n        <div>Button</div>\n        </div>\n            {/* Count down time */}\n            {/* Buttone to Extend time here */}\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}