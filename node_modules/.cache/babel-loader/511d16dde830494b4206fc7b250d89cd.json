{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport { PaymentContext } from '../../../Context/PaymentContext';\n\nconst PaymentGenerator = (hours, minutes) => {\n  _s();\n\n  const {\n    setBilling,\n    setTime,\n    setNightTime\n  } = useContext(PaymentContext);\n  const timeDate = new Date(); // `${timeDate.getHours()}${timeDate.getMinutes()}`\n  // What is the rate per hour? (R$4)\n\n  const night_hourly_rate = 8;\n  const hourly_rate = 4; // what is the rate per 15mins (R$1)\n\n  const night_minute_rate = 2;\n  const minute_rate = 1;\n  var currentTime = parseInt(`${timeDate.getHours()}${timeDate.getMinutes()}`);\n  var setLimit = parseInt(`${hours}${minutes}`);\n  var accumalatedTime = currentTime + setLimit;\n  var minuteCheck = accumalatedTime % 100;\n  var hourCheck = Math.floor(accumalatedTime / 100);\n  var newMinutes;\n  var newHours;\n  var night_time;\n  console.log(accumalatedTime / 100);\n\n  if (hourCheck > 23) {\n    hourCheck = hourCheck - 24;\n  }\n\n  if (minuteCheck >= 60) {\n    newMinutes = minuteCheck - 60;\n    newHours = Math.floor(hourCheck + 1);\n    accumalatedTime = parseInt(`${newHours}${newMinutes}`);\n\n    if (newMinutes < 10) {\n      accumalatedTime = parseInt(`${newHours}0${newMinutes}`);\n    }\n\n    if (newMinutes === 0) {\n      accumalatedTime = parseInt(`${newHours}00`);\n    }\n  } else {\n    accumalatedTime = currentTime + setLimit;\n  } // To calculate rate per hour (if hour is > 0 then hour times rate )\n  //  To calculate rate per minute (minute / 15 * rate per minute)\n\n\n  useEffect(() => {\n    if (accumalatedTime > 1800) {\n      const night_overlap_time = accumalatedTime - 1800;\n\n      if (night_overlap_time < 15) {\n        night_time = 15;\n      } else {\n        night_time = (accumalatedTime - 1800) / 15;\n      }\n\n      console.log(`Overlap time: ${night_time}`);\n    } else {}\n\n    console.log(`Finish at: ${accumalatedTime}`); // if currentHour  is > 6 then setNightTIme = current_time - \n\n    setBilling(hours * hourly_rate + minutes / 15 * minute_rate); // Set Selected time here for tracking and to be pushed to local storage by confirm BTN\n\n    setTime(parseInt(`${hours}${minutes}`));\n  }, [hours, minutes]);\n};\n\n_s(PaymentGenerator, \"sqw8X0J8Cs8y+F+TK1eDLeTO8qE=\");\n\n_c = PaymentGenerator;\nexport default PaymentGenerator;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentGenerator\");","map":{"version":3,"sources":["/Users/bottlecapmedia/Desktop/OneShot Parking/src/Components/Financials/Calculator/PaymentGenerator.js"],"names":["React","useEffect","useState","useContext","PaymentContext","PaymentGenerator","hours","minutes","setBilling","setTime","setNightTime","timeDate","Date","night_hourly_rate","hourly_rate","night_minute_rate","minute_rate","currentTime","parseInt","getHours","getMinutes","setLimit","accumalatedTime","minuteCheck","hourCheck","Math","floor","newMinutes","newHours","night_time","console","log","night_overlap_time"],"mappings":"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","sourcesContent":["import React, { useEffect, useState,useContext } from 'react'\nimport { PaymentContext } from '../../../Context/PaymentContext'\n\n\n\n\n\n\nconst PaymentGenerator = (hours, minutes) => {\n    const {setBilling, setTime, setNightTime} = useContext(PaymentContext)\n    const timeDate = new Date()\n\n    // `${timeDate.getHours()}${timeDate.getMinutes()}`\n    // What is the rate per hour? (R$4)\n    const night_hourly_rate = 8\n    const hourly_rate = 4\n    // what is the rate per 15mins (R$1)\n    const night_minute_rate = 2\n    const minute_rate = 1\n\n    var currentTime = parseInt(`${timeDate.getHours()}${timeDate.getMinutes()}`)\n    var setLimit = parseInt(`${hours}${minutes}`)\n    var accumalatedTime = currentTime + setLimit\n    var minuteCheck = accumalatedTime % 100\n    var hourCheck =  Math.floor(accumalatedTime / 100)\n    var newMinutes\n    var newHours\n    var night_time\n\n    console.log(accumalatedTime / 100)\n\n\n    if(hourCheck > 23){\n        hourCheck = hourCheck - 24\n    }\n\n    if( minuteCheck >= 60){\n        newMinutes = minuteCheck - 60\n        newHours = Math.floor((hourCheck) + 1)\n        accumalatedTime = parseInt(`${newHours}${newMinutes}`)\n    if(newMinutes < 10){\n            accumalatedTime = parseInt(`${newHours}0${newMinutes}`)\n    }\n    if(newMinutes === 0){\n        accumalatedTime = parseInt(`${newHours}00`)\n    }}else {\n        accumalatedTime = currentTime + setLimit\n    }\n\n\n    \n    // To calculate rate per hour (if hour is > 0 then hour times rate )\n    //  To calculate rate per minute (minute / 15 * rate per minute)\n    useEffect(()=>{\n        if(accumalatedTime > 1800){\n            const night_overlap_time = accumalatedTime - 1800\n            if(night_overlap_time < 15){\n                night_time = 15\n            }else{\n                night_time = (accumalatedTime - 1800) / 15\n            }\n            \n\n            console.log(`Overlap time: ${night_time}`)\n        }\n        else{\n           \n        }\n        console.log(`Finish at: ${accumalatedTime}`)\n        \n            \n        // if currentHour  is > 6 then setNightTIme = current_time - \n\n        setBilling(hours * hourly_rate + (minutes / 15) * minute_rate)\n        // Set Selected time here for tracking and to be pushed to local storage by confirm BTN\n        setTime(parseInt(`${hours}${minutes}`))\n    }, [hours, minutes])\n\n}\n\n\n\nexport default PaymentGenerator;\n \n\n"]},"metadata":{},"sourceType":"module"}