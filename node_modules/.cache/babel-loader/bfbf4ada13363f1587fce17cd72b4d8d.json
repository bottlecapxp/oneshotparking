{"ast":null,"code":"import { Component } from 'react';\nimport PaymentGenerator from '../Financials/Calculator/PaymentGenerator';\nimport Tick from '../../Assets/tick.mp3';\nimport { Howl, Howler } from 'howler'; // const pGenerator = new PaymentGenerator()\n\nclass TimerLogic extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setValue = valFunc => {\n      this.value = valFunc;\n    };\n\n    this.stepValue = v => {\n      if (v > 1) {\n        return 1;\n      } else {\n        return Math.round(v * 24) / 24;\n      }\n    };\n\n    this.scrollTime = stepVal => {\n      var givenValue = Math.round(stepVal * 24); // minutes is the stepVal % by 0.0417\n\n      var convert_to_stepVal = givenValue * 0.041666666666666664;\n      const min_calc = Math.round((stepVal - convert_to_stepVal) / 0.000695);\n\n      if (min_calc < 0) {\n        this.stagedMinutes = -(-60 - min_calc);\n      } else if (min_calc == -1 || min_calc == 1) {\n        this.stagedMinutes = 0;\n      } else {\n        this.stagedMinutes = min_calc < 10 && min_calc > 0 ? `0${min_calc}` : min_calc;\n      } // this.stagedMinutes = min_calc < 0? -(-60 -min_calc) : min_calc //having issues using the % sign. Possibly because we're trying to round a fraction of a fraction String seems to work for now. not the ideal for long term\n      // console.log(convert_to_stepVal)\n      // console.log(stepVal)\n\n\n      this.hours = parseInt(stepVal / 0.041666666666666664) == 0 ? parseInt(this.stagedMinutes / 10) : parseInt(stepVal / 0.041666666666666664); // console.log(`hours: ${this.hours}`)\n      // console.log(`minutes: ${min_calc}`)\n      // console.log(`stepVal: ${stepVal}`)\n\n      PaymentGenerator(this.hours < 0 ? 0 : this.hours, this.stagedMinutes); //Sound generator      \n\n      const sound = new Howl({\n        src: [Tick],\n        volume: 0.6\n      });\n      sound.play(); // console.log(min_calc)\n\n      return parseInt(`${this.hours}${this.stagedMinutes <= 0 ? '00' : this.stagedMinutes}`);\n    };\n\n    this.hour = 0;\n    this.stagedMinutes = 0;\n    this.value = 0.0;\n  }\n\n} // End of Class\n\n\nexport default TimerLogic; // if(min_calc < 0){ \n//     this.stagedMinutes = -(-60 -min_calc)\n// }else if(min_calc == -1){\n//     this.stagedMinutes = 0\n// }\n// else{\n//     this.stagedMinutes = min_calc\n// }\n// minutes =  Math.round(6000 * givenValue / 100)\n// // get hours\n// if (minutes > 60){\n//     this.hours = Math.floor(minutes / 100)\n// } else if(minutes / 60 === 1){\n//     this.hours = 1\n// }else{\n//     this.hours = 0\n// }\n// // First Check if you're at a full hour\n// if(minutes === 60 || (minutes / 60) === this.hours){\n//     this.stagedMinutes = '00'\n// }\n// // Else run algorithm\n// else{\n//  this.stagedMinutes = (minutes % 60 % 100)\n// }\n// var sound = new Howl({\n//     src: [Tick], \n//     volume: 0.7\n// })","map":{"version":3,"sources":["/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Components/Timer/TimerLogic.js"],"names":["Component","PaymentGenerator","Tick","Howl","Howler","TimerLogic","constructor","props","setValue","valFunc","value","stepValue","v","Math","round","scrollTime","stepVal","givenValue","convert_to_stepVal","min_calc","stagedMinutes","hours","parseInt","sound","src","volume","play","hour"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,gBAAP,MAA6B,2CAA7B;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,QAA7B,C,CAEA;;AAEA,MAAMC,UAAN,SAAyBL,SAAzB,CAAmC;AAC/BM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAQnBC,QARmB,GAQRC,OAAO,IAAI;AAClB,WAAKC,KAAL,GAAaD,OAAb;AACH,KAVkB;;AAAA,SAYnBE,SAZmB,GAYPC,CAAC,IAAI;AACb,UAAIA,CAAC,GAAG,CAAR,EAAW;AACP,eAAO,CAAP;AACH,OAFD,MAEO;AACH,eAAOC,IAAI,CAACC,KAAL,CAAWF,CAAC,GAAG,EAAf,IAAqB,EAA5B;AACH;AACJ,KAlBkB;;AAAA,SAqBnBG,UArBmB,GAqBNC,OAAO,IAAI;AACpB,UAAIC,UAAU,GAAGJ,IAAI,CAACC,KAAL,CAAWE,OAAO,GAAG,EAArB,CAAjB,CADoB,CAEpB;;AACA,UAAIE,kBAAkB,GAAGD,UAAU,GAAG,oBAAtC;AACA,YAAME,QAAQ,GAAGN,IAAI,CAACC,KAAL,CAAW,CAACE,OAAO,GAAGE,kBAAX,IAAiC,QAA5C,CAAjB;;AACA,UAAGC,QAAQ,GAAG,CAAd,EAAgB;AACZ,aAAKC,aAAL,GAAqB,EAAE,CAAC,EAAD,GAAKD,QAAP,CAArB;AACH,OAFD,MAEM,IAAGA,QAAQ,IAAI,CAAC,CAAb,IAAkBA,QAAQ,IAAI,CAAjC,EAAmC;AACrC,aAAKC,aAAL,GAAqB,CAArB;AACH,OAFK,MAGF;AACA,aAAKA,aAAL,GAAsBD,QAAQ,GAAG,EAAX,IAAiBA,QAAQ,GAAG,CAA5B,GAA+B,IAAGA,QAAS,EAA3C,GAA8CA,QAApE;AACH,OAZmB,CAepB;AACA;AACA;;;AACA,WAAKE,KAAL,GAAcC,QAAQ,CAACN,OAAO,GAAG,oBAAX,CAAR,IAA4C,CAA5C,GAA+CM,QAAQ,CAAC,KAAKF,aAAL,GAAqB,EAAtB,CAAvD,GAAiFE,QAAQ,CAACN,OAAO,GAAG,oBAAX,CAAvG,CAlBoB,CAmBpB;AACA;AACA;;AACAf,MAAAA,gBAAgB,CAAC,KAAKoB,KAAL,GAAa,CAAb,GAAe,CAAf,GAAiB,KAAKA,KAAvB,EAA8B,KAAKD,aAAnC,CAAhB,CAtBoB,CAwBpB;;AACA,YAAMG,KAAK,GAAG,IAAIpB,IAAJ,CAAS;AACnBqB,QAAAA,GAAG,EAAE,CAACtB,IAAD,CADc;AAEnBuB,QAAAA,MAAM,EAAE;AAFW,OAAT,CAAd;AAIAF,MAAAA,KAAK,CAACG,IAAN,GA7BoB,CA8BpB;;AACA,aACIJ,QAAQ,CAAE,GAAE,KAAKD,KAAM,GAAE,KAAKD,aAAL,IAAsB,CAAtB,GAA0B,IAA1B,GAAiC,KAAKA,aAAc,EAArE,CADZ;AAIH,KAxDkB;;AAEf,SAAKO,IAAL,GAAY,CAAZ;AACA,SAAKP,aAAL,GAAqB,CAArB;AACA,SAAKV,KAAL,GAAa,GAAb;AACH;;AAN8B,C,CAqEjC;;;AAEF,eAAeL,UAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEQ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGR;AACA;AACA;AACA","sourcesContent":["import { Component } from 'react'\nimport PaymentGenerator from '../Financials/Calculator/PaymentGenerator'\nimport Tick from '../../Assets/tick.mp3'\nimport { Howl, Howler } from 'howler'\n\n// const pGenerator = new PaymentGenerator()\n\nclass TimerLogic extends Component {\n    constructor(props) {\n        super(props)\n        this.hour = 0\n        this.stagedMinutes = 0\n        this.value = 0.0\n    }\n\n\n    setValue = valFunc => {\n        this.value = valFunc\n    }\n\n    stepValue = v => {\n        if (v > 1) {\n            return 1\n        } else {\n            return Math.round(v * 24) / 24\n        }\n    }\n\n\n    scrollTime = stepVal => {\n        var givenValue = Math.round(stepVal * 24)\n        // minutes is the stepVal % by 0.0417\n        var convert_to_stepVal = givenValue * 0.041666666666666664\n        const min_calc = Math.round((stepVal - convert_to_stepVal) / 0.000695)\n        if(min_calc < 0){ \n            this.stagedMinutes = -(-60 -min_calc)\n        }else if(min_calc == -1 || min_calc == 1){\n            this.stagedMinutes = 0\n        }\n        else{\n            this.stagedMinutes = (min_calc < 10 && min_calc > 0?`0${min_calc}`: min_calc )\n        }\n       \n\n        // this.stagedMinutes = min_calc < 0? -(-60 -min_calc) : min_calc //having issues using the % sign. Possibly because we're trying to round a fraction of a fraction String seems to work for now. not the ideal for long term\n        // console.log(convert_to_stepVal)\n        // console.log(stepVal)\n        this.hours = (parseInt(stepVal / 0.041666666666666664) == 0? parseInt(this.stagedMinutes / 10):parseInt(stepVal / 0.041666666666666664) )\n        // console.log(`hours: ${this.hours}`)\n        // console.log(`minutes: ${min_calc}`)\n        // console.log(`stepVal: ${stepVal}`)\n        PaymentGenerator(this.hours < 0?0:this.hours, this.stagedMinutes)\n\n        //Sound generator      \n        const sound = new Howl({\n            src: [Tick],\n            volume: 0.6\n        })\n        sound.play()\n        // console.log(min_calc)\n        return (\n            parseInt(`${this.hours}${this.stagedMinutes <= 0 ? '00' : this.stagedMinutes}`)\n        )\n\n    }\n\n\n\n\n\n\n\n\n\n\n\n} // End of Class\n\nexport default TimerLogic\n\n// if(min_calc < 0){ \n//     this.stagedMinutes = -(-60 -min_calc)\n// }else if(min_calc == -1){\n//     this.stagedMinutes = 0\n// }\n// else{\n//     this.stagedMinutes = min_calc\n// }\n\n\n// minutes =  Math.round(6000 * givenValue / 100)\n\n        // // get hours\n        // if (minutes > 60){\n        //     this.hours = Math.floor(minutes / 100)\n        // } else if(minutes / 60 === 1){\n        //     this.hours = 1\n        // }else{\n        //     this.hours = 0\n        // }\n        // // First Check if you're at a full hour\n        // if(minutes === 60 || (minutes / 60) === this.hours){\n        //     this.stagedMinutes = '00'\n        // }\n        // // Else run algorithm\n        // else{\n        //  this.stagedMinutes = (minutes % 60 % 100)\n        // }\n\n\n// var sound = new Howl({\n//     src: [Tick], \n//     volume: 0.7\n// })"]},"metadata":{},"sourceType":"module"}