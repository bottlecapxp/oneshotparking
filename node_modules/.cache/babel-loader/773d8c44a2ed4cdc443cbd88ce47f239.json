{"ast":null,"code":"var _jsxFileName = \"/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Components/Timer/Timer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect, useCallback } from \"react\";\nimport { PaymentContext } from '../../Context/PaymentContext';\nimport \"../Timer/Timer.css\";\nimport Tick from './../../Assets/tick.mp3';\nimport { Howl, Howler } from 'howler';\nimport Time from './Time';\nimport { CircularInput, CircularTrack, CircularProgress, CircularThumb } from \"react-circular-input\";\nimport TimerLogic from \"./TimerLogic\";\nimport { useMemo } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Timer = props => {\n  _s();\n\n  // const today = new Date();\n  const timerLogic = new TimerLogic();\n  const time_obj = new Time();\n  const {\n    totalbilling,\n    dayTime,\n    dayTimeBilling,\n    nightTime,\n    nightTimeBilling,\n    setExpiredTime,\n    setStartTime,\n    darkMode\n  } = useContext(PaymentContext); // const pGenerator = new PaymentGenerator();\n\n  const [value, setValue] = useState(null);\n  const [validateDayTime, setDayTimeValidation] = useState();\n  const [validateNightTime, setNightTimeValidation] = useState();\n  const [darkModeStyle, setDarkModeStyle] = useState({\n    circleContainer: 'timeInfo',\n    costAmount: 'cost_amount',\n    circularTrack: '#eee'\n  });\n  const [maxParking, setMaxParking] = useState({\n    day: 3,\n    night: 6\n  });\n  var hours = Math.floor(timerLogic.scrollTime(value) / 10);\n  console.log(`givenVal ${Math.floor(timerLogic.scrollTime(value))}`);\n  var minutes = 0;\n  const date = new Date();\n  const get_current_mins = date.getMinutes();\n  const rem_minutes = 60 - get_current_mins; //  We're going to check for Max trigger\n  // const max = props.checked\n  // if(max == 'true'){\n  // if(rem_minutes > 0){ \n  // \thours = hours - 1\n  // \tminutes = 60 - get_current_mins\n  // \tif(hours < 0){ \n  // \t\t\thours = 0\n  // \t\t}\n  // \t}\n  // }\n  // const time_unit_ = ['am', 'pm']\n  // var timeUnit;\n  // var start_time_unit; \n\n  const currentTime = new Date();\n  var expiredMinutes = parseInt(currentTime.getMinutes() + minutes);\n  var expiredHours = currentTime.getHours() + hours;\n  var timer_expired_hours = currentTime.getHours() + hours; // FULL TIME CALCULATIONS.\n\n  var expTime, expTimeInSecs;\n  expTime = time_obj.genrate_expired_time(hours); // const limits = [18, 24, 6]\n  // if(hours == 5){\n  // \tconst date = new Date()\n  // \t const currentHours = date.getHours()\n  // \t const currentMins = date.getMinutes()\n  // \t const currentTime = (currentHours * 3600) + (currentMins * 60)\n  // \t var countdown_mins = 0\n  // \t const cMins = 60 - currentMins\n  // \t var countdown_hours = limits[0] - currentHours\n  // \tif(currentHours > limits[2] && currentHours < limits[0]){ \n  // \t\t// let Calculate the countdown hours & mins \n  // \t\tif(currentMins != 0 || currentMins != '00'){ \n  // \t\t\tcountdown_hours = countdown_hours - 1\n  // \t\t\tcountdown_mins = cMins\n  // \t\t\t// currentTime in Seconds\n  // \t\t\tvar countdown_time = (countdown_hours * 3600) + (countdown_mins * 60)\n  // \t\t\tvar fulltime = currentTime + countdown_time\n  // \t\t\tvar fulltime_calc = fulltime / 3600\n  // \t\t\texpiredHours = (fulltime_calc > 12? fulltime_calc - 12: fulltime_calc )\n  // \t\t\texpiredMinutes = '00'\n  // \t\t} \n  // \t\tif(currentMins == 0 || currentMins == '00'){ \n  // \t\t\tvar countdown_time = (countdown_hours * 3600) + (countdown_mins * 60)\n  // \t\t\tvar fulltime = currentTime + countdown_time\n  // \t\t\tvar fulltime_calc = fulltime / 3600\n  // \t\t\texpiredHours = (fulltime_calc > 12? fulltime_calc - 12: fulltime_calc )\n  // \t\t}\n  // \t\t// Then let's introduce the remaining time. \n  // \t}\n  // }\n  // expTime = `${expiredHours}:${expiredMinutes}${timeUnit}`\n  // expTimeInSecs = (timer_expired_hours * 3600) + (expiredMinutes * 60)\n  // var startTime = `${currentTime.getHours()}:${currentTime.getMinutes() < 10? `0${currentTime.getMinutes()}`: currentTime.getMinutes() }${start_time_unit}`\n  // localStorage.setItem('expTimeInSecs', expTimeInSecs)\n  // localStorage.setItem('expTime', expTime)\n  // localStorage.setItem('total', totalbilling)\n  // Keeps track of time changes\n\n  var startTime = time_obj.start_time();\n  useEffect(() => {\n    // if(darkMode >= 1800 || darkMode <= 600){\n    // \t\tsetDarkModeStyle({\n    // \t\t\tcircleContainer: 'timeInfo_dark', \n    // \t\t\tcostAmount: 'cost_amount_dark', \n    // \t\t\tcircularTrack: '#1B242F'\n    // \t\t})\n    // \t}\n    if (dayTime == 0) {\n      setDayTimeValidation(true);\n    } else {\n      setDayTimeValidation(false);\n    }\n\n    if (nightTime == 0) {\n      setNightTimeValidation(true);\n    } // localStorage.setItem('startTime', startTime)\n\n\n    if (hours >= 24) {\n      return;\n    }\n\n    if (value == 0 && props.addTime == '-0.20') {\n      return;\n    } else {\n      setValue(value + props.addTime);\n    }\n\n    console.log(Math.round(value));\n  }, [props.addTime]); // setStartTime(startTime)\n  // setExpiredTime(expTime)\n\n  var test = 0;\n  const scroll_wheel_hr = parseInt(localStorage.getItem('_time_btn_hr'));\n  const scroll_wheel_meridian = localStorage.getItem('_time_btn_meridian');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"timer_container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer_holder\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: darkModeStyle.circleContainer,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"time_holder\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"set_time\",\n            style: {\n              marginTop: '10px'\n            },\n            children: \"Set Duration\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 6\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            id: \"time\",\n            children: `${hours}h:${minutes}m`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 6\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"set_time\",\n            style: {\n              marginTop: '10px'\n            },\n            children: \"Expires at\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 6\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"rate_\",\n            style: {\n              textAlign: 'center'\n            },\n            children: expTime\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 6\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(CircularInput, {\n        radius: 115,\n        value: value,\n        onChange: v => {\n          setValue(timerLogic.stepValue(v));\n        },\n        children: [/*#__PURE__*/_jsxDEV(CircularTrack, {\n          strokeWidth: 10,\n          stroke: darkModeStyle.circularTrack\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(CircularProgress, {\n          className: \"bar\",\n          stroke: \"#ff4f4f\",\n          strokeWidth: 12\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(CircularThumb, {\n          r: 15,\n          fill: \"#F0F0F3\",\n          stroke: \"#ff4f4f\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cost_holder\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: darkModeStyle.costAmount,\n        children: \"Total Cost: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 33\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"price\",\n        children: [\"$\", `${totalbilling}`]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 86\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Timer, \"aSDe/IqqN4ixt9Nb4JqN71TR6Xo=\");\n\n_c = Timer;\nexport default Timer; // if(scroll_wheel_meridian  == 'am' && scroll_wheel_hr < 6){\n// \tif(6 - date.getHours() >= maxParking.night){\n// \t\ttest = maxParking.night\n// \t}\n// \telse{\n// \t\ttest = null\n// \t}\n// }\n// if(scroll_wheel_meridian == 'am' && scroll_wheel_hr > 6 && scroll_wheel_hr < 12){\n// \tif((12 - date.getHours() + 6) >= maxParking.day){\n// \t\ttest = maxParking.day\n// \t}\n// \telse{\n// \t\ttest = null\n// \t}\n// }\n// if(scroll_wheel_meridian == 'pm' && scroll_wheel_hr < 6){\n// \tif(18 - date.getHours() >= maxParking.day){\n// \t\ttest = maxParking.day\n// \t}\n// \telse{\n// \t\ttest = null\n// \t}\n// }\n// if(scroll_wheel_meridian == 'pm' && scroll_wheel_hr > 6 && scroll_wheel_hr < 12){\n// \tif(30 - date.getHours() >= maxParking.night || 30 - (scroll_wheel_hr + 12) > maxParking.night){\n// \t\ttest = maxParking.night\n// \t}\n// \telse{\n// \t\ttest = null\n// \t}\n// }\n// (cMins < 10? `0${cMins}`: cMins)\n// timerLogic.scrollTime(timerLogic.stepValue(value))%100\n\n{\n  /* <p className='set_time'>Daily Rates</p> */\n}\n{\n  /* Rates Settings */\n}\n{\n  /* <div className='rate_container'>\n  <div className='daily_container day'>\n  \t<img id='sun' src={Day} alt='sun'></img>\n  \t<p className='rate_'>$4hr</p>\n  </div>\n  <div className='daily_container night'>\n  \t<img id='moon' src={Moon} alt='moon'></img>\n  \t<p className='rate_'>$6hr</p>\n  </div>\n  </div> */\n} // if(expiredHours == 24){\n// \thours = 12\n// \ttimeUnit = time_unit_[0]\n// }\n// if(expiredHours > 24){\n// \thours = hours - 24\n// \ttimeUnit = time_unit_[0]\n// }\n// if(expiredHours >= 12){\n// \ttimeUnit = time_unit_[1]\n// }\n// if(currentTime.getHours() >= 12){\n// \tcTimeUnit = time_unit_[1]\n// }else{\n// \tcTimeUnit = time_unit_[0]\n// }\n// if(expiredMinutes > 60){\n// \texpiredMinutes = expiredMinutes - 60\n// \texpiredHours = expiredHours + 1\n// }\n// if(expiredHours > 12){\n// \texpiredHours = expiredHours - 12 \n// \tif(expiredHours > 12 ){ \n// \t\texpiredHours = expiredHours - 12\n// \t}\n// }\n// if(minutes == 0){\n// \tminutes = '00'\n// }\n// DEPRECATED CODE - LIVES FOR 30 DAYS THEN DELETED\n// <div className='overlap_Cost'>\n// {/* Day rate */}\n// <div className='day_rate'>\n// \t<div className='info_holder dayRate_icon'>\n// \t<img id='sun' src={Day} alt='sun'></img>\n// \t</div>\n// \t<div id='hours_' className='info_holder dayRate_time'>{Math.floor(dayTime/100)}hrs : {Math.floor(dayTime%100)}mins</div>\n// \t<div id='cost_' className='info_holder dayRate_cost'>${dayTimeBilling}</div>\n// </div>\n// {/* Night Rate */}\n// <div className='night_rate'>\n// \t<div className='info_holder nightRate_icon'>\n// \t<img id='moon' src={Moon} alt='moon'></img>\n// \t</div>\n// \t<div id='hours_' className='info_holder dayRate_time'>{Math.floor(nightTime/100)}hrs : {Math.floor(nightTime%100)}mins</div>\n// \t<div id='cost_' className='info_holder dayRate_cost'>${nightTimeBilling}</div>\n// </div>\n// </div>\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"sources":["/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Components/Timer/Timer.js"],"names":["React","useContext","useState","useEffect","useCallback","PaymentContext","Tick","Howl","Howler","Time","CircularInput","CircularTrack","CircularProgress","CircularThumb","TimerLogic","useMemo","Timer","props","timerLogic","time_obj","totalbilling","dayTime","dayTimeBilling","nightTime","nightTimeBilling","setExpiredTime","setStartTime","darkMode","value","setValue","validateDayTime","setDayTimeValidation","validateNightTime","setNightTimeValidation","darkModeStyle","setDarkModeStyle","circleContainer","costAmount","circularTrack","maxParking","setMaxParking","day","night","hours","Math","floor","scrollTime","console","log","minutes","date","Date","get_current_mins","getMinutes","rem_minutes","currentTime","expiredMinutes","parseInt","expiredHours","getHours","timer_expired_hours","expTime","expTimeInSecs","genrate_expired_time","startTime","start_time","addTime","round","test","scroll_wheel_hr","localStorage","getItem","scroll_wheel_meridian","marginTop","textAlign","v","stepValue"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect, useCallback } from \"react\";\nimport { PaymentContext } from '../../Context/PaymentContext'\nimport \"../Timer/Timer.css\";\nimport Tick from './../../Assets/tick.mp3'\nimport { Howl, Howler } from 'howler'\nimport Time from './Time'\n\nimport {\n\tCircularInput,\n\tCircularTrack,\n\tCircularProgress,\n\tCircularThumb,\n} from \"react-circular-input\";\nimport TimerLogic from \"./TimerLogic\";\nimport { useMemo } from \"react\";\n\n\n\n\nconst Timer = (props) => {\n\t// const today = new Date();\n\tconst timerLogic = new TimerLogic();\n\tconst time_obj = new Time()\n\n\tconst { totalbilling, dayTime, dayTimeBilling, nightTime, nightTimeBilling, setExpiredTime, setStartTime, darkMode } = useContext(PaymentContext)\n\t// const pGenerator = new PaymentGenerator();\n\tconst [value, setValue] = useState(null);\n\tconst [validateDayTime, setDayTimeValidation] = useState()\n\tconst [validateNightTime, setNightTimeValidation] = useState()\n\tconst [darkModeStyle, setDarkModeStyle] = useState({\n\t\tcircleContainer: 'timeInfo', \n\t\tcostAmount: 'cost_amount',\n\t\tcircularTrack: '#eee'\n\t\t \n\t })\n\t const  [maxParking, setMaxParking] = useState({\n\t\t day: 3, \n\t\t night: 6\n\t })\n\tvar hours = Math.floor(timerLogic.scrollTime(value)/10)\n\tconsole.log(`givenVal ${Math.floor(timerLogic.scrollTime(value))}`)\n\tvar minutes = 0\n\tconst date = new Date()\n\tconst get_current_mins = date.getMinutes()\n\tconst rem_minutes = 60 - get_current_mins\n\n\n\t//  We're going to check for Max trigger\n\t// const max = props.checked\n\t// if(max == 'true'){\n\t// if(rem_minutes > 0){ \n\t// \thours = hours - 1\n\t// \tminutes = 60 - get_current_mins\n\t// \tif(hours < 0){ \n\t// \t\t\thours = 0\n\t// \t\t}\n\t// \t}\n\t// }\n\n\n\t\n\t// const time_unit_ = ['am', 'pm']\n\t// var timeUnit;\n\t// var start_time_unit; \n\tconst currentTime = new Date();\n\tvar expiredMinutes = parseInt(currentTime.getMinutes() + minutes)\n\tvar expiredHours = currentTime.getHours() + hours\n\tvar timer_expired_hours = currentTime.getHours() + hours\n\n\n\n\n\t// FULL TIME CALCULATIONS.\n\tvar expTime, expTimeInSecs\n\texpTime = time_obj.genrate_expired_time(hours)\n\n\n\n\n\n\n\t// const limits = [18, 24, 6]\n\t// if(hours == 5){\n\t// \tconst date = new Date()\n\t// \t const currentHours = date.getHours()\n\t// \t const currentMins = date.getMinutes()\n\t// \t const currentTime = (currentHours * 3600) + (currentMins * 60)\n\n\t// \t var countdown_mins = 0\n\t// \t const cMins = 60 - currentMins\n\t// \t var countdown_hours = limits[0] - currentHours\n\t// \tif(currentHours > limits[2] && currentHours < limits[0]){ \n\t// \t\t// let Calculate the countdown hours & mins \n\t// \t\tif(currentMins != 0 || currentMins != '00'){ \n\t// \t\t\tcountdown_hours = countdown_hours - 1\n\t// \t\t\tcountdown_mins = cMins\n\t// \t\t\t// currentTime in Seconds\n\t// \t\t\tvar countdown_time = (countdown_hours * 3600) + (countdown_mins * 60)\n\t// \t\t\tvar fulltime = currentTime + countdown_time\n\t// \t\t\tvar fulltime_calc = fulltime / 3600\n\t// \t\t\texpiredHours = (fulltime_calc > 12? fulltime_calc - 12: fulltime_calc )\n\t// \t\t\texpiredMinutes = '00'\n\n\t// \t\t} \n\t// \t\tif(currentMins == 0 || currentMins == '00'){ \n\t// \t\t\tvar countdown_time = (countdown_hours * 3600) + (countdown_mins * 60)\n\t// \t\t\tvar fulltime = currentTime + countdown_time\n\t// \t\t\tvar fulltime_calc = fulltime / 3600\n\t// \t\t\texpiredHours = (fulltime_calc > 12? fulltime_calc - 12: fulltime_calc )\n\t// \t\t}\n\n\t// \t\t// Then let's introduce the remaining time. \n\n\n\t// \t}\n\t\n\n\t// }\n\n\t// expTime = `${expiredHours}:${expiredMinutes}${timeUnit}`\n\t// expTimeInSecs = (timer_expired_hours * 3600) + (expiredMinutes * 60)\n\n\n\t// var startTime = `${currentTime.getHours()}:${currentTime.getMinutes() < 10? `0${currentTime.getMinutes()}`: currentTime.getMinutes() }${start_time_unit}`\n\n\n\t// localStorage.setItem('expTimeInSecs', expTimeInSecs)\n\t// localStorage.setItem('expTime', expTime)\n\t// localStorage.setItem('total', totalbilling)\n\n\t\n\t// Keeps track of time changes\n\n\t var startTime = time_obj.start_time()\n\tuseEffect(() => {\n\t\t// if(darkMode >= 1800 || darkMode <= 600){\n\t\t// \t\tsetDarkModeStyle({\n\t\t// \t\t\tcircleContainer: 'timeInfo_dark', \n\t\t// \t\t\tcostAmount: 'cost_amount_dark', \n\t\t// \t\t\tcircularTrack: '#1B242F'\n\t\t// \t\t})\n\t\t// \t}\n\n\t\tif (dayTime == 0) {\n\t\t\tsetDayTimeValidation(true)\n\t\t} else { setDayTimeValidation(false) }\n\t\tif (nightTime == 0) {\n\t\t\tsetNightTimeValidation(true)\n\t\t}\n\t\t// localStorage.setItem('startTime', startTime)\n\n\t\tif(hours >= 24){ \n\t\treturn;\n\t\t}\n\t\tif(value == 0 && props.addTime == '-0.20'){ \n\t\t\t\treturn;\n\t\t}\n\t\telse{\n\t\t\t\tsetValue(value + props.addTime);\n\t\t}\n\n\n\t\tconsole.log(Math.round(value))\n \n\n\t}, [props.addTime]);\n\t// setStartTime(startTime)\n\t// setExpiredTime(expTime)\nvar test = 0\nconst scroll_wheel_hr = parseInt(localStorage.getItem('_time_btn_hr'))\nconst scroll_wheel_meridian = localStorage.getItem('_time_btn_meridian')\n\n\n\n\treturn (\n\t\t<div className='timer_container'>\n\t\t\t<div className='timer_holder'>\n\t\t\t\t<div id={darkModeStyle.circleContainer}>\n\t\t\t\t\t<div id='time_holder'>\n\t\t\t\t\t<p className='set_time' style={{marginTop: '10px'}}>Set Duration</p>\n\t\t\t\t\t<p id='time'>{`${hours}h:${minutes}m`}</p>\n\n\t\t\t\t\t\t{/* <p id='time'>{(hours == 5?'Max Parking':`${hours}h:${minutes}m`)}</p> */}\n\n\t\t\t\t\t<p className='set_time' style={{marginTop: '10px'}}>Expires at</p>\n\t\t\t\t\t<p className='rate_' style={{textAlign: 'center'}}>{expTime}</p>\t\n\t\t\t\t\t{/* <button className='set_time_button' style={{marginTop: '10px'}}>PARK LONGER</button> */}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<CircularInput radius={115}\n\t\t\t\t\tvalue={value}\n\t\t\t\t\tonChange={(v) => {\n\t\t\t\t\t\tsetValue(timerLogic.stepValue(v))\t\n\t\t\t\t\t\t}}>\n\t\t\t\t\t<CircularTrack strokeWidth={10} stroke={darkModeStyle.circularTrack} />\n\t\t\t\t\t<CircularProgress className='bar' stroke='#ff4f4f' strokeWidth={12} />\n\t\t\t\t\t<CircularThumb r={15} fill='#F0F0F3' stroke='#ff4f4f' />\n\t\t\t\t</CircularInput>\n\t\t\t</div>\n\n\n\t\t\t<div className='cost_holder'><div id={darkModeStyle.costAmount}>Total Cost: </div><div className='price'>${`${totalbilling}`}</div></div>\n\n\t\t</div>\n\t);\n};\nexport default Timer;\n\n// if(scroll_wheel_meridian  == 'am' && scroll_wheel_hr < 6){\n// \tif(6 - date.getHours() >= maxParking.night){\n// \t\ttest = maxParking.night\n// \t}\n// \telse{\n// \t\ttest = null\n// \t}\n// }\n// if(scroll_wheel_meridian == 'am' && scroll_wheel_hr > 6 && scroll_wheel_hr < 12){\n// \tif((12 - date.getHours() + 6) >= maxParking.day){\n// \t\ttest = maxParking.day\n// \t}\n// \telse{\n// \t\ttest = null\n// \t}\n// }\n// if(scroll_wheel_meridian == 'pm' && scroll_wheel_hr < 6){\n// \tif(18 - date.getHours() >= maxParking.day){\n// \t\ttest = maxParking.day\n// \t}\n// \telse{\n// \t\ttest = null\n// \t}\n// }\n// if(scroll_wheel_meridian == 'pm' && scroll_wheel_hr > 6 && scroll_wheel_hr < 12){\n// \tif(30 - date.getHours() >= maxParking.night || 30 - (scroll_wheel_hr + 12) > maxParking.night){\n// \t\ttest = maxParking.night\n// \t}\n// \telse{\n// \t\ttest = null\n// \t}\n// }\n// (cMins < 10? `0${cMins}`: cMins)\n// timerLogic.scrollTime(timerLogic.stepValue(value))%100\n\t\n\t\t\t\t\t\t{/* <p className='set_time'>Daily Rates</p> */}\n\t\t\t\t\t\t{/* Rates Settings */}\n\t\t\t\t\t\t{/* <div className='rate_container'>\n\t\t\t\t\t\t\t<div className='daily_container day'>\n\t\t\t\t\t\t\t\t<img id='sun' src={Day} alt='sun'></img>\n\t\t\t\t\t\t\t\t<p className='rate_'>$4hr</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className='daily_container night'>\n\t\t\t\t\t\t\t\t<img id='moon' src={Moon} alt='moon'></img>\n\t\t\t\t\t\t\t\t<p className='rate_'>$6hr</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div> */}\n\t// if(expiredHours == 24){\n\t// \thours = 12\n\t// \ttimeUnit = time_unit_[0]\n\t// }\n\t// if(expiredHours > 24){\n\t// \thours = hours - 24\n\t// \ttimeUnit = time_unit_[0]\n\t// }\n\t// if(expiredHours >= 12){\n\t// \ttimeUnit = time_unit_[1]\n\t// }\n\n\t// if(currentTime.getHours() >= 12){\n\t// \tcTimeUnit = time_unit_[1]\n\t// }else{\n\t// \tcTimeUnit = time_unit_[0]\n\t// }\n\n\n\t// if(expiredMinutes > 60){\n\t// \texpiredMinutes = expiredMinutes - 60\n\t// \texpiredHours = expiredHours + 1\n\t// }\n\n\t// if(expiredHours > 12){\n\t// \texpiredHours = expiredHours - 12 \n\t// \tif(expiredHours > 12 ){ \n\t// \t\texpiredHours = expiredHours - 12\n\t// \t}\n\n\t// }\n\n\n\t// if(minutes == 0){\n\t// \tminutes = '00'\n\t// }\n\n// DEPRECATED CODE - LIVES FOR 30 DAYS THEN DELETED\n\n// <div className='overlap_Cost'>\n// {/* Day rate */}\n// <div className='day_rate'>\n// \t<div className='info_holder dayRate_icon'>\n// \t<img id='sun' src={Day} alt='sun'></img>\n// \t</div>\n\n// \t<div id='hours_' className='info_holder dayRate_time'>{Math.floor(dayTime/100)}hrs : {Math.floor(dayTime%100)}mins</div>\n// \t<div id='cost_' className='info_holder dayRate_cost'>${dayTimeBilling}</div>\n\n// </div>\n// {/* Night Rate */}\n// <div className='night_rate'>\n// \t<div className='info_holder nightRate_icon'>\n// \t<img id='moon' src={Moon} alt='moon'></img>\n// \t</div>\n// \t<div id='hours_' className='info_holder dayRate_time'>{Math.floor(nightTime/100)}hrs : {Math.floor(nightTime%100)}mins</div>\n// \t<div id='cost_' className='info_holder dayRate_cost'>${nightTimeBilling}</div>\n\n// </div>\n\n// </div>"]},"metadata":{},"sourceType":"module"}