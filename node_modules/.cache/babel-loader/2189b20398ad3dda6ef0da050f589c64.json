{"ast":null,"code":"import React, { Component } from 'react';\n\nclass Convert_to_meridian extends Component {\n  constructor(props) {\n    super(props);\n\n    this.genrate_expired_time = scrolled_hours => {\n      var sum_hours = this.current_hour + scrolled_hours;\n      var set_hour_limitors = [12, 24, 36, 48];\n\n      var output_meridian = this._switch_meridian_unit();\n\n      this.output_hour = sum_hours; // mins check\n\n      if (this.current_mins == 0) {\n        this.current_mins = '00';\n      }\n\n      for (var i = 0; i < set_hour_limitors.length; i++) {\n        if (sum_hours > set_hour_limitors[i]) {\n          this.output_hour = sum_hours - set_hour_limitors[i];\n        }\n      }\n\n      return `${this.output_hour}:${this.current_mins < 10 ? `0${this.current_mins}` : this.current_mins}${output_meridian}`;\n    };\n\n    this._switch_meridian_unit = () => {\n      if (this.meridian_units_switch) {\n        return this.meridian_units[0];\n      } else if (!this.meridian_units_switch) {\n        return this.meridian_units[1];\n      }\n    };\n\n    this.meridian_units = ['am', 'pm'];\n    this.meridian_units_switch = true;\n    this.__init_date__ = new Date();\n    this.current_hour = this.__init_date__.getHours();\n    this.current_mins = this.__init_date__.getMinutes();\n    this.output_hour = '';\n  }\n\n  componentDidMount() {\n    if (this.current_hour > 12) {\n      console.log('greater');\n    } else if (this.current_hour < 12) {\n      console.log('lesser');\n    }\n  }\n\n}\n\nexport default Convert_to_meridian; // set_meridian_unit = (hours) => { \n// var time_expression = this.current_hour + hours\n// switch(this.current_hour){ \n//     case(this.current_hour > 12?this.current_hour: null): \n//     break;\n// }\n// }\n// }\n// const twelve_hour_time = () => { \n// \tif(expiredHours > 12){ \n// \t\texpiredHours = expiredHours - 12 \n// \t\ttwelve_hour_time()\n// \t}\n// }\n// twelve_hour_time()\n// const set_meridiem = () => { \n// \tvar time_expression = currentTime.getHours() + hours\n// \tconst start_meridiem = currentTime.getHours()\n// \tswitch(start_meridiem){ \n// \t\tcase(start_meridiem > 12? start_meridiem: null):\n// \t\tstart_time_unit = time_unit_[1]\n// \t\tbreak;\n// \t\tcase (start_meridiem < 12 ? start_meridiem: null): \n// \t\tstart_time_unit = time_unit_[0]\n// \t\tbreak;\n// \t}\n// \tswitch(time_expression){\n// \t\tcase (time_expression >= 12 && time_expression <= 24 ? time_expression : null):\n// \t\t\ttimeUnit = time_unit_[1]\n// \t\t\tbreak; \n// \t\tcase (time_expression > 24 || time_expression < 12 ? time_expression : null): \n// \t\t\ttimeUnit = time_unit_[0]\n// \t\t\tbreak;\n// \t}\n// \tif(expiredMinutes < 10){\n// \t\texpiredMinutes = `${0}${expiredMinutes}`\n// \t}\n// \tif(expiredMinutes == 60){ \n// \t\texpiredHours = expiredHours + 1\n// \t\texpiredMinutes = '00'\n// \t}\n// }\n// set_meridiem()","map":{"version":3,"sources":["/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Components/Timer/ConvertToMeridian.js"],"names":["React","Component","Convert_to_meridian","constructor","props","genrate_expired_time","scrolled_hours","sum_hours","current_hour","set_hour_limitors","output_meridian","_switch_meridian_unit","output_hour","current_mins","i","length","meridian_units_switch","meridian_units","__init_date__","Date","getHours","getMinutes","componentDidMount","console","log"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAKA,MAAMC,mBAAN,SAAkCD,SAAlC,CAA4C;AACxCE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAmBnBC,oBAnBmB,GAmBKC,cAAD,IAAoB;AACvC,UAAIC,SAAS,GAAG,KAAKC,YAAL,GAAoBF,cAApC;AACA,UAAIG,iBAAiB,GAAG,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,CAAxB;;AACA,UAAIC,eAAe,GAAG,KAAKC,qBAAL,EAAtB;;AACA,WAAKC,WAAL,GAAmBL,SAAnB,CAJuC,CAOvC;;AACA,UAAI,KAAKM,YAAL,IAAqB,CAAzB,EAA4B;AACxB,aAAKA,YAAL,GAAoB,IAApB;AACH;;AAED,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,iBAAiB,CAACM,MAAtC,EAA8CD,CAAC,EAA/C,EAAmD;AAC/C,YAAIP,SAAS,GAAGE,iBAAiB,CAACK,CAAD,CAAjC,EAAsC;AAClC,eAAKF,WAAL,GAAmBL,SAAS,GAAGE,iBAAiB,CAACK,CAAD,CAAhD;AAEH;AACJ;;AAGD,aAAQ,GAAE,KAAKF,WAAY,IAAG,KAAKC,YAAL,GAAoB,EAApB,GAA0B,IAAG,KAAKA,YAAa,EAA/C,GAAmD,KAAKA,YAAa,GAAEH,eAAgB,EAArH;AACH,KAxCkB;;AAAA,SA4CnBC,qBA5CmB,GA4CK,MAAM;AAC1B,UAAG,KAAKK,qBAAR,EAA8B;AAC1B,eAAO,KAAKC,cAAL,CAAoB,CAApB,CAAP;AACH,OAFD,MAGK,IAAG,CAAC,KAAKD,qBAAT,EAA+B;AAChC,eAAO,KAAKC,cAAL,CAAoB,CAApB,CAAP;AACH;AACJ,KAnDkB;;AAEf,SAAKA,cAAL,GAAsB,CAAC,IAAD,EAAO,IAAP,CAAtB;AACA,SAAKD,qBAAL,GAA6B,IAA7B;AACA,SAAKE,aAAL,GAAqB,IAAIC,IAAJ,EAArB;AACA,SAAKX,YAAL,GAAoB,KAAKU,aAAL,CAAmBE,QAAnB,EAApB;AACA,SAAKP,YAAL,GAAoB,KAAKK,aAAL,CAAmBG,UAAnB,EAApB;AACA,SAAKT,WAAL,GAAmB,EAAnB;AACH;;AAELU,EAAAA,iBAAiB,GAAE;AACf,QAAG,KAAKd,YAAL,GAAoB,EAAvB,EAA0B;AACtBe,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACH,KAFD,MAGK,IAAG,KAAKhB,YAAL,GAAoB,EAAvB,EAA0B;AAC3Be,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACH;AACJ;;AAlB2C;;AAgE5C,eAAetB,mBAAf,C,CAmBA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAKA;AAIC;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["import React, { Component } from 'react'\n\n\n\n\nclass Convert_to_meridian extends Component {\n    constructor(props) {\n        super(props)\n        this.meridian_units = ['am', 'pm']\n        this.meridian_units_switch = true\n        this.__init_date__ = new Date()\n        this.current_hour = this.__init_date__.getHours()\n        this.current_mins = this.__init_date__.getMinutes()\n        this.output_hour = ''\n    }\n\ncomponentDidMount(){ \n    if(this.current_hour > 12){ \n        console.log('greater')\n    }\n    else if(this.current_hour < 12){\n        console.log('lesser')\n    }\n}\n\n    genrate_expired_time = (scrolled_hours) => {\n        var sum_hours = this.current_hour + scrolled_hours\n        var set_hour_limitors = [12, 24, 36, 48]\n        var output_meridian = this._switch_meridian_unit()\n        this.output_hour = sum_hours\n\n\n        // mins check\n        if (this.current_mins == 0) {\n            this.current_mins = '00'\n        }\n\n        for (var i = 0; i < set_hour_limitors.length; i++) {\n            if (sum_hours > set_hour_limitors[i]) {\n                this.output_hour = sum_hours - set_hour_limitors[i]\n                \n            }\n        }\n\n\n        return `${this.output_hour}:${this.current_mins < 10 ? `0${this.current_mins}` : this.current_mins}${output_meridian}`\n    }\n\n\n\n    _switch_meridian_unit = () => {\n        if(this.meridian_units_switch){\n            return this.meridian_units[0]\n        }\n        else if(!this.meridian_units_switch){ \n            return this.meridian_units[1]\n        }\n    }\n\n\n}\n\n\n\n\n\n\n\n\nexport default Convert_to_meridian;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// set_meridian_unit = (hours) => { \n// var time_expression = this.current_hour + hours\n\n// switch(this.current_hour){ \n//     case(this.current_hour > 12?this.current_hour: null): \n\n//     break;\n// }\n// }\n\n\n\n\n// }\n\n\n\n\t// const twelve_hour_time = () => { \n\t// \tif(expiredHours > 12){ \n\t// \t\texpiredHours = expiredHours - 12 \n\t// \t\ttwelve_hour_time()\n\t// \t}\n\t// }\n\t// twelve_hour_time()\n\n\t// const set_meridiem = () => { \n\t// \tvar time_expression = currentTime.getHours() + hours\n\t// \tconst start_meridiem = currentTime.getHours()\n\n\t// \tswitch(start_meridiem){ \n\t// \t\tcase(start_meridiem > 12? start_meridiem: null):\n\t// \t\tstart_time_unit = time_unit_[1]\n\t// \t\tbreak;\n\t// \t\tcase (start_meridiem < 12 ? start_meridiem: null): \n\t// \t\tstart_time_unit = time_unit_[0]\n\t// \t\tbreak;\n\t// \t}\n\n\n\n\t// \tswitch(time_expression){\n\t// \t\tcase (time_expression >= 12 && time_expression <= 24 ? time_expression : null):\n\t// \t\t\ttimeUnit = time_unit_[1]\n\t// \t\t\tbreak; \n\t// \t\tcase (time_expression > 24 || time_expression < 12 ? time_expression : null): \n\t// \t\t\ttimeUnit = time_unit_[0]\n\t// \t\t\tbreak;\n\t// \t}\n\n\t// \tif(expiredMinutes < 10){\n\t// \t\texpiredMinutes = `${0}${expiredMinutes}`\n\t// \t}\n\t// \tif(expiredMinutes == 60){ \n\t// \t\texpiredHours = expiredHours + 1\n\t// \t\texpiredMinutes = '00'\n\t// \t}\n\n\t// }\n\t// set_meridiem()"]},"metadata":{},"sourceType":"module"}