{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport { PaymentContext } from '../../../Context/PaymentContext';\n\nconst PaymentGenerator = (hours, minutes) => {\n  _s();\n\n  const {\n    setNightTime,\n    setNightTimeBilling,\n    setDayTime,\n    setDayTimeBilling,\n    setBilling,\n    setTime\n  } = useContext(PaymentContext);\n  const timeDate = new Date();\n  const night_hourly_rate = 6;\n  const night_minute_rate = 1.5;\n  const hourly_rate = 4;\n  const minute_rate = 1;\n  var currentTime = parseInt(`${timeDate.getHours()}${timeDate.getMinutes()}`);\n  var setLimit = parseInt(`${hours}${minutes}`);\n  var accumalatedTime = 1700 + setLimit;\n  var minuteCheck = accumalatedTime % 100;\n  var hourCheck = Math.floor(accumalatedTime / 100);\n  var night_overlap_time;\n  var night_overlap_cost;\n  var newNightTIme_hour;\n  var newNightTIme_min;\n  var newMinutes;\n  var newHours;\n  var daytime_billing;\n  var overlap_billing;\n  var daytimeHour;\n  var daytimeMin;\n  var dayTime;\n  var totalbilling;\n  var nightTime;\n  var night_time_billing;\n\n  if (hourCheck > 23) {\n    hourCheck = hourCheck - 24;\n  }\n\n  if (minuteCheck >= 60) {\n    newMinutes = minuteCheck - 60;\n    newHours = Math.floor(hourCheck + 1);\n    accumalatedTime = parseInt(`${newHours}${newMinutes}`);\n\n    if (newMinutes < 10) {\n      accumalatedTime = parseInt(`${newHours}0${newMinutes}`);\n    }\n\n    if (newMinutes === 0) {\n      accumalatedTime = parseInt(`${newHours}00`);\n    }\n  } else {\n    accumalatedTime = 1700 + setLimit; //Current time + Set Limit time\n  }\n\n  useEffect(() => {\n    if (1700 <= 1800 && accumalatedTime <= 1800) {\n      // current_time < \n      dayTime = parseInt(`${hours}${minutes}`);\n      night_overlap_time = 0;\n      overlap_billing = 0;\n      daytime_billing = hours * hourly_rate + minutes / 15 * minute_rate;\n      totalbilling = daytime_billing + overlap_billing; // how much day time \n\n      console.log(`/daytime: ${dayTime}`); //day time cost \n\n      console.log(`/daytime_billing: ${daytime_billing}`); //how much night time\n\n      console.log(`/nighttime: ${night_overlap_time}`); // night time cost \n\n      console.log(`night Cost: $${overlap_billing}`);\n      setDayTime(dayTime);\n      setDayTimeBilling(daytime_billing);\n      setNightTime(night_overlap_time);\n      setNightTimeBilling(overlap_billing);\n      setBilling(totalbilling);\n    } else if (1700 <= 1800 && accumalatedTime > 1800) {\n      //current_time >\n      night_overlap_time = accumalatedTime - 1800;\n      night_overlap_cost = night_overlap_time * .1; //.1 is dollar value of 6 dollars per hour\n\n      daytimeHour = Math.floor((1800 - 1700) / 100); // selected hours before night time\n\n      daytimeMin = Math.floor((1800 - 1700) % 100); // selected mins before night time\n\n      dayTime = parseInt(`${daytimeHour}${daytimeMin}`);\n      daytime_billing = daytimeHour * hourly_rate + Math.floor(daytimeMin * 0.27); // at 4 an hour 26.67 per min\n\n      if (night_overlap_time > 99) {\n        newNightTIme_hour = Math.floor(night_overlap_time / 100);\n        newNightTIme_min = Math.floor(night_overlap_time % 100);\n        overlap_billing = newNightTIme_hour * 6 + newNightTIme_min * 0.1;\n        night_overlap_time = parseInt(`${newNightTIme_hour}${newNightTIme_min}`);\n      } else {\n        overlap_billing = Math.round((night_overlap_cost + Number.EPSILON) * 100) / 100;\n      } // night_overlap_time = Math.round((night_overlap_cost + Number.EPSILON) * 100) / 100\n      // how much day time \n\n\n      console.log(`/daytime: ${dayTime}`); //day time cost \n\n      console.log(`/daytime_billing: ${daytime_billing + overlap_billing}`); //how much night time\n\n      console.log(`/nighttime: ${night_overlap_time}`); // night time cost \n\n      console.log(`night Cost: $${overlap_billing}`);\n      setDayTime(dayTime);\n      setDayTimeBilling(daytime_billing);\n      setNightTime(night_overlap_time);\n      setNightTimeBilling(overlap_billing); // daytime_billing = 1800 - currentTime\n\n      totalbilling = daytime_billing + overlap_billing;\n      setBilling(totalbilling); //daytime billing\n    } else if (1700 > 1800 && accumalatedTime > 1800) {\n      dayTime = 0;\n      night_overlap_time = 0;\n      overlap_billing = 0;\n      daytime_billing = 0;\n      nightTime = parseInt(`${hours}${minutes}`); // Might need\n\n      night_time_billing = daytime_billing = hours * night_hourly_rate + minutes / 15 * night_minute_rate;\n      setDayTime(dayTime);\n      setDayTimeBilling(daytime_billing);\n      setNightTime(night_overlap_time);\n      setNightTimeBilling(overlap_billing);\n      setBilling(night_time_billing);\n    } // Set Selected time here for tracking and to be pushed to local storage by confirm BTN\n\n\n    setTime(parseInt(`${hours}${minutes}`));\n  }, [hours, minutes]);\n};\n\n_s(PaymentGenerator, \"I4fejVgDR9RCjmNne9S9Kn77axg=\");\n\n_c = PaymentGenerator;\nexport default PaymentGenerator;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentGenerator\");","map":{"version":3,"sources":["/Users/bottlecapmedia/Desktop/OneShot Parking/src/Components/Financials/Calculator/PaymentGenerator.js"],"names":["React","useEffect","useState","useContext","PaymentContext","PaymentGenerator","hours","minutes","setNightTime","setNightTimeBilling","setDayTime","setDayTimeBilling","setBilling","setTime","timeDate","Date","night_hourly_rate","night_minute_rate","hourly_rate","minute_rate","currentTime","parseInt","getHours","getMinutes","setLimit","accumalatedTime","minuteCheck","hourCheck","Math","floor","night_overlap_time","night_overlap_cost","newNightTIme_hour","newNightTIme_min","newMinutes","newHours","daytime_billing","overlap_billing","daytimeHour","daytimeMin","dayTime","totalbilling","nightTime","night_time_billing","console","log","round","Number","EPSILON"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAoCC,UAApC,QAAsD,OAAtD;AACA,SAASC,cAAT,QAA+B,iCAA/B;;AAOA,MAAMC,gBAAgB,GAAG,CAACC,KAAD,EAAQC,OAAR,KAAoB;AAAA;;AACzC,QAAM;AAACC,IAAAA,YAAD;AAAeC,IAAAA,mBAAf;AAAoCC,IAAAA,UAApC;AAAgDC,IAAAA,iBAAhD;AAAmEC,IAAAA,UAAnE;AAA+EC,IAAAA;AAA/E,MAA2FV,UAAU,CAACC,cAAD,CAA3G;AACA,QAAMU,QAAQ,GAAG,IAAIC,IAAJ,EAAjB;AACA,QAAMC,iBAAiB,GAAG,CAA1B;AACA,QAAMC,iBAAiB,GAAG,GAA1B;AACA,QAAMC,WAAW,GAAG,CAApB;AACA,QAAMC,WAAW,GAAG,CAApB;AACA,MAAIC,WAAW,GAAGC,QAAQ,CAAE,GAAEP,QAAQ,CAACQ,QAAT,EAAoB,GAAER,QAAQ,CAACS,UAAT,EAAsB,EAAhD,CAA1B;AACA,MAAIC,QAAQ,GAAGH,QAAQ,CAAE,GAAEf,KAAM,GAAEC,OAAQ,EAApB,CAAvB;AACA,MAAIkB,eAAe,GAAG,OAAOD,QAA7B;AACA,MAAIE,WAAW,GAAGD,eAAe,GAAG,GAApC;AACA,MAAIE,SAAS,GAAIC,IAAI,CAACC,KAAL,CAAWJ,eAAe,GAAG,GAA7B,CAAjB;AACA,MAAIK,kBAAJ;AACA,MAAIC,kBAAJ;AACA,MAAIC,iBAAJ;AACA,MAAIC,gBAAJ;AACA,MAAIC,UAAJ;AACA,MAAIC,QAAJ;AACA,MAAIC,eAAJ;AACA,MAAIC,eAAJ;AACA,MAAIC,WAAJ;AACA,MAAIC,UAAJ;AACA,MAAIC,OAAJ;AACA,MAAIC,YAAJ;AACA,MAAIC,SAAJ;AACA,MAAIC,kBAAJ;;AAIA,MAAGhB,SAAS,GAAG,EAAf,EAAkB;AACdA,IAAAA,SAAS,GAAGA,SAAS,GAAG,EAAxB;AACH;;AACD,MAAID,WAAW,IAAI,EAAnB,EAAsB;AAClBQ,IAAAA,UAAU,GAAGR,WAAW,GAAG,EAA3B;AACAS,IAAAA,QAAQ,GAAGP,IAAI,CAACC,KAAL,CAAYF,SAAD,GAAc,CAAzB,CAAX;AACAF,IAAAA,eAAe,GAAGJ,QAAQ,CAAE,GAAEc,QAAS,GAAED,UAAW,EAA1B,CAA1B;;AACJ,QAAGA,UAAU,GAAG,EAAhB,EAAmB;AACXT,MAAAA,eAAe,GAAGJ,QAAQ,CAAE,GAAEc,QAAS,IAAGD,UAAW,EAA3B,CAA1B;AACP;;AACD,QAAGA,UAAU,KAAK,CAAlB,EAAoB;AAChBT,MAAAA,eAAe,GAAGJ,QAAQ,CAAE,GAAEc,QAAS,IAAb,CAA1B;AACH;AACA,GAVD,MAUM;AACFV,IAAAA,eAAe,GAAG,OAAOD,QAAzB,CADE,CACgC;AAErC;;AAIDvB,EAAAA,SAAS,CAAC,MAAI;AAEV,QAAG,QAAQ,IAAR,IAAgBwB,eAAe,IAAI,IAAtC,EAA2C;AAAE;AACzCe,MAAAA,OAAO,GAAGnB,QAAQ,CAAE,GAAEf,KAAM,GAAEC,OAAQ,EAApB,CAAlB;AACAuB,MAAAA,kBAAkB,GAAG,CAArB;AACAO,MAAAA,eAAe,GAAG,CAAlB;AACAD,MAAAA,eAAe,GAAG9B,KAAK,GAAGY,WAAR,GAAuBX,OAAO,GAAG,EAAX,GAAiBY,WAAzD;AACAsB,MAAAA,YAAY,GAAGL,eAAe,GAAGC,eAAjC,CALuC,CAOvC;;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAa,aAAYL,OAAQ,EAAjC,EARuC,CAUvC;;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAa,qBAAoBT,eAAgB,EAAjD,EAXuC,CAYvC;;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAa,eAAcf,kBAAmB,EAA9C,EAbuC,CAcvC;;AACAc,MAAAA,OAAO,CAACC,GAAR,CAAa,gBAAeR,eAAgB,EAA5C;AAEA3B,MAAAA,UAAU,CAAC8B,OAAD,CAAV;AACA7B,MAAAA,iBAAiB,CAACyB,eAAD,CAAjB;AACA5B,MAAAA,YAAY,CAACsB,kBAAD,CAAZ;AACArB,MAAAA,mBAAmB,CAAC4B,eAAD,CAAnB;AACAzB,MAAAA,UAAU,CAAC6B,YAAD,CAAV;AACH,KAtBD,MAuBK,IAAG,QAAQ,IAAR,IAAgBhB,eAAe,GAAG,IAArC,EAA0C;AAAE;AAE7CK,MAAAA,kBAAkB,GAAGL,eAAe,GAAG,IAAvC;AACAM,MAAAA,kBAAkB,GAAGD,kBAAkB,GAAG,EAA1C,CAH2C,CAGE;;AAE7CQ,MAAAA,WAAW,GAAGV,IAAI,CAACC,KAAL,CAAW,CAAC,OAAK,IAAN,IAAc,GAAzB,CAAd,CAL2C,CAKC;;AAC5CU,MAAAA,UAAU,GAAGX,IAAI,CAACC,KAAL,CAAW,CAAC,OAAK,IAAN,IAAc,GAAzB,CAAb,CAN2C,CAMD;;AAC1CW,MAAAA,OAAO,GAAGnB,QAAQ,CAAE,GAAEiB,WAAY,GAAEC,UAAW,EAA7B,CAAlB;AACAH,MAAAA,eAAe,GAAGE,WAAW,GAAGpB,WAAd,GAA4BU,IAAI,CAACC,KAAL,CAAWU,UAAU,GAAG,IAAxB,CAA9C,CAR2C,CAS1C;;AAED,UAAGT,kBAAkB,GAAG,EAAxB,EAA2B;AAC1BE,QAAAA,iBAAiB,GAAGJ,IAAI,CAACC,KAAL,CAAWC,kBAAkB,GAAG,GAAhC,CAApB;AACAG,QAAAA,gBAAgB,GAAGL,IAAI,CAACC,KAAL,CAAWC,kBAAkB,GAAG,GAAhC,CAAnB;AACAO,QAAAA,eAAe,GAAIL,iBAAiB,GAAG,CAArB,GAA2BC,gBAAgB,GAAG,GAAhE;AACAH,QAAAA,kBAAkB,GAAGT,QAAQ,CAAE,GAAEW,iBAAkB,GAAEC,gBAAiB,EAAzC,CAA7B;AACD,OALA,MAKI;AACDI,QAAAA,eAAe,GAAGT,IAAI,CAACkB,KAAL,CAAW,CAACf,kBAAkB,GAAGgB,MAAM,CAACC,OAA7B,IAAwC,GAAnD,IAA0D,GAA5E;AACH,OAlB2C,CAqB3C;AACA;;;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAa,aAAYL,OAAQ,EAAjC,EAvB2C,CAwB3C;;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAa,qBAAoBT,eAAe,GAAGC,eAAgB,EAAnE,EAzB2C,CA0B3C;;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAa,eAAcf,kBAAmB,EAA9C,EA3B2C,CA4B3C;;AACAc,MAAAA,OAAO,CAACC,GAAR,CAAa,gBAAeR,eAAgB,EAA5C;AAIA3B,MAAAA,UAAU,CAAC8B,OAAD,CAAV;AACA7B,MAAAA,iBAAiB,CAACyB,eAAD,CAAjB;AACA5B,MAAAA,YAAY,CAACsB,kBAAD,CAAZ;AACArB,MAAAA,mBAAmB,CAAC4B,eAAD,CAAnB,CApC2C,CAsC3C;;AACAI,MAAAA,YAAY,GAAGL,eAAe,GAAGC,eAAjC;AACAzB,MAAAA,UAAU,CAAC6B,YAAD,CAAV,CAxC2C,CAwClB;AAC5B,KAzCI,MA2CA,IAAG,OAAO,IAAP,IAAehB,eAAe,GAAG,IAApC,EAAyC;AAC1Ce,MAAAA,OAAO,GAAC,CAAR;AACAV,MAAAA,kBAAkB,GAAG,CAArB;AACAO,MAAAA,eAAe,GAAG,CAAlB;AACAD,MAAAA,eAAe,GAAG,CAAlB;AACAM,MAAAA,SAAS,GAAGrB,QAAQ,CAAE,GAAEf,KAAM,GAAEC,OAAQ,EAApB,CAApB,CAL0C,CAKC;;AAC3CoC,MAAAA,kBAAkB,GAAGP,eAAe,GAAG9B,KAAK,GAAGU,iBAAR,GAA6BT,OAAO,GAAG,EAAX,GAAiBU,iBAApF;AAGAP,MAAAA,UAAU,CAAC8B,OAAD,CAAV;AACA7B,MAAAA,iBAAiB,CAACyB,eAAD,CAAjB;AACA5B,MAAAA,YAAY,CAACsB,kBAAD,CAAZ;AACArB,MAAAA,mBAAmB,CAAC4B,eAAD,CAAnB;AACAzB,MAAAA,UAAU,CAAC+B,kBAAD,CAAV;AAEH,KAnFS,CAqFV;;;AACA9B,IAAAA,OAAO,CAACQ,QAAQ,CAAE,GAAEf,KAAM,GAAEC,OAAQ,EAApB,CAAT,CAAP;AACH,GAvFQ,EAuFN,CAACD,KAAD,EAAQC,OAAR,CAvFM,CAAT;AAyFH,CA1ID;;GAAMF,gB;;KAAAA,gB;AA8IN,eAAeA,gBAAf","sourcesContent":["import React, { useEffect, useState,useContext } from 'react'\nimport { PaymentContext } from '../../../Context/PaymentContext'\n\n\n\n\n\n\nconst PaymentGenerator = (hours, minutes) => {\n    const {setNightTime, setNightTimeBilling, setDayTime, setDayTimeBilling, setBilling, setTime,} = useContext(PaymentContext)\n    const timeDate = new Date()\n    const night_hourly_rate = 6\n    const night_minute_rate = 1.5\n    const hourly_rate = 4\n    const minute_rate = 1\n    var currentTime = parseInt(`${timeDate.getHours()}${timeDate.getMinutes()}`)\n    var setLimit = parseInt(`${hours}${minutes}`)\n    var accumalatedTime = 1700 + setLimit\n    var minuteCheck = accumalatedTime % 100\n    var hourCheck =  Math.floor(accumalatedTime / 100)\n    var night_overlap_time\n    var night_overlap_cost\n    var newNightTIme_hour\n    var newNightTIme_min\n    var newMinutes\n    var newHours\n    var daytime_billing\n    var overlap_billing\n    var daytimeHour\n    var daytimeMin\n    var dayTime\n    var totalbilling\n    var nightTime\n    var night_time_billing\n\n\n\n    if(hourCheck > 23){\n        hourCheck = hourCheck - 24\n    }\n    if( minuteCheck >= 60){\n        newMinutes = minuteCheck - 60\n        newHours = Math.floor((hourCheck) + 1)\n        accumalatedTime = parseInt(`${newHours}${newMinutes}`)\n    if(newMinutes < 10){\n            accumalatedTime = parseInt(`${newHours}0${newMinutes}`)\n    }\n    if(newMinutes === 0){\n        accumalatedTime = parseInt(`${newHours}00`)\n    }\n    }else {\n        accumalatedTime = 1700 + setLimit //Current time + Set Limit time\n   \n    }\n\n\n    \n    useEffect(()=>{\n\n        if(1700 <= 1800 && accumalatedTime <= 1800){ // current_time < \n            dayTime = parseInt(`${hours}${minutes}`)\n            night_overlap_time = 0\n            overlap_billing = 0\n            daytime_billing = hours * hourly_rate + (minutes / 15) * minute_rate\n            totalbilling = daytime_billing + overlap_billing\n\n            // how much day time \n            console.log(`/daytime: ${dayTime}`)\n\n            //day time cost \n            console.log(`/daytime_billing: ${daytime_billing}`)\n            //how much night time\n            console.log(`/nighttime: ${night_overlap_time}`)\n            // night time cost \n            console.log(`night Cost: $${overlap_billing}`)\n\n            setDayTime(dayTime)\n            setDayTimeBilling(daytime_billing)\n            setNightTime(night_overlap_time)\n            setNightTimeBilling(overlap_billing)\n            setBilling(totalbilling)\n        }        \n        else if(1700 <= 1800 && accumalatedTime > 1800){ //current_time >\n            \n            night_overlap_time = accumalatedTime - 1800\n            night_overlap_cost = night_overlap_time * .1 //.1 is dollar value of 6 dollars per hour\n\n            daytimeHour = Math.floor((1800-1700) / 100) // selected hours before night time\n            daytimeMin = Math.floor((1800-1700) % 100)// selected mins before night time\n            dayTime = parseInt(`${daytimeHour}${daytimeMin}`)\n            daytime_billing = daytimeHour * hourly_rate + Math.floor(daytimeMin * 0.27)\n             // at 4 an hour 26.67 per min\n\n            if(night_overlap_time > 99){\n             newNightTIme_hour = Math.floor(night_overlap_time / 100)\n             newNightTIme_min = Math.floor(night_overlap_time % 100)\n             overlap_billing = (newNightTIme_hour * 6) + (newNightTIme_min * 0.1)\n             night_overlap_time = parseInt(`${newNightTIme_hour}${newNightTIme_min}`)\n           }else{\n               overlap_billing = Math.round((night_overlap_cost + Number.EPSILON) * 100) / 100\n           }\n           \n       \n            // night_overlap_time = Math.round((night_overlap_cost + Number.EPSILON) * 100) / 100\n            // how much day time \n            console.log(`/daytime: ${dayTime}`)\n            //day time cost \n            console.log(`/daytime_billing: ${daytime_billing + overlap_billing}`)\n            //how much night time\n            console.log(`/nighttime: ${night_overlap_time}`)\n            // night time cost \n            console.log(`night Cost: $${overlap_billing}`)\n            \n\n            \n            setDayTime(dayTime)\n            setDayTimeBilling(daytime_billing)\n            setNightTime(night_overlap_time)\n            setNightTimeBilling(overlap_billing)\n           \n            // daytime_billing = 1800 - currentTime\n            totalbilling = daytime_billing + overlap_billing\n            setBilling(totalbilling) //daytime billing\n        }\n \n        else if(1700 > 1800 && accumalatedTime > 1800){\n            dayTime=0\n            night_overlap_time = 0\n            overlap_billing = 0\n            daytime_billing = 0\n            nightTime = parseInt(`${hours}${minutes}`) // Might need\n            night_time_billing = daytime_billing = hours * night_hourly_rate + (minutes / 15) * night_minute_rate\n\n   \n            setDayTime(dayTime)\n            setDayTimeBilling(daytime_billing)\n            setNightTime(night_overlap_time)\n            setNightTimeBilling(overlap_billing)\n            setBilling(night_time_billing) \n           \n        }\n\n        // Set Selected time here for tracking and to be pushed to local storage by confirm BTN\n        setTime(parseInt(`${hours}${minutes}`))\n    }, [hours, minutes])\n\n}\n\n\n\nexport default PaymentGenerator;\n \n\n"]},"metadata":{},"sourceType":"module"}