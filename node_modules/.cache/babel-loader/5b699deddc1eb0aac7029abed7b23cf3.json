{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useContext } from 'react';\nimport { PaymentContext } from '../../../Context/PaymentContext';\nimport Time from '../../Timer/Time';\n\nconst PaymentGenerator = (hours, minutes) => {\n  _s();\n\n  const {\n    setNightTime,\n    setNightTimeBilling,\n    setDayTime,\n    setDayTimeBilling,\n    setBilling,\n    setTime\n  } = useContext(PaymentContext);\n  const timeDate = new Date();\n  const night_hourly_rate = 1.75;\n  const night_minute_rate = 0;\n  const hourly_rate = 1.75;\n  const minute_rate = 0; //parseInt(`${timeDate.getHours()}${timeDate.getMinutes()}`)\n\n  var currentTime = parseInt(`${timeDate.getHours()}${timeDate.getMinutes()}`);\n  var setLimit = parseInt(`${hours}${minutes}`);\n  var accumalatedTime = currentTime + setLimit;\n  var minuteCheck = accumalatedTime % 100;\n  var hourCheck = Math.floor(accumalatedTime / 100);\n  var count_down_hours = Math.round((accumalatedTime - currentTime) / 100);\n  var reg_day_time_min_algorythm;\n  var currentTime_hr;\n  var currentTime_min;\n  var night_overlap_time;\n  var night_overlap_cost;\n  var day_overlap_time;\n  var day_overlap_cost;\n  var nighttimeHour;\n  var nighttimeMin;\n  var nighttime_billing;\n  var newDayTime_hour;\n  var newDayTime_min;\n  var newNightTIme_hour;\n  var newNightTIme_min;\n  var newMinutes;\n  var newHours;\n  var daytime_billing;\n  var overlap_billing;\n  var daytimeHour;\n  var daytimeMin;\n  var dayTime;\n  var totalbilling;\n  var nightTime;\n  var night_time_billing;\n  var day_rate_max = 3;\n  var night_rate_max = 5;\n\n  const check_and_adjust = () => {\n    // Accumulated Time Check\n    if (hourCheck > 23) {\n      hourCheck = hourCheck - 24;\n    }\n\n    if (minuteCheck >= 60) {\n      newMinutes = minuteCheck - 60;\n      newHours = Math.floor(hourCheck + 1);\n      accumalatedTime = parseInt(`${newHours}${newMinutes}`);\n\n      if (newMinutes < 10) {\n        accumalatedTime = parseInt(`${newHours}0${newMinutes}`);\n      }\n\n      if (newMinutes === 0) {\n        accumalatedTime = parseInt(`${newHours}00`);\n      }\n    } else {\n      accumalatedTime = currentTime + setLimit; //Current time + Set Limit time\n    }\n  };\n\n  check_and_adjust();\n\n  const test = () => {\n    // Day Time\n    switch (currentTime) {\n      case currentTime > 600 && accumalatedTime < 1800 ? currentTime : '':\n        dayTime = parseInt(`${hours}${minutes}`);\n        night_overlap_time = 0;\n        overlap_billing = 0;\n        daytime_billing = hours * hourly_rate;\n        totalbilling = daytime_billing + overlap_billing;\n        setDayTime(dayTime);\n        setDayTimeBilling(daytime_billing);\n        setNightTime(night_overlap_time);\n        setNightTimeBilling(overlap_billing);\n        console.log(setLimit / 10);\n        const finding_remaining_hours = 18 - timeDate.getHours();\n\n        if (setLimit / 10 >= day_rate_max && setLimit / 10 <= finding_remaining_hours && accumalatedTime < 1800) {\n          setBilling(100);\n        } else {\n          setBilling(totalbilling);\n        }\n\n        break;\n      // Day to night\n\n      case currentTime <= 1800 && accumalatedTime > 1800 ? currentTime : '':\n        night_overlap_time = accumalatedTime - 1800;\n\n        if (night_overlap_time < 60) {\n          console.log(night_overlap_time);\n          night_overlap_cost = 1 * night_hourly_rate; //.1 is dollar value of 6 dollars per hour\n        } else {\n          night_overlap_cost = night_overlap_time * night_hourly_rate; //.1 is dollar value of 6 dollars per hour\n        } // Math.floor((1800-currentTime) / 100)\n\n\n        daytimeHour = Math.floor((1800 - currentTime) / 100); // selected hours before night time\n\n        reg_day_time_min_algorythm = Math.floor(60 - currentTime % 100);\n\n        if (reg_day_time_min_algorythm == 60) {\n          reg_day_time_min_algorythm = `${0}${0}`;\n        }\n\n        daytimeMin = reg_day_time_min_algorythm; // selected mins before night time\n\n        dayTime = parseInt(`${daytimeHour}${daytimeMin}`);\n        daytime_billing = daytimeHour * hourly_rate;\n\n        if (night_overlap_time > 99) {\n          newNightTIme_hour = Math.floor(night_overlap_time / 100);\n          newNightTIme_min = Math.floor(night_overlap_time % 100);\n          overlap_billing = newNightTIme_hour * night_hourly_rate;\n          night_overlap_time = parseInt(`${newNightTIme_hour}${newNightTIme_min}`);\n        } else {\n          overlap_billing = Math.round((night_overlap_cost + Number.EPSILON) * 100) / 100;\n        }\n\n        if (night_overlap_time < 99 && night_overlap_time > 60) {\n          newNightTIme_hour = Math.floor(night_overlap_time / 60);\n          newNightTIme_min = Math.floor(night_overlap_time % 60);\n          overlap_billing = newNightTIme_hour * night_hourly_rate;\n          night_overlap_time = parseInt(`${newNightTIme_hour}`);\n        }\n\n        setDayTime(dayTime);\n        setDayTimeBilling(daytime_billing);\n        setNightTime(night_overlap_time);\n        setNightTimeBilling(overlap_billing); // daytime_billing = 1800 - currentTime\n\n        totalbilling = daytime_billing + overlap_billing; // if the setLimit is greater than 6 and the  \n\n        if (setLimit / 10 >= night_rate_max && accumalatedTime > 1800 || accumalatedTime < 600) {\n          setBilling(100);\n        } else {\n          setBilling(totalbilling);\n        }\n\n        break;\n      // Night\n\n      case currentTime > 1800 && accumalatedTime < 2359 || currentTime < 600 && accumalatedTime <= 600 ? currentTime : '':\n        dayTime = 0;\n        night_overlap_time = 0;\n        overlap_billing = 0;\n        daytime_billing = 0;\n        nightTime = parseInt(`${hours}`); // Might need\n\n        night_time_billing = hours * night_hourly_rate;\n        setDayTime(dayTime);\n        setDayTimeBilling(daytime_billing);\n        setNightTime(night_overlap_time);\n        setNightTimeBilling(night_time_billing);\n        setBilling(night_time_billing);\n        break;\n      // NIGHT OVERLAPPING TO DAY \n\n      case currentTime <= 600 && accumalatedTime > 600:\n        day_overlap_time = accumalatedTime - 600;\n        console.log();\n        day_overlap_cost = Math.floor(day_overlap_time * .07); //.07 is dollar value of 4 dollars per hour\n\n        nighttimeHour = Math.floor((600 - currentTime) / 100); // selected hours before night time\n\n        nighttimeMin = Math.floor(60 - currentTime % 100); // selected mins before night time\n\n        nightTime = parseInt(`${nighttimeHour}${nighttimeMin}`);\n        nighttime_billing = nighttimeHour * night_hourly_rate;\n\n        if (day_overlap_time > 99) {\n          newDayTime_hour = Math.floor(day_overlap_time / 100);\n          newDayTime_min = Math.floor(day_overlap_time % 100);\n          overlap_billing = Math.round((newDayTime_hour * 4 + newDayTime_min * 0.07 + Number.EPSILON) * 100) / 100;\n          day_overlap_time = parseInt(`${newDayTime_hour}${newDayTime_min}`);\n        } else {\n          overlap_billing = Math.round((day_overlap_cost + Number.EPSILON) * 100) / 100;\n        }\n\n        break;\n    }\n\n    if (count_down_hours == 5) {\n      console.log(`${count_down_hours}`);\n      setBilling(5); // setBilling(totalbilling)\n    } else {\n      setBilling(totalbilling);\n    }\n\n    setDayTime(day_overlap_time);\n    setDayTimeBilling(overlap_billing);\n    setNightTime(nightTime);\n    setNightTimeBilling(nighttime_billing); // daytime_billing = 1800 - currentTime\n\n    totalbilling = Math.round((nighttime_billing + overlap_billing + Number.EPSILON) * 100) / 100;\n  };\n\n  useEffect(() => {\n    test();\n  }, [test]);\n};\n\n_s(PaymentGenerator, \"TkKtkaenIwmMwBumYwJnDUVzEIE=\");\n\n_c = PaymentGenerator;\nexport default PaymentGenerator; // if(count_down_hours == 5){\n//     console.log(`${count_down_hours}`)\n//     setBilling(5)\n//     // setBilling(totalbilling)\n// }else{\n//     setBilling(totalbilling)\n// }\n// NIGHT GOING INTO DAY BREAK\n// Set Selected time here for tracking and to be pushed to local storage by confirm BTN\n//     setTime(parseInt(`${hours}${minutes}`))\n// }, [hours, minutes])\n//    THEY ARE HERE\n// night_overlap_time = Math.round((night_overlap_cost + Number.EPSILON) * 100) / 100\n// how much day time \n// console.log(`/daytime: ${day_overlap_time}`)\n// //day time cost \n// console.log(`/daytime_billing: ${daytime_billing + overlap_billing}`)\n// //how much night time\n// console.log(`/nighttime: ${night_overlap_time}`)\n// // night time cost \n// console.log(`night Cost: $${overlap_billing}`)\n// STRICTLY DAYTIME\n// // DAYTIME OVERLAPPING TO NIGHT \n// else \n// // STRICTLY NIGHT CALCULATIONS\n// else \n// else \n////////////////////////////////////////////////////////////////////////////////\n// Day to night\n// if (currentTime <= 1800 && accumalatedTime > 1800) { //current_time >\n//     night_overlap_time = accumalatedTime - 1800\n//     if (night_overlap_time < 60) {\n//         console.log(night_overlap_time)\n//         night_overlap_cost = 1 * night_hourly_rate //.1 is dollar value of 6 dollars per hour\n//     }\n//     else {\n//         night_overlap_cost = night_overlap_time * night_hourly_rate //.1 is dollar value of 6 dollars per hour\n//     }\n//     // Math.floor((1800-currentTime) / 100)\n//     daytimeHour = Math.floor((1800 - currentTime) / 100)// selected hours before night time\n//     reg_day_time_min_algorythm = Math.floor(60 - (currentTime % 100))\n//     if (reg_day_time_min_algorythm == 60) {\n//         reg_day_time_min_algorythm = `${0}${0}`\n//     }\n//     daytimeMin = reg_day_time_min_algorythm // selected mins before night time\n//     dayTime = parseInt(`${daytimeHour}${daytimeMin}`)\n//     daytime_billing = daytimeHour * hourly_rate\n//     if (night_overlap_time > 99) {\n//         newNightTIme_hour = Math.floor(night_overlap_time / 100)\n//         newNightTIme_min = Math.floor(night_overlap_time % 100)\n//         overlap_billing = (newNightTIme_hour * night_hourly_rate)\n//         night_overlap_time = parseInt(`${newNightTIme_hour}${newNightTIme_min}`)\n//     } else {\n//         overlap_billing = Math.round((night_overlap_cost + Number.EPSILON) * 100) / 100\n//     }\n//     if (night_overlap_time < 99 && night_overlap_time > 60) {\n//         newNightTIme_hour = Math.floor(night_overlap_time / 60)\n//         newNightTIme_min = Math.floor(night_overlap_time % 60)\n//         overlap_billing = (newNightTIme_hour * night_hourly_rate)\n//         night_overlap_time = parseInt(`${newNightTIme_hour}`)\n//     }\n//     setDayTime(dayTime)\n//     setDayTimeBilling(daytime_billing)\n//     setNightTime(night_overlap_time)\n//     setNightTimeBilling(overlap_billing)\n//     // daytime_billing = 1800 - currentTime\n//     totalbilling = daytime_billing + overlap_billing\n//     // if the setLimit is greater than 6 and the  \n//     if ((setLimit / 10) >= night_rate_max && accumalatedTime > 1800 || accumalatedTime < 600) {\n//         setBilling(100)\n//     }\n//     else {\n//         setBilling(totalbilling)\n//     }\n//     // Night\n//     if (currentTime > 1800 && accumalatedTime < 2359 || currentTime < 600 && accumalatedTime <= 600) {\n//         dayTime = 0\n//         night_overlap_time = 0\n//         overlap_billing = 0\n//         daytime_billing = 0\n//         nightTime = parseInt(`${hours}`) // Might need\n//         night_time_billing = hours * night_hourly_rate\n//         setDayTime(dayTime)\n//         setDayTimeBilling(daytime_billing)\n//         setNightTime(night_overlap_time)\n//         setNightTimeBilling(night_time_billing)\n//         setBilling(night_time_billing)\n//     }\n//     // NIGHT OVERLAPPING TO DAY \n//     if (currentTime <= 600 && accumalatedTime > 600) { //current_time >\n//         day_overlap_time = accumalatedTime - 600\n//         console.log()\n//         day_overlap_cost = Math.floor(day_overlap_time * .07) //.07 is dollar value of 4 dollars per hour\n//         nighttimeHour = Math.floor((600 - currentTime) / 100) // selected hours before night time\n//         nighttimeMin = Math.floor(60 - (currentTime % 100))// selected mins before night time\n//         nightTime = parseInt(`${nighttimeHour}${nighttimeMin}`)\n//         nighttime_billing = nighttimeHour * night_hourly_rate\n//         if (day_overlap_time > 99) {\n//             newDayTime_hour = Math.floor(day_overlap_time / 100)\n//             newDayTime_min = Math.floor(day_overlap_time % 100)\n//             overlap_billing = Math.round(((newDayTime_hour * 4) + (newDayTime_min * 0.07) + Number.EPSILON) * 100) / 100\n//             day_overlap_time = parseInt(`${newDayTime_hour}${newDayTime_min}`)\n//         } else {\n//             overlap_billing = Math.round((day_overlap_cost + Number.EPSILON) * 100) / 100\n//         }\n//     }\n// }\n// if (count_down_hours == 5) {\n//     console.log(`${count_down_hours}`)\n//     setBilling(5)\n//     // setBilling(totalbilling)\n// } else {\n//     setBilling(totalbilling)\n// }\n// setDayTime(day_overlap_time)\n// setDayTimeBilling(overlap_billing)\n// setNightTime(nightTime)\n// setNightTimeBilling(nighttime_billing)\n// // daytime_billing = 1800 - currentTime\n// totalbilling = Math.round((nighttime_billing + overlap_billing + Number.EPSILON) * 100) / 100\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentGenerator\");","map":{"version":3,"sources":["/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Components/Financials/Calculator/PaymentGenerator.js"],"names":["useEffect","useContext","PaymentContext","Time","PaymentGenerator","hours","minutes","setNightTime","setNightTimeBilling","setDayTime","setDayTimeBilling","setBilling","setTime","timeDate","Date","night_hourly_rate","night_minute_rate","hourly_rate","minute_rate","currentTime","parseInt","getHours","getMinutes","setLimit","accumalatedTime","minuteCheck","hourCheck","Math","floor","count_down_hours","round","reg_day_time_min_algorythm","currentTime_hr","currentTime_min","night_overlap_time","night_overlap_cost","day_overlap_time","day_overlap_cost","nighttimeHour","nighttimeMin","nighttime_billing","newDayTime_hour","newDayTime_min","newNightTIme_hour","newNightTIme_min","newMinutes","newHours","daytime_billing","overlap_billing","daytimeHour","daytimeMin","dayTime","totalbilling","nightTime","night_time_billing","day_rate_max","night_rate_max","check_and_adjust","test","console","log","finding_remaining_hours","Number","EPSILON"],"mappings":"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","sourcesContent":["import { useEffect, useContext } from 'react'\nimport { PaymentContext } from '../../../Context/PaymentContext'\nimport Time from '../../Timer/Time'\n\n\n\n\n\n\nconst PaymentGenerator = (hours, minutes) => {\n    const { setNightTime, setNightTimeBilling, setDayTime, setDayTimeBilling, setBilling, setTime, } = useContext(PaymentContext)\n    const timeDate = new Date()\n    const night_hourly_rate = 1.75\n    const night_minute_rate = 0\n    const hourly_rate = 1.75\n    const minute_rate = 0\n    //parseInt(`${timeDate.getHours()}${timeDate.getMinutes()}`)\n    var currentTime = parseInt(`${timeDate.getHours()}${timeDate.getMinutes()}`)\n    var setLimit = parseInt(`${hours}${minutes}`)\n    var accumalatedTime = currentTime + setLimit\n    var minuteCheck = accumalatedTime % 100\n    var hourCheck = Math.floor(accumalatedTime / 100)\n    var count_down_hours = Math.round((accumalatedTime - currentTime) / 100)\n\n    var reg_day_time_min_algorythm\n    var currentTime_hr\n    var currentTime_min\n    var night_overlap_time\n    var night_overlap_cost\n    var day_overlap_time\n    var day_overlap_cost\n    var nighttimeHour\n    var nighttimeMin\n    var nighttime_billing\n    var newDayTime_hour\n    var newDayTime_min\n    var newNightTIme_hour\n    var newNightTIme_min\n    var newMinutes\n    var newHours\n    var daytime_billing\n    var overlap_billing\n    var daytimeHour\n    var daytimeMin\n    var dayTime\n    var totalbilling\n    var nightTime\n    var night_time_billing\n    var day_rate_max = 3\n    var night_rate_max = 5\n\n\n\n\n\n\n\n\n    const check_and_adjust = () => {\n        // Accumulated Time Check\n        if (hourCheck > 23) {\n            hourCheck = hourCheck - 24\n        }\n        if (minuteCheck >= 60) {\n            newMinutes = minuteCheck - 60\n            newHours = Math.floor((hourCheck) + 1)\n            accumalatedTime = parseInt(`${newHours}${newMinutes}`)\n            if (newMinutes < 10) {\n                accumalatedTime = parseInt(`${newHours}0${newMinutes}`)\n            }\n            if (newMinutes === 0) {\n                accumalatedTime = parseInt(`${newHours}00`)\n            }\n        } else {\n            accumalatedTime = currentTime + setLimit //Current time + Set Limit time\n\n        }\n    }\n    check_and_adjust()\n\n    const test = () => {\n        // Day Time\n        switch (currentTime) {\n            case (currentTime > 600 && accumalatedTime < 1800 ? currentTime : ''):\n                dayTime = parseInt(`${hours}${minutes}`)\n                night_overlap_time = 0\n                overlap_billing = 0\n                daytime_billing = hours * hourly_rate\n                totalbilling = daytime_billing + overlap_billing\n\n                setDayTime(dayTime)\n                setDayTimeBilling(daytime_billing)\n                setNightTime(night_overlap_time)\n                setNightTimeBilling(overlap_billing)\n                console.log(setLimit / 10)\n                const finding_remaining_hours = 18 - timeDate.getHours()\n                if ((setLimit / 10) >= day_rate_max && (setLimit / 10) <= finding_remaining_hours && accumalatedTime < 1800) {\n                    setBilling(100)\n                }\n                else {\n                    setBilling(totalbilling)\n                }\n                break;\n            // Day to night\n            case (currentTime <= 1800 && accumalatedTime > 1800 ? currentTime : ''):\n                night_overlap_time = accumalatedTime - 1800\n                if (night_overlap_time < 60) {\n                    console.log(night_overlap_time)\n                    night_overlap_cost = 1 * night_hourly_rate //.1 is dollar value of 6 dollars per hour\n                }\n                else {\n                    night_overlap_cost = night_overlap_time * night_hourly_rate //.1 is dollar value of 6 dollars per hour\n                }\n\n                // Math.floor((1800-currentTime) / 100)\n                daytimeHour = Math.floor((1800 - currentTime) / 100)// selected hours before night time\n                reg_day_time_min_algorythm = Math.floor(60 - (currentTime % 100))\n                if (reg_day_time_min_algorythm == 60) {\n                    reg_day_time_min_algorythm = `${0}${0}`\n                }\n                daytimeMin = reg_day_time_min_algorythm // selected mins before night time\n                dayTime = parseInt(`${daytimeHour}${daytimeMin}`)\n                daytime_billing = daytimeHour * hourly_rate\n\n\n                if (night_overlap_time > 99) {\n                    newNightTIme_hour = Math.floor(night_overlap_time / 100)\n                    newNightTIme_min = Math.floor(night_overlap_time % 100)\n                    overlap_billing = (newNightTIme_hour * night_hourly_rate)\n                    night_overlap_time = parseInt(`${newNightTIme_hour}${newNightTIme_min}`)\n                } else {\n                    overlap_billing = Math.round((night_overlap_cost + Number.EPSILON) * 100) / 100\n                }\n                if (night_overlap_time < 99 && night_overlap_time > 60) {\n                    newNightTIme_hour = Math.floor(night_overlap_time / 60)\n                    newNightTIme_min = Math.floor(night_overlap_time % 60)\n                    overlap_billing = (newNightTIme_hour * night_hourly_rate)\n                    night_overlap_time = parseInt(`${newNightTIme_hour}`)\n                }\n                setDayTime(dayTime)\n                setDayTimeBilling(daytime_billing)\n                setNightTime(night_overlap_time)\n                setNightTimeBilling(overlap_billing)\n\n                // daytime_billing = 1800 - currentTime\n                totalbilling = daytime_billing + overlap_billing\n                // if the setLimit is greater than 6 and the  \n                if ((setLimit / 10) >= night_rate_max && accumalatedTime > 1800 || accumalatedTime < 600) {\n                    setBilling(100)\n                }\n                else {\n                    setBilling(totalbilling)\n                }\n                break;\n            // Night\n            case (currentTime > 1800 && accumalatedTime < 2359 || currentTime < 600 && accumalatedTime <= 600 ? currentTime : ''):\n                dayTime = 0\n                night_overlap_time = 0\n                overlap_billing = 0\n                daytime_billing = 0\n                nightTime = parseInt(`${hours}`) // Might need\n                night_time_billing = hours * night_hourly_rate\n\n\n                setDayTime(dayTime)\n                setDayTimeBilling(daytime_billing)\n                setNightTime(night_overlap_time)\n                setNightTimeBilling(night_time_billing)\n                setBilling(night_time_billing)\n\n\n                break;\n            // NIGHT OVERLAPPING TO DAY \n            case (currentTime <= 600 && accumalatedTime > 600):\n                day_overlap_time = accumalatedTime - 600\n                console.log()\n                day_overlap_cost = Math.floor(day_overlap_time * .07) //.07 is dollar value of 4 dollars per hour\n\n                nighttimeHour = Math.floor((600 - currentTime) / 100) // selected hours before night time\n                nighttimeMin = Math.floor(60 - (currentTime % 100))// selected mins before night time\n                nightTime = parseInt(`${nighttimeHour}${nighttimeMin}`)\n                nighttime_billing = nighttimeHour * night_hourly_rate\n\n\n                if (day_overlap_time > 99) {\n                    newDayTime_hour = Math.floor(day_overlap_time / 100)\n                    newDayTime_min = Math.floor(day_overlap_time % 100)\n                    overlap_billing = Math.round(((newDayTime_hour * 4) + (newDayTime_min * 0.07) + Number.EPSILON) * 100) / 100\n                    day_overlap_time = parseInt(`${newDayTime_hour}${newDayTime_min}`)\n                } else {\n                    overlap_billing = Math.round((day_overlap_cost + Number.EPSILON) * 100) / 100\n                }\n                break;\n\n        }\n\n\n        if (count_down_hours == 5) {\n            console.log(`${count_down_hours}`)\n            setBilling(5)\n            // setBilling(totalbilling)\n        } else {\n            setBilling(totalbilling)\n        }\n\n\n        setDayTime(day_overlap_time)\n        setDayTimeBilling(overlap_billing)\n        setNightTime(nightTime)\n        setNightTimeBilling(nighttime_billing)\n\n        // daytime_billing = 1800 - currentTime\n        totalbilling = Math.round((nighttime_billing + overlap_billing + Number.EPSILON) * 100) / 100\n    }\n\n\n\n\n\n\n\n\n\n    useEffect(() => {\n        test()\n    }, [test])\n}\n\n\n\n\n\n\n\nexport default PaymentGenerator;\n        // if(count_down_hours == 5){\n        //     console.log(`${count_down_hours}`)\n        //     setBilling(5)\n        //     // setBilling(totalbilling)\n        // }else{\n        //     setBilling(totalbilling)\n        // }\n\n\n        // NIGHT GOING INTO DAY BREAK\n\n        // Set Selected time here for tracking and to be pushed to local storage by confirm BTN\n    //     setTime(parseInt(`${hours}${minutes}`))\n    // }, [hours, minutes])\n\n        //    THEY ARE HERE\n            // night_overlap_time = Math.round((night_overlap_cost + Number.EPSILON) * 100) / 100\n            // how much day time \n            // console.log(`/daytime: ${day_overlap_time}`)\n            // //day time cost \n            // console.log(`/daytime_billing: ${daytime_billing + overlap_billing}`)\n            // //how much night time\n            // console.log(`/nighttime: ${night_overlap_time}`)\n            // // night time cost \n            // console.log(`night Cost: $${overlap_billing}`)\n\n\n\n\n\n\n\n\n\n\n\n\n        // STRICTLY DAYTIME\n\n\n\n        // // DAYTIME OVERLAPPING TO NIGHT \n        // else \n\n        // // STRICTLY NIGHT CALCULATIONS\n        // else \n        // else \n\n\n\n\n\n////////////////////////////////////////////////////////////////////////////////\n// Day to night\n// if (currentTime <= 1800 && accumalatedTime > 1800) { //current_time >\n//     night_overlap_time = accumalatedTime - 1800\n//     if (night_overlap_time < 60) {\n//         console.log(night_overlap_time)\n//         night_overlap_cost = 1 * night_hourly_rate //.1 is dollar value of 6 dollars per hour\n//     }\n//     else {\n//         night_overlap_cost = night_overlap_time * night_hourly_rate //.1 is dollar value of 6 dollars per hour\n//     }\n\n//     // Math.floor((1800-currentTime) / 100)\n//     daytimeHour = Math.floor((1800 - currentTime) / 100)// selected hours before night time\n//     reg_day_time_min_algorythm = Math.floor(60 - (currentTime % 100))\n//     if (reg_day_time_min_algorythm == 60) {\n//         reg_day_time_min_algorythm = `${0}${0}`\n//     }\n//     daytimeMin = reg_day_time_min_algorythm // selected mins before night time\n//     dayTime = parseInt(`${daytimeHour}${daytimeMin}`)\n//     daytime_billing = daytimeHour * hourly_rate\n\n\n//     if (night_overlap_time > 99) {\n//         newNightTIme_hour = Math.floor(night_overlap_time / 100)\n//         newNightTIme_min = Math.floor(night_overlap_time % 100)\n//         overlap_billing = (newNightTIme_hour * night_hourly_rate)\n//         night_overlap_time = parseInt(`${newNightTIme_hour}${newNightTIme_min}`)\n//     } else {\n//         overlap_billing = Math.round((night_overlap_cost + Number.EPSILON) * 100) / 100\n//     }\n//     if (night_overlap_time < 99 && night_overlap_time > 60) {\n//         newNightTIme_hour = Math.floor(night_overlap_time / 60)\n//         newNightTIme_min = Math.floor(night_overlap_time % 60)\n//         overlap_billing = (newNightTIme_hour * night_hourly_rate)\n//         night_overlap_time = parseInt(`${newNightTIme_hour}`)\n//     }\n//     setDayTime(dayTime)\n//     setDayTimeBilling(daytime_billing)\n//     setNightTime(night_overlap_time)\n//     setNightTimeBilling(overlap_billing)\n\n//     // daytime_billing = 1800 - currentTime\n//     totalbilling = daytime_billing + overlap_billing\n//     // if the setLimit is greater than 6 and the  \n//     if ((setLimit / 10) >= night_rate_max && accumalatedTime > 1800 || accumalatedTime < 600) {\n//         setBilling(100)\n//     }\n//     else {\n//         setBilling(totalbilling)\n//     }\n\n\n\n//     // Night\n//     if (currentTime > 1800 && accumalatedTime < 2359 || currentTime < 600 && accumalatedTime <= 600) {\n//         dayTime = 0\n//         night_overlap_time = 0\n//         overlap_billing = 0\n//         daytime_billing = 0\n//         nightTime = parseInt(`${hours}`) // Might need\n//         night_time_billing = hours * night_hourly_rate\n\n\n//         setDayTime(dayTime)\n//         setDayTimeBilling(daytime_billing)\n//         setNightTime(night_overlap_time)\n//         setNightTimeBilling(night_time_billing)\n//         setBilling(night_time_billing)\n\n//     }\n\n//     // NIGHT OVERLAPPING TO DAY \n//     if (currentTime <= 600 && accumalatedTime > 600) { //current_time >\n\n//         day_overlap_time = accumalatedTime - 600\n//         console.log()\n//         day_overlap_cost = Math.floor(day_overlap_time * .07) //.07 is dollar value of 4 dollars per hour\n\n//         nighttimeHour = Math.floor((600 - currentTime) / 100) // selected hours before night time\n//         nighttimeMin = Math.floor(60 - (currentTime % 100))// selected mins before night time\n//         nightTime = parseInt(`${nighttimeHour}${nighttimeMin}`)\n//         nighttime_billing = nighttimeHour * night_hourly_rate\n\n\n//         if (day_overlap_time > 99) {\n//             newDayTime_hour = Math.floor(day_overlap_time / 100)\n//             newDayTime_min = Math.floor(day_overlap_time % 100)\n//             overlap_billing = Math.round(((newDayTime_hour * 4) + (newDayTime_min * 0.07) + Number.EPSILON) * 100) / 100\n//             day_overlap_time = parseInt(`${newDayTime_hour}${newDayTime_min}`)\n//         } else {\n//             overlap_billing = Math.round((day_overlap_cost + Number.EPSILON) * 100) / 100\n//         }\n\n//     }\n\n// }\n\n\n\n// if (count_down_hours == 5) {\n//     console.log(`${count_down_hours}`)\n//     setBilling(5)\n//     // setBilling(totalbilling)\n// } else {\n//     setBilling(totalbilling)\n// }\n\n\n// setDayTime(day_overlap_time)\n// setDayTimeBilling(overlap_billing)\n// setNightTime(nightTime)\n// setNightTimeBilling(nighttime_billing)\n\n// // daytime_billing = 1800 - currentTime\n// totalbilling = Math.round((nighttime_billing + overlap_billing + Number.EPSILON) * 100) / 100"]},"metadata":{},"sourceType":"module"}