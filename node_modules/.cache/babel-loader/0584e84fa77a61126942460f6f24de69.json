{"ast":null,"code":"import { Component } from 'react';\n\nclass MaxSelection extends Component {\n  constructor(props) {\n    super(props);\n\n    this.set_conditions = () => {\n      switch (this.hour) {\n        case this.hour < 18 && this.hour > 6 ? this.hour : '':\n          localStorage.setItem('max', 1);\n          const remaining_time = this.hour;\n          this.max_num = parseFloat(`0.0${remaining_time}`);\n\n          if (this.localStorateMax == 1) {\n            this.max_num = 0.12;\n          }\n\n          break;\n\n        case this.hour >= 18 && this.hour < 24 ? this.hour : '':\n          localStorage.setItem('max', 1);\n          const rem_time = 24 - this.hour + 6;\n          this.max_num = rem_time > 9 ? this.max_num = parseFloat(`0.${rem_time}`) : parseFloat(`0.0${rem_time}`);\n\n          if (this.localStorateMax == 1) {\n            this.max_num = 0.12;\n          }\n\n          break;\n\n        case this.hour < 6 ? this.hour : '':\n          localStorage.setItem('max', 1);\n          const rem_hr = this.hour;\n          this.max_num = 0.12;\n\n          if (this.localStorateMax == 1) {\n            this.max_num = 0.12;\n          }\n\n          break;\n      }\n\n      return this.max_num;\n    };\n\n    this.date = new Date();\n    this.getExpTime = localStorage.getItem('expTime').split(':');\n    this.hours = this.getExpTime[0];\n    this.hour = this.date.getHours();\n    this.minutes = this.date.getMinutes();\n    this.localStorateMax = localStorage.getItem('max');\n    this.max_num = 0.00;\n  } // init_check = () =>{ \n  //     if (this.localStorateMax == 0) {\n  //         console.log('localStorage = 0')\n  //                     switch (this.hour) {\n  //                     case(this.hour < 18 && this.hour >6):\n  //                         const remaining_time = this.hour\n  //                         this.max_num = parseFloat(`0.0${remaining_time}`)\n  //                         break;\n  //                     case (this.hour >= 18 && this.hour < 24 ?):\n  //                         const rem_time = (24 - this.hour) + 6\n  //                         this.max_num = (rem_time > 9 ? this.max_num = parseFloat(`0.${rem_time}`) : parseFloat(`0.0${rem_time}`))\n  //                         break;\n  //                     case(this.hour <6):\n  //                         const rem_hr = this.hour\n  //                         this.max_num = `0.0${rem_hr}`\n  //                         break;\n  //                 }\n  //                     \n  //     }\n  // }\n  // seconds_calculation = () =>{ \n  //     this.hours * 3600\n  //     this.mins * 60\n  //     return  (this.hours)\n  // }\n\n\n}\n\nexport default MaxSelection; // if (this.localStorateMax == 0) {\n//     this.init_check()\n//     console.log('sero')\n// }\n// else if(this.localStorateMax == 1){ \n//     this.max_num = '0.12'\n// }\n// get the localstorage exp time and match it with 6\n// if match, we're going to assign the this.max_num variable to 12\n// if it is not 6, then we're going to switch case and return the result to this.max_num\n// \tif (localStorage_ == 1) {\n// \t\tthis.max_num = '0.12'\n// \t\tconsole.log('still shows under condition')\n// \t}\n// \tif (localStorage_ = 0){ \n// \t\tconsole.log('Not equal to 6')\n// \t}\n// }","map":{"version":3,"sources":["/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Components/max_selection/MaxSelection.js"],"names":["Component","MaxSelection","constructor","props","set_conditions","hour","localStorage","setItem","remaining_time","max_num","parseFloat","localStorateMax","rem_time","rem_hr","date","Date","getExpTime","getItem","split","hours","getHours","minutes","getMinutes"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;;AAIA,MAAMC,YAAN,SAA2BD,SAA3B,CAAqC;AACjCE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAyCnBC,cAzCmB,GAyCF,MAAM;AACnB,cAAO,KAAKC,IAAZ;AACI,aAAM,KAAKA,IAAL,GAAY,EAAZ,IAAkB,KAAKA,IAAL,GAAY,CAA9B,GAAgC,KAAKA,IAArC,GAA0C,EAAhD;AACIC,UAAAA,YAAY,CAACC,OAAb,CAAqB,KAArB,EAA4B,CAA5B;AACA,gBAAMC,cAAc,GAAG,KAAKH,IAA5B;AACA,eAAKI,OAAL,GAAeC,UAAU,CAAE,MAAKF,cAAe,EAAtB,CAAzB;;AACA,cAAI,KAAKG,eAAL,IAAwB,CAA5B,EAA+B;AAC3B,iBAAKF,OAAL,GAAe,IAAf;AACH;;AACL;;AACA,aAAK,KAAKJ,IAAL,IAAa,EAAb,IAAmB,KAAKA,IAAL,GAAY,EAA/B,GAAkC,KAAKA,IAAvC,GAA4C,EAAjD;AACIC,UAAAA,YAAY,CAACC,OAAb,CAAqB,KAArB,EAA4B,CAA5B;AACA,gBAAMK,QAAQ,GAAI,KAAK,KAAKP,IAAX,GAAmB,CAApC;AAEA,eAAKI,OAAL,GAAgBG,QAAQ,GAAG,CAAX,GAAe,KAAKH,OAAL,GAAeC,UAAU,CAAE,KAAIE,QAAS,EAAf,CAAxC,GAA4DF,UAAU,CAAE,MAAKE,QAAS,EAAhB,CAAtF;;AACA,cAAI,KAAKD,eAAL,IAAwB,CAA5B,EAA+B;AAC3B,iBAAKF,OAAL,GAAe,IAAf;AACH;;AACL;;AACA,aAAK,KAAKJ,IAAL,GAAY,CAAZ,GAAc,KAAKA,IAAnB,GAAwB,EAA7B;AACIC,UAAAA,YAAY,CAACC,OAAb,CAAqB,KAArB,EAA4B,CAA5B;AACA,gBAAMM,MAAM,GAAG,KAAKR,IAApB;AAEA,eAAKI,OAAL,GAAe,IAAf;;AACA,cAAI,KAAKE,eAAL,IAAwB,CAA5B,EAA+B;AAC3B,iBAAKF,OAAL,GAAe,IAAf;AACH;;AACL;AA1BJ;;AA+BA,aAAO,KAAKA,OAAZ;AAEH,KA3EkB;;AAEf,SAAKK,IAAL,GAAY,IAAIC,IAAJ,EAAZ;AACA,SAAKC,UAAL,GAAkBV,YAAY,CAACW,OAAb,CAAqB,SAArB,EAAgCC,KAAhC,CAAsC,GAAtC,CAAlB;AACA,SAAKC,KAAL,GAAa,KAAKH,UAAL,CAAgB,CAAhB,CAAb;AACA,SAAKX,IAAL,GAAY,KAAKS,IAAL,CAAUM,QAAV,EAAZ;AACA,SAAKC,OAAL,GAAe,KAAKP,IAAL,CAAUQ,UAAV,EAAf;AACA,SAAKX,eAAL,GAAuBL,YAAY,CAACW,OAAb,CAAqB,KAArB,CAAvB;AACA,SAAKR,OAAL,GAAe,IAAf;AAEH,GAXgC,CAcjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAxCiC;;AA+ErC,eAAeR,YAAf,C,CAEQ;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEN;AACA;AACA;AACD;AACA;AACA;AACA;AACA;AAEA;AACA;AACA","sourcesContent":["import { Component } from 'react'\n\n\n\nclass MaxSelection extends Component {\n    constructor(props) {\n        super(props)\n        this.date = new Date()\n        this.getExpTime = localStorage.getItem('expTime').split(':')\n        this.hours = this.getExpTime[0]\n        this.hour = this.date.getHours()\n        this.minutes = this.date.getMinutes()\n        this.localStorateMax = localStorage.getItem('max')\n        this.max_num = 0.00\n\n    }\n\n\n    // init_check = () =>{ \n    //     if (this.localStorateMax == 0) {\n    //         console.log('localStorage = 0')\n    //                     switch (this.hour) {\n    //                     case(this.hour < 18 && this.hour >6):\n    //                         const remaining_time = this.hour\n    //                         this.max_num = parseFloat(`0.0${remaining_time}`)\n    //                         break;\n    //                     case (this.hour >= 18 && this.hour < 24 ?):\n    //                         const rem_time = (24 - this.hour) + 6\n    //                         this.max_num = (rem_time > 9 ? this.max_num = parseFloat(`0.${rem_time}`) : parseFloat(`0.0${rem_time}`))\n    //                         break;\n    //                     case(this.hour <6):\n    //                         const rem_hr = this.hour\n    //                         this.max_num = `0.0${rem_hr}`\n\n    //                         break;\n    //                 }\n    //                     \n    //     }\n    // }\n\n    // seconds_calculation = () =>{ \n    //     this.hours * 3600\n    //     this.mins * 60\n    //     return  (this.hours)\n    // }\n\n    set_conditions = () => {\n        switch(this.hour){ \n            case (this.hour < 18 && this.hour > 6?this.hour:''):\n                localStorage.setItem('max', 1)\n                const remaining_time = this.hour\n                this.max_num = parseFloat(`0.0${remaining_time}`)\n                if (this.localStorateMax == 1) {\n                    this.max_num = 0.12\n                }\n            break;\n            case(this.hour >= 18 && this.hour < 24?this.hour:''):\n                localStorage.setItem('max', 1)\n                const rem_time = (24 - this.hour) + 6\n    \n                this.max_num = (rem_time > 9 ? this.max_num = parseFloat(`0.${rem_time}`) : parseFloat(`0.0${rem_time}`))\n                if (this.localStorateMax == 1) {\n                    this.max_num = 0.12\n                }\n            break;\n            case(this.hour < 6?this.hour:''):\n                localStorage.setItem('max', 1)\n                const rem_hr = this.hour\n    \n                this.max_num = 0.12\n                if (this.localStorateMax == 1) {\n                    this.max_num = 0.12\n                }\n            break;\n            \n        }\n       \n\n        return this.max_num\n\n    }\n}\n\nexport default MaxSelection;\n\n        // if (this.localStorateMax == 0) {\n        //     this.init_check()\n        //     console.log('sero')\n        // }\n        // else if(this.localStorateMax == 1){ \n\n        //     this.max_num = '0.12'\n\n        // }\n\n\t\t// get the localstorage exp time and match it with 6\n\t\t// if match, we're going to assign the this.max_num variable to 12\n\t\t// if it is not 6, then we're going to switch case and return the result to this.max_num\n\t// \tif (localStorage_ == 1) {\n\t// \t\tthis.max_num = '0.12'\n\t// \t\tconsole.log('still shows under condition')\n\t// \t}\n\t// \tif (localStorage_ = 0){ \n\n\t// \t\tconsole.log('Not equal to 6')\n\t// \t}\n\t// }\n"]},"metadata":{},"sourceType":"module"}