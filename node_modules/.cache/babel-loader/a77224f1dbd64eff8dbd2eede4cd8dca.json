{"ast":null,"code":"import{useEffect,useContext}from'react';import{PaymentContext}from'../../../Context/PaymentContext';var PaymentGenerator=function PaymentGenerator(hours,minutes){var _useContext=useContext(PaymentContext),setNightTime=_useContext.setNightTime,setNightTimeBilling=_useContext.setNightTimeBilling,setDayTime=_useContext.setDayTime,setDayTimeBilling=_useContext.setDayTimeBilling,setBilling=_useContext.setBilling,setTime=_useContext.setTime;var timeDate=new Date();var night_hourly_rate=6;var night_minute_rate=1.5;var hourly_rate=4;var minute_rate=1;//parseInt(`${timeDate.getHours()}${timeDate.getMinutes()}`)\nvar currentTime=parseInt(\"\".concat(timeDate.getHours()).concat(timeDate.getMinutes()));var setLimit=parseInt(\"\".concat(hours).concat(minutes));var accumalatedTime=currentTime+setLimit;var minuteCheck=accumalatedTime%100;var hourCheck=Math.floor(accumalatedTime/100);var reg_day_time_min_algorythm;var currentTime_hr;var currentTime_min;var night_overlap_time;var night_overlap_cost;var day_overlap_time;var day_overlap_cost;var nighttimeHour;var nighttimeMin;var nighttime_billing;var newDayTime_hour;var newDayTime_min;var newNightTIme_hour;var newNightTIme_min;var newMinutes;var newHours;var daytime_billing;var overlap_billing;var daytimeHour;var daytimeMin;var dayTime;var totalbilling;var nightTime;var night_time_billing;// Accumulated Time Check\nif(hourCheck>23){hourCheck=hourCheck-24;}if(minuteCheck>=60){newMinutes=minuteCheck-60;newHours=Math.floor(hourCheck+1);accumalatedTime=parseInt(\"\".concat(newHours).concat(newMinutes));if(newMinutes<10){accumalatedTime=parseInt(\"\".concat(newHours,\"0\").concat(newMinutes));}if(newMinutes===0){accumalatedTime=parseInt(\"\".concat(newHours,\"00\"));}}else{accumalatedTime=currentTime+setLimit;//Current time + Set Limit time\n}useEffect(function(){console.log(\"/hour: \".concat(hours));console.log(\"/minute: \".concat(minutes));console.log(\"currentTime: \".concat(currentTime));// STRICTLY DAYTIME\nif(currentTime>600&&accumalatedTime<=1800){// current_time < \ndayTime=parseInt(\"\".concat(hours).concat(minutes));night_overlap_time=0;overlap_billing=0;daytime_billing=hours*hourly_rate+minutes/15*minute_rate;totalbilling=daytime_billing+overlap_billing;// how much day time \nconsole.log(\"/daytime: \".concat(dayTime));//day time cost \nconsole.log(\"/daytime_billing: \".concat(daytime_billing));//how much night time\nconsole.log(\"/nighttime: \".concat(night_overlap_time));// night time cost \nconsole.log(\"night Cost: $\".concat(overlap_billing));setDayTime(dayTime);setDayTimeBilling(daytime_billing);setNightTime(night_overlap_time);setNightTimeBilling(overlap_billing);setBilling(totalbilling);}// DAYTIME OVERLAPPING TO NIGHT \nelse if(currentTime<=1800&&accumalatedTime>1800){//current_time >\nnight_overlap_time=accumalatedTime-1800;night_overlap_cost=night_overlap_time*.1;//.1 is dollar value of 6 dollars per hour\n// Math.floor((1800-currentTime) / 100)\ndaytimeHour=Math.floor((1800-currentTime)/100);// selected hours before night time\nreg_day_time_min_algorythm=Math.floor(60-currentTime%100);if(reg_day_time_min_algorythm===60){reg_day_time_min_algorythm=\"\".concat(0,0);}daytimeMin=reg_day_time_min_algorythm;// selected mins before night time\ndayTime=parseInt(\"\".concat(daytimeHour).concat(daytimeMin));daytime_billing=daytimeHour*hourly_rate+Math.floor(daytimeMin*0.27);if(night_overlap_time>99){newNightTIme_hour=Math.floor(night_overlap_time/100);newNightTIme_min=Math.floor(night_overlap_time%100);overlap_billing=newNightTIme_hour*6+newNightTIme_min*0.1;night_overlap_time=parseInt(\"\".concat(newNightTIme_hour).concat(newNightTIme_min));}else{overlap_billing=Math.round((night_overlap_cost+Number.EPSILON)*100)/100;}if(night_overlap_time<99&&night_overlap_time>60){newNightTIme_hour=Math.floor(night_overlap_time/60);newNightTIme_min=Math.floor(night_overlap_time%60);overlap_billing=newNightTIme_hour*6+newNightTIme_min*0.1;night_overlap_time=parseInt(\"\".concat(newNightTIme_hour).concat(newNightTIme_min));}// how much day time \nconsole.log(\"/daytime: \".concat(dayTime));//day time cost \nconsole.log(\"/daytime_billing: \".concat(daytime_billing+overlap_billing));//how much night time\nconsole.log(\"/nighttime: \".concat(night_overlap_time));// night time cost \nconsole.log(\"night Cost: $\".concat(overlap_billing));setDayTime(dayTime);setDayTimeBilling(daytime_billing);setNightTime(night_overlap_time);setNightTimeBilling(overlap_billing);// daytime_billing = 1800 - currentTime\ntotalbilling=daytime_billing+overlap_billing;setBilling(totalbilling);//daytime billing\n}// STRICTLY NIGHT CALCULATIONS\nelse if(currentTime>1800&&accumalatedTime<2359||currentTime<600&&accumalatedTime<=600){dayTime=0;night_overlap_time=0;overlap_billing=0;daytime_billing=0;nightTime=parseInt(\"\".concat(hours).concat(minutes));// Might need\nnight_time_billing=hours*night_hourly_rate+minutes/15*night_minute_rate;setDayTime(dayTime);setDayTimeBilling(daytime_billing);setNightTime(night_overlap_time);setNightTimeBilling(night_time_billing);setBilling(night_time_billing);}// NIGHT OVERLAPPING TO DAY \nelse if(currentTime<=600&&accumalatedTime>600){//current_time >\nday_overlap_time=accumalatedTime-600;day_overlap_cost=Math.floor(day_overlap_time*.07);//.07 is dollar value of 4 dollars per hour\nnighttimeHour=Math.floor((600-currentTime)/100);// selected hours before night time\nnighttimeMin=Math.floor(60-currentTime%100);// selected mins before night time\nnightTime=parseInt(\"\".concat(nighttimeHour).concat(nighttimeMin));nighttime_billing=nighttimeHour*night_hourly_rate+Math.floor(nighttimeMin*0.07);if(day_overlap_time>99){newDayTime_hour=Math.floor(day_overlap_time/100);newDayTime_min=Math.floor(day_overlap_time%100);overlap_billing=Math.round((newDayTime_hour*4+newDayTime_min*0.07+Number.EPSILON)*100)/100;day_overlap_time=parseInt(\"\".concat(newDayTime_hour).concat(newDayTime_min));}else{overlap_billing=Math.round((day_overlap_cost+Number.EPSILON)*100)/100;}// night_overlap_time = Math.round((night_overlap_cost + Number.EPSILON) * 100) / 100\n// how much day time \nconsole.log(\"/daytime: \".concat(day_overlap_time));//day time cost \nconsole.log(\"/daytime_billing: \".concat(daytime_billing+overlap_billing));//how much night time\nconsole.log(\"/nighttime: \".concat(night_overlap_time));// night time cost \nconsole.log(\"night Cost: $\".concat(overlap_billing));setDayTime(day_overlap_time);setDayTimeBilling(overlap_billing);setNightTime(nightTime);setNightTimeBilling(nighttime_billing);// daytime_billing = 1800 - currentTime\ntotalbilling=Math.round((nighttime_billing+overlap_billing+Number.EPSILON)*100)/100;setBilling(totalbilling);//daytime billing\n}// NIGHT GOING INTO DAY BREAK\n// Set Selected time here for tracking and to be pushed to local storage by confirm BTN\nsetTime(parseInt(\"\".concat(hours).concat(minutes)));},[hours,minutes]);};export default PaymentGenerator;","map":{"version":3,"sources":["/Users/bottlecapmedia/Desktop/OneShot Parking/src/Components/Financials/Calculator/PaymentGenerator.js"],"names":["useEffect","useContext","PaymentContext","PaymentGenerator","hours","minutes","setNightTime","setNightTimeBilling","setDayTime","setDayTimeBilling","setBilling","setTime","timeDate","Date","night_hourly_rate","night_minute_rate","hourly_rate","minute_rate","currentTime","parseInt","getHours","getMinutes","setLimit","accumalatedTime","minuteCheck","hourCheck","Math","floor","reg_day_time_min_algorythm","currentTime_hr","currentTime_min","night_overlap_time","night_overlap_cost","day_overlap_time","day_overlap_cost","nighttimeHour","nighttimeMin","nighttime_billing","newDayTime_hour","newDayTime_min","newNightTIme_hour","newNightTIme_min","newMinutes","newHours","daytime_billing","overlap_billing","daytimeHour","daytimeMin","dayTime","totalbilling","nightTime","night_time_billing","console","log","round","Number","EPSILON"],"mappings":"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","sourcesContent":["import { useEffect, useContext } from 'react'\nimport { PaymentContext } from '../../../Context/PaymentContext'\n\n\n\n\n\n\nconst PaymentGenerator = (hours, minutes) => {\n    const {setNightTime, setNightTimeBilling, setDayTime, setDayTimeBilling, setBilling, setTime,} = useContext(PaymentContext)\n    const timeDate = new Date()\n    const night_hourly_rate = 6\n    const night_minute_rate = 1.5\n    const hourly_rate = 4\n    const minute_rate = 1\n    //parseInt(`${timeDate.getHours()}${timeDate.getMinutes()}`)\n    var currentTime = parseInt(`${timeDate.getHours()}${timeDate.getMinutes()}`)\n    var setLimit = parseInt(`${hours}${minutes}`)\n    var accumalatedTime = currentTime + setLimit\n    var minuteCheck = accumalatedTime % 100\n    var hourCheck =  Math.floor(accumalatedTime / 100)\n    var reg_day_time_min_algorythm\n    var currentTime_hr\n    var currentTime_min\n    var night_overlap_time\n    var night_overlap_cost\n    var day_overlap_time\n    var day_overlap_cost\n    var nighttimeHour\n    var nighttimeMin\n    var nighttime_billing\n    var newDayTime_hour\n    var newDayTime_min\n    var newNightTIme_hour\n    var newNightTIme_min\n    var newMinutes\n    var newHours\n    var daytime_billing\n    var overlap_billing\n    var daytimeHour\n    var daytimeMin\n    var dayTime\n    var totalbilling\n    var nightTime\n    var night_time_billing\n\n\n// Accumulated Time Check\n    if(hourCheck > 23){\n        hourCheck = hourCheck - 24\n    }\n    if( minuteCheck >= 60){\n        newMinutes = minuteCheck - 60\n        newHours = Math.floor((hourCheck) + 1)\n        accumalatedTime = parseInt(`${newHours}${newMinutes}`)\n    if(newMinutes < 10){\n            accumalatedTime = parseInt(`${newHours}0${newMinutes}`)\n    }\n    if(newMinutes === 0){\n        accumalatedTime = parseInt(`${newHours}00`)\n    }\n    }else {\n        accumalatedTime = currentTime + setLimit //Current time + Set Limit time\n   \n    }\n\n\n    \n    useEffect(()=>{\n        console.log(`/hour: ${hours}`)\n           console.log(`/minute: ${minutes}`)\n           console.log(`currentTime: ${currentTime}`)\n\n        // STRICTLY DAYTIME\n        if(currentTime > 600 && accumalatedTime <= 1800){ // current_time < \n            dayTime = parseInt(`${hours}${minutes}`)\n            night_overlap_time = 0\n            overlap_billing = 0\n            daytime_billing = hours * hourly_rate + (minutes / 15) * minute_rate\n            totalbilling = daytime_billing + overlap_billing\n\n            // how much day time \n            console.log(`/daytime: ${dayTime}`)\n\n            //day time cost \n            console.log(`/daytime_billing: ${daytime_billing}`)\n            //how much night time\n            console.log(`/nighttime: ${night_overlap_time}`)\n            // night time cost \n            console.log(`night Cost: $${overlap_billing}`)\n\n            setDayTime(dayTime)\n            setDayTimeBilling(daytime_billing)\n            setNightTime(night_overlap_time)\n            setNightTimeBilling(overlap_billing)\n            setBilling(totalbilling)\n        }        \n\n        // DAYTIME OVERLAPPING TO NIGHT \n        else if(currentTime <= 1800 && accumalatedTime > 1800){ //current_time >\n            \n            night_overlap_time = accumalatedTime - 1800\n            night_overlap_cost = night_overlap_time * .1 //.1 is dollar value of 6 dollars per hour\n\n            // Math.floor((1800-currentTime) / 100)\n            daytimeHour = Math.floor((1800-currentTime) / 100)// selected hours before night time\n            reg_day_time_min_algorythm = Math.floor(60 - (currentTime % 100))\n            if(reg_day_time_min_algorythm === 60){\n                reg_day_time_min_algorythm = `${0}${0}`\n            }\n            daytimeMin = reg_day_time_min_algorythm// selected mins before night time\n            dayTime = parseInt(`${daytimeHour}${daytimeMin}`)\n            daytime_billing = daytimeHour * hourly_rate + Math.floor(daytimeMin * 0.27)\n        \n\n            if(night_overlap_time > 99){\n             newNightTIme_hour = Math.floor(night_overlap_time / 100)\n             newNightTIme_min = Math.floor(night_overlap_time % 100)\n             overlap_billing = (newNightTIme_hour * 6) + (newNightTIme_min * 0.1)\n             night_overlap_time = parseInt(`${newNightTIme_hour}${newNightTIme_min}`)\n           }else{\n            overlap_billing = Math.round((night_overlap_cost + Number.EPSILON) * 100) / 100\n            }\n           if(night_overlap_time < 99 && night_overlap_time > 60 ){\n            newNightTIme_hour = Math.floor(night_overlap_time / 60)\n            newNightTIme_min = Math.floor(night_overlap_time % 60)\n            overlap_billing = (newNightTIme_hour * 6) + (newNightTIme_min * 0.1)\n            night_overlap_time = parseInt(`${newNightTIme_hour}${newNightTIme_min}`)\n           }\n           \n           \n            // how much day time \n            console.log(`/daytime: ${dayTime}`)\n            //day time cost \n            console.log(`/daytime_billing: ${daytime_billing + overlap_billing}`)\n            //how much night time\n            console.log(`/nighttime: ${night_overlap_time}`)\n            // night time cost \n            console.log(`night Cost: $${overlap_billing}`)\n            \n\n            \n            setDayTime(dayTime)\n            setDayTimeBilling(daytime_billing)\n            setNightTime(night_overlap_time)\n            setNightTimeBilling(overlap_billing)\n           \n            // daytime_billing = 1800 - currentTime\n            totalbilling = daytime_billing + overlap_billing\n            setBilling(totalbilling) //daytime billing\n        }\n        \n        // STRICTLY NIGHT CALCULATIONS\n        else if(currentTime > 1800 && accumalatedTime < 2359 || currentTime < 600 && accumalatedTime <= 600 ){\n            dayTime=0\n            night_overlap_time = 0\n            overlap_billing = 0\n            daytime_billing = 0\n            nightTime = parseInt(`${hours}${minutes}`) // Might need\n            night_time_billing = hours * night_hourly_rate + (minutes / 15) * night_minute_rate\n\n   \n            setDayTime(dayTime)\n            setDayTimeBilling(daytime_billing)\n            setNightTime(night_overlap_time)\n            setNightTimeBilling(night_time_billing)\n            setBilling(night_time_billing) \n           \n        } // NIGHT OVERLAPPING TO DAY \n        else if(currentTime <= 600 && accumalatedTime > 600){ //current_time >\n            \n            day_overlap_time = accumalatedTime - 600\n            day_overlap_cost = Math.floor(day_overlap_time * .07) //.07 is dollar value of 4 dollars per hour\n\n            nighttimeHour = Math.floor((600-currentTime) / 100) // selected hours before night time\n            nighttimeMin = Math.floor(60 - (currentTime % 100))// selected mins before night time\n            nightTime = parseInt(`${nighttimeHour}${nighttimeMin}`)\n            nighttime_billing = nighttimeHour * night_hourly_rate + Math.floor(nighttimeMin * 0.07)\n          \n\n            if(day_overlap_time > 99){\n             newDayTime_hour = Math.floor(day_overlap_time / 100)\n             newDayTime_min = Math.floor(day_overlap_time % 100)\n             overlap_billing = Math.round(((newDayTime_hour * 4) + (newDayTime_min * 0.07) + Number.EPSILON) * 100) / 100\n             day_overlap_time = parseInt(`${newDayTime_hour}${newDayTime_min}`)\n           }else{\n            overlap_billing = Math.round((day_overlap_cost + Number.EPSILON) * 100) / 100\n           }\n           \n       \n            // night_overlap_time = Math.round((night_overlap_cost + Number.EPSILON) * 100) / 100\n            // how much day time \n            console.log(`/daytime: ${day_overlap_time}`)\n            //day time cost \n            console.log(`/daytime_billing: ${daytime_billing + overlap_billing}`)\n            //how much night time\n            console.log(`/nighttime: ${night_overlap_time}`)\n            // night time cost \n            console.log(`night Cost: $${overlap_billing}`)\n            \n\n            \n            setDayTime(day_overlap_time)\n            setDayTimeBilling(overlap_billing)\n            setNightTime(nightTime)\n            setNightTimeBilling(nighttime_billing)\n           \n            // daytime_billing = 1800 - currentTime\n            totalbilling = Math.round((nighttime_billing + overlap_billing + Number.EPSILON) * 100) / 100\n            setBilling(totalbilling) //daytime billing\n        }\n\n        // NIGHT GOING INTO DAY BREAK\n\n        // Set Selected time here for tracking and to be pushed to local storage by confirm BTN\n        setTime(parseInt(`${hours}${minutes}`))\n    }, [hours, minutes])\n\n}\n\n\n\nexport default PaymentGenerator;\n \n\n"]},"metadata":{},"sourceType":"module"}