{"ast":null,"code":"var _jsxFileName = \"/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Pages/LongTimeSelection.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Picker from 'react-scrollable-picker';\nimport { useEffect, useState } from 'react/cjs/react.development';\nimport CircleBtnsImg from '../Components/Buttons/CircleBtn_img/CircleBtnsImg';\nimport ScrollableDatePicker from '../Components/ScrollableDatePicker/ScrollableDatePicker';\n/**\n* @author\n* @function LongTimeSelection\n**/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LongTimeSelection = props => {\n  _s();\n\n  var mins = [];\n  var hrs = [];\n  var month_days = [];\n  const date = new Date();\n\n  const get_days_of_month = (month, year) => {\n    return new Date(year, month, 0).getDate();\n  };\n\n  const [expT, setExpT] = useState(null);\n  const days_in_current_month = get_days_of_month(date.getMonth(), date.getFullYear());\n  const options = {\n    month: 'long'\n  };\n  const current_month = new Intl.DateTimeFormat('en-US', options).format();\n\n  const setExpiredTime = (name, val, groups) => {\n    const newGroup = groups;\n    newGroup[name] = val;\n    console.log(newGroup);\n  };\n\n  for (var i = 0; i < 60; i = i + 30) {\n    mins.push({\n      value: i,\n      label: i\n    });\n  }\n\n  for (var i = 0; i < 13; i++) {\n    hrs.push({\n      value: i,\n      label: i\n    });\n  }\n\n  for (var i = date.getDate(); i < days_in_current_month + 1; i++) {\n    month_days.push({\n      value: `${current_month.substring(0, 3)} ${i}`,\n      label: `${current_month.substring(0, 3)} ${i}`\n    });\n  }\n\n  console.log(expT);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"global_container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        textAlign: 'center',\n        paddingTop: '12%',\n        color: 'red'\n      },\n      children: \"Set Your Expiration Time\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 2\n    }, this), /*#__PURE__*/_jsxDEV(ScrollableDatePicker, {\n      expired: setExpiredTime,\n      month: month_days,\n      hours: hrs,\n      minutes: mins\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      style: {\n        textAlign: 'center',\n        color: 'red'\n      },\n      children: \"Expires at:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scroll_confirm_holder\",\n      children: /*#__PURE__*/_jsxDEV(CircleBtnsImg, {\n        title: \"Confirm\",\n        img: \"\",\n        class: \"plateCapture\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 1\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 2\n  }, this);\n};\n\n_s(LongTimeSelection, \"WSXiKOCpcJKNQEX9XWPs2qdjh4M=\");\n\n_c = LongTimeSelection;\nexport default LongTimeSelection; //     const [groups, setGrouping] = useState({\n//         valueGroups: {\n//             title: 'Mr.',\n//             firstName: 'Micheal',\n//             secondName: 'Jordan'\n//           }, \n//           optionGroups: {\n//             title: [\n//               { value: 'mr', label: 'Mr.' },\n//               { value: 'ms', label: 'Ms.' },\n//               { value: 'dr', label: 'Dr.' },\n//             ],\n//             firstName: [\n//               { value: 'John', label: 'John' },\n//               { value: 'Micheal', label: 'Micheal' },\n//               { value: 'Elizabeth', label: 'Elizabeth' },\n//             ],\n//             secondName: [\n//               { value: 'Lennon', label: 'Lennon' },\n//               { value: 'Jackson', label: 'Jackson' },\n//               { value: 'Jordan', label: 'Jordan' },\n//               { value: 'Legend', label: 'Legend' },\n//               { value: 'Taylor', label: 'Taylor' }\n//             ],\n//           },\n//     })\n// const handleChange = (name, value) =>{\n//     console.log(groups.valueGroups)\n// }\n\nvar _c;\n\n$RefreshReg$(_c, \"LongTimeSelection\");","map":{"version":3,"sources":["/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Pages/LongTimeSelection.js"],"names":["React","Picker","useEffect","useState","CircleBtnsImg","ScrollableDatePicker","LongTimeSelection","props","mins","hrs","month_days","date","Date","get_days_of_month","month","year","getDate","expT","setExpT","days_in_current_month","getMonth","getFullYear","options","current_month","Intl","DateTimeFormat","format","setExpiredTime","name","val","groups","newGroup","console","log","i","push","value","label","substring","textAlign","paddingTop","color"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Picker from 'react-scrollable-picker'\nimport { useEffect, useState } from 'react/cjs/react.development'\nimport CircleBtnsImg from '../Components/Buttons/CircleBtn_img/CircleBtnsImg'\nimport ScrollableDatePicker from '../Components/ScrollableDatePicker/ScrollableDatePicker'\n\n/**\n* @author\n* @function LongTimeSelection\n**/\n\nconst LongTimeSelection = (props) => {\nvar mins = []\nvar hrs = []\nvar month_days = []\nconst date = new Date()\nconst get_days_of_month = (month, year) => { \n    return new Date(year, month, 0).getDate()\n}\nconst [expT, setExpT] = useState(null)\nconst days_in_current_month = get_days_of_month(date.getMonth(), date.getFullYear())\nconst options = {month: 'long'}\nconst current_month = new Intl.DateTimeFormat('en-US', options).format()\n\nconst setExpiredTime = (name, val, groups) => {\nconst newGroup = groups\nnewGroup[name] = val\nconsole.log(newGroup)\n}\n\n\n\n\n\nfor(var i = 0; i < 60; i=i +30){ \n    mins.push({value: i, label: i})            \n}\nfor(var i = 0; i < 13; i++){ \n    hrs.push({value: i, label: i})            \n}\nfor(var i = date.getDate(); i < (days_in_current_month + 1); i++){\nmonth_days.push({value:`${current_month.substring(0,3)} ${i}`, label: `${current_month.substring(0,3)} ${i}`})\n}\n\nconsole.log(expT)\n\n  return(\n <div className='global_container'>\n <h2 style={{textAlign: 'center', paddingTop: '12%', color: 'red'}}>Set Your Expiration Time</h2>\n<ScrollableDatePicker expired={setExpiredTime} month={month_days} hours={hrs} minutes={mins}/>\n<h4 style={{textAlign:'center', color: 'red'}}>Expires at:</h4>\n{/* <p style={{textAlign:'center'}}>{expT.date} - {`${expT.hours}:${expT.minutes}`}</p> */}\n\n<div className='scroll_confirm_holder'>\n<CircleBtnsImg title='Confirm' img='' class='plateCapture' />\n</div>\n </div>\n   )\n\n }\n\n export default LongTimeSelection;\n\n\n\n //     const [groups, setGrouping] = useState({\n//         valueGroups: {\n//             title: 'Mr.',\n//             firstName: 'Micheal',\n//             secondName: 'Jordan'\n//           }, \n//           optionGroups: {\n//             title: [\n//               { value: 'mr', label: 'Mr.' },\n//               { value: 'ms', label: 'Ms.' },\n//               { value: 'dr', label: 'Dr.' },\n//             ],\n//             firstName: [\n//               { value: 'John', label: 'John' },\n//               { value: 'Micheal', label: 'Micheal' },\n//               { value: 'Elizabeth', label: 'Elizabeth' },\n//             ],\n//             secondName: [\n//               { value: 'Lennon', label: 'Lennon' },\n//               { value: 'Jackson', label: 'Jackson' },\n//               { value: 'Jordan', label: 'Jordan' },\n//               { value: 'Legend', label: 'Legend' },\n//               { value: 'Taylor', label: 'Taylor' }\n//             ],\n//           },\n//     })\n\n// const handleChange = (name, value) =>{\n//     console.log(groups.valueGroups)\n// }\n"]},"metadata":{},"sourceType":"module"}