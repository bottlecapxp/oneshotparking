{"ast":null,"code":"var _jsxFileName = \"/Users/bottlecapmedia/Desktop/Applications/OneShot Parking/src/Components/Buttons/CircleBtn_img/CircleBtnsImg.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { useHistory } from 'react-router-dom';\nimport '../CircleBtn_img/CircleBtnimg.css';\nimport { PaymentContext } from '../../../Context/PaymentContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CircleBtnsImg = props => {\n  _s();\n\n  const history = useHistory();\n  const darkMode = 1800;\n  const [darkModeStyle, setDarkModeStyle] = useState({\n    buttonStyles: 'btn-confirm'\n  });\n  useEffect(() => {\n    if (darkMode >= 1800 || darkMode <= 600) {\n      setDarkModeStyle({\n        buttonStyles: 'btn-confirm-dark'\n      });\n    }\n  }, []);\n  const [timer] = useState({\n    title: props.title,\n    img: props.img,\n    extra: props.class\n  });\n  const {\n    time\n  } = useContext(PaymentContext);\n  const currentTime = new Date();\n  var newTime = parseInt(`${currentTime.getHours()}${currentTime.getMinutes()}`);\n  const expiredTime = newTime + time; // const {time} = useContext(TimeContext)\n  // Use this information to store in the database with added time to create the fixed limit\n  // Then cross reference the current time with limit which should now provide the value to begin the cound down\n  // This way we do not loose count down data in reload \n  // var getTime = new Date()\n  // var currentHours = getTime.getHours()\n  // var currentMins = getTime.getMinutes()\n  // console.log(`${currentHours}:${currentMins}`)\n\n  const payment_action = () => {\n    // Check local storage to see if it's Empty or Null\n    if (localStorage.getItem('timeStore') === null) {\n      // if true then store given time to localstorage\n      localStorage.setItem('timeStore', `${time}`);\n      console.log(expiredTime);\n      history.push('/guest/');\n    } // We're checking to see if time exist if it does then capture and instatiate time as new time then perform task to that time to then push back to localstorage as new time post\n    else if (localStorage.getItem('timeStore') != null) {\n        localStorage.removeItem('timeStore');\n        updatingTime(time);\n        console.log(expiredTime);\n        history.push('/guest/');\n      }\n  };\n\n  const updatingTime = time => {\n    localStorage.setItem('timeStore', time);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    onClick: payment_action,\n    className: `${darkModeStyle.buttonStyles} content-align ${timer.extra}`,\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"confirm_title\",\n      children: timer.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CircleBtnsImg, \"QugQXtX3SOa1V5rkc848tVYKNso=\", false, function () {\n  return [useHistory];\n});\n\n_c = CircleBtnsImg;\nexport default CircleBtnsImg;\n\nvar _c;\n\n$RefreshReg$(_c, \"CircleBtnsImg\");","map":{"version":3,"sources":["/Users/bottlecapmedia/Desktop/Applications/OneShot Parking/src/Components/Buttons/CircleBtn_img/CircleBtnsImg.js"],"names":["React","useState","useEffect","useContext","useHistory","PaymentContext","CircleBtnsImg","props","history","darkMode","darkModeStyle","setDarkModeStyle","buttonStyles","timer","title","img","extra","class","time","currentTime","Date","newTime","parseInt","getHours","getMinutes","expiredTime","payment_action","localStorage","getItem","setItem","console","log","push","removeItem","updatingTime"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAyBC,SAAzB,EAAoCC,UAApC,QAAsD,OAAtD;AACA,SAAQC,UAAR,QAAyB,kBAAzB;AACA,OAAO,mCAAP;AACA,SAAQC,cAAR,QAA6B,iCAA7B;;;AAIA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAMC,OAAO,GAAGJ,UAAU,EAA1B;AACA,QAAMK,QAAQ,GAAG,IAAjB;AACA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCV,QAAQ,CAAC;AAC/CW,IAAAA,YAAY,EAAE;AADiC,GAAD,CAAlD;AAMJV,EAAAA,SAAS,CAAC,MAAI;AACV,QAAGO,QAAQ,IAAI,IAAZ,IAAoBA,QAAQ,IAAI,GAAnC,EAAuC;AACnCE,MAAAA,gBAAgB,CAAC;AACbC,QAAAA,YAAY,EAAE;AADD,OAAD,CAAhB;AAIH;AACJ,GAPQ,EAON,EAPM,CAAT;AASI,QAAM,CAACC,KAAD,IAAUZ,QAAQ,CAAC;AACrBa,IAAAA,KAAK,EAAEP,KAAK,CAACO,KADQ;AAErBC,IAAAA,GAAG,EAAER,KAAK,CAACQ,GAFU;AAGrBC,IAAAA,KAAK,EAAET,KAAK,CAACU;AAHQ,GAAD,CAAxB;AAKA,QAAM;AAACC,IAAAA;AAAD,MAASf,UAAU,CAACE,cAAD,CAAzB;AACA,QAAMc,WAAW,GAAG,IAAIC,IAAJ,EAApB;AACA,MAAIC,OAAO,GAAGC,QAAQ,CAAE,GAAEH,WAAW,CAACI,QAAZ,EAAuB,GAAEJ,WAAW,CAACK,UAAZ,EAAyB,EAAtD,CAAtB;AACA,QAAMC,WAAW,GAAGJ,OAAO,GAAGH,IAA9B,CA1B6B,CA2B7B;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;;AACA,QAAMQ,cAAc,GAAG,MAAM;AACzB;AACJ,QAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,MAAsC,IAAzC,EAA8C;AAC1C;AACAD,MAAAA,YAAY,CAACE,OAAb,CAAqB,WAArB,EAAmC,GAAEX,IAAK,EAA1C;AACAY,MAAAA,OAAO,CAACC,GAAR,CAAYN,WAAZ;AACAjB,MAAAA,OAAO,CAACwB,IAAR,CAAa,SAAb;AACH,KALD,CAMA;AANA,SAOK,IAAGL,YAAY,CAACC,OAAb,CAAqB,WAArB,KAAqC,IAAxC,EAA6C;AAC9CD,QAAAA,YAAY,CAACM,UAAb,CAAwB,WAAxB;AACAC,QAAAA,YAAY,CAAChB,IAAD,CAAZ;AACAY,QAAAA,OAAO,CAACC,GAAR,CAAYN,WAAZ;AACAjB,QAAAA,OAAO,CAACwB,IAAR,CAAa,SAAb;AAEH;AAEA,GAjBD;;AAmBA,QAAME,YAAY,GAAIhB,IAAD,IAAU;AACvBS,IAAAA,YAAY,CAACE,OAAb,CAAqB,WAArB,EAAkCX,IAAlC;AACP,GAFD;;AAIA,sBACI;AAAM,IAAA,OAAO,EAAEQ,cAAf;AAA+B,IAAA,SAAS,EAAG,GAAEhB,aAAa,CAACE,YAAa,kBAAiBC,KAAK,CAACG,KAAM,EAArG;AAAA,2BACI;AAAM,MAAA,SAAS,EAAC,eAAhB;AAAA,gBAAiCH,KAAK,CAACC;AAAvC;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAlED;;GAAMR,a;UACcF,U;;;KADdE,a;AAmEN,eAAeA,aAAf","sourcesContent":["import React, { useState,useEffect, useContext } from \"react\"\nimport {useHistory} from 'react-router-dom'\nimport '../CircleBtn_img/CircleBtnimg.css'\nimport {PaymentContext} from '../../../Context/PaymentContext'\n\n\n\nconst CircleBtnsImg = (props) => {\n    const history = useHistory()\n    const darkMode = 1800\n    const [darkModeStyle, setDarkModeStyle] = useState({\n        buttonStyles: 'btn-confirm', \n \n    })\n\n\nuseEffect(()=>{\n    if(darkMode >= 1800 || darkMode <= 600){\n        setDarkModeStyle({\n            buttonStyles: 'btn-confirm-dark',\n            \n        })\n    }\n}, [])\n\n    const [timer] = useState({\n        title: props.title,\n        img: props.img,\n        extra: props.class\n    })\n    const {time} = useContext(PaymentContext)\n    const currentTime = new Date();\n    var newTime = parseInt(`${currentTime.getHours()}${currentTime.getMinutes()}`)\n    const expiredTime = newTime + time\n    // const {time} = useContext(TimeContext)\n    \n    // Use this information to store in the database with added time to create the fixed limit\n    // Then cross reference the current time with limit which should now provide the value to begin the cound down\n    // This way we do not loose count down data in reload \n    // var getTime = new Date()\n    // var currentHours = getTime.getHours()\n    // var currentMins = getTime.getMinutes()\n\n\n    // console.log(`${currentHours}:${currentMins}`)\n    const payment_action = () => {\n        // Check local storage to see if it's Empty or Null\n    if(localStorage.getItem('timeStore') === null){\n        // if true then store given time to localstorage\n        localStorage.setItem('timeStore', `${time}`)\n        console.log(expiredTime)\n        history.push('/guest/')\n    }\n    // We're checking to see if time exist if it does then capture and instatiate time as new time then perform task to that time to then push back to localstorage as new time post\n    else if(localStorage.getItem('timeStore') != null){\n        localStorage.removeItem('timeStore')\n        updatingTime(time)\n        console.log(expiredTime)\n        history.push('/guest/')\n       \n    }\n\n    }\n\n    const updatingTime = (time) => {\n            localStorage.setItem('timeStore', time)     \n    }\n\n    return (\n        <span onClick={payment_action} className={`${darkModeStyle.buttonStyles} content-align ${timer.extra}`}>\n            <span className='confirm_title'>{timer.title}</span>\n        </span>\n    )\n}\nexport default CircleBtnsImg;"]},"metadata":{},"sourceType":"module"}