{"ast":null,"code":"import React, { Component } from 'react';\n\nclass Time extends Component {\n  constructor(props) {\n    super(props);\n\n    this.set_expTime_to_secs = () => {\n      var output = this.sum_hours * 3600 + this.current_mins * 60;\n      return output;\n    };\n\n    this.start_time = () => {\n      return `${this.current_hour}:${this.current_mins}${this.output_meridian}`;\n    };\n\n    this.genrate_expired_time = scrolled_hours => {\n      this.sum_hours = this.current_hour + scrolled_hours;\n      var set_hour_limitors = [12, 24, 36, 48];\n      this.output_hour = this.sum_hours;\n      var button_meridian = this.output_meridian; // mins check\n\n      if (this.current_mins == 0) {\n        this.current_mins = '00';\n      }\n\n      for (var i = 0; i < set_hour_limitors.length; i++) {\n        if (this.sum_hours >= set_hour_limitors[i]) {\n          if (this.sum_hours >= set_hour_limitors[0] && this.sum_hours < set_hour_limitors[1] || this.sum_hours >= set_hour_limitors[2] && this.sum_hours < set_hour_limitors[3]) {\n            this.meridian_units_switch = true;\n          }\n\n          if (this.sum_hours >= set_hour_limitors[1] && this.sum_hours < set_hour_limitors[2]) {\n            this.meridian_units_switch = false;\n          }\n\n          var iterate_set_hour_limitors = this.sum_hours - set_hour_limitors[i];\n          this.output_hour = iterate_set_hour_limitors == 0 ? 12 : iterate_set_hour_limitors;\n        }\n      }\n\n      this.set_expTime_to_secs();\n      this.output_meridian = this._switch_meridian_unit(this.meridian_units_switch);\n      localStorage.setItem('_time_mdn_time', this.output_meridian);\n      localStorage.setItem('_time_btn_hr', this.output_hour);\n      return `${this.output_hour}:${this.current_mins < 10 ? `0${this.current_mins}` : this.current_mins}${this.output_meridian}`;\n    };\n\n    this._switch_meridian_unit = meridian_ref => {\n      if (meridian_ref) {\n        return this.meridian_units[1];\n      } else if (!meridian_ref) {\n        return this.meridian_units[0];\n      }\n    };\n\n    this.button_max_calculation = () => {\n      const button_hours = localStorage.getItem('_time_btn_hr');\n      const button_meridian = localStorage.getItem('_time_mdn_time');\n      const rate_change_limitors = [6, 12, 18, 24];\n      const hour_wheel_calc = 0.0417;\n      const min_wheel_calc = hour_wheel_calc / 60;\n      var generating_hours = button_meridian == this.meridian_units[1] ? parseInt(button_hours) + 12 : button_hours; // returns either 1..12 || 13..23  \"We need to fix a bug 12 turns to 24 and midnight to 12\"\n\n      if (generating_hours == 12) {\n        generating_hours = 12;\n      } // Check to see if the time meets either 6 or 18 Then this.ouput would be 12\n      // Get daytime calculation\n\n\n      if (generating_hours > rate_change_limitors[0] && generating_hours < rate_change_limitors[2]) {\n        this.button_output = rate_change_limitors[2] - generating_hours;\n      }\n\n      if (generating_hours > rate_change_limitors[2] && generating_hours < rate_change_limitors[3]) {\n        this.button_output = rate_change_limitors[3] - generating_hours + rate_change_limitors[0];\n      }\n\n      if (generating_hours < rate_change_limitors[0]) {\n        this.button_output = rate_change_limitors[0] - generating_hours;\n      }\n\n      if (generating_hours == rate_change_limitors[0] || generating_hours == rate_change_limitors[2]) {\n        this.button_output = 12;\n      } // let's calculate the minutes\n      //  if current mins not equal to 0 then minus on from hour and provide minutes\n      // output then has to be hours and mins attached to each other then the divided to run calc\n      // if(this.current_mins > 0){\n      //     this.button_output = this.button_output - 1\n      // }\n\n\n      const calc_output = this.button_output * hour_wheel_calc; // console.log(`hours: ${this.button_output * hour_wheel_calc} mins: ${this.current_mins * min_wheel_calc}`)\n\n      console.log(calc_output);\n      return calc_output;\n    };\n\n    this.meridian_units = ['am', 'pm'];\n    this.__init_date__ = new Date();\n    this.current_hour = 10;\n    this.current_mins = this.__init_date__.getMinutes();\n    this.meridian_units_switch = this.current_hour > 12 ? true : false;\n    this.output_hour = '';\n    this.sum_hours = null;\n    this.days = 0;\n    this.output_meridian = '';\n    this.button_output = '';\n  } // Let's assume 6 is the limit for all time change. \n  // So 6am & 6pm determines if it's night time rate or day time rate. \n  // We need to do the following.\n  // First we check to see Which time of the day we are in. This provides our limit Eg. 1800\n  // As per lot. We get the hourly cap base on price. Which means if the max rate is $5 and per hour is $1\n  // Then anything greater than 5 and lesser than 1800 will be considered Max Rate \n  // Else anything lesser than 5 hours will be calculated at daily rate. \n  // if calculated at daily rate surpasses the time cap then it's shift to nightly rate \n  // \n\n\n}\n\nexport default Time; // if(localStorage.getItem('_time_mdn_time') == this.meridian_units[0]){\n//     var remaining_time = 6 - localStorage.getItem('_time_btn_hr')\n//     if(localStorage.getItem('_time_btn_hr') < 6){ \n//         remaining_time >= night_limit?return_time=remaining_time:return_time = remaining_time + 12\n//     }\n//     if(localStorage.getItem('_time_btn_hr') >= 6 && localStorage.getItem('_time_btn_hr') < 12){ \n//         var rem_time = 12 - localStorage.getItem('_time_btn_hr')\n//         return_time=rem_time + 6\n//         // rem_time >= day_limit?return_time=(rem_time + 12) * hour_wheel_calc:return_time=(rem_time + 12) * hour_wheel_calc\n//     }\n// } \n// if(localStorage.getItem('_time_mdn_time') == this.meridian_units[1]){\n//     var night_remaining_time = 6 - localStorage.getItem('_time_btn_hr')\n//     // generate daily\n//     if(localStorage.getItem('_time_btn_hr') < 6){\n//         var daytime_rem_hr = 6 - localStorage.getItem('_time_btn_hr')\n//         night_remaining_time >= day_limit?return_time=daytime_rem_hr:return_time=daytime_rem_hr + 12\n//     }\n//     if(localStorage.getItem('_time_btn_hr') >= 6 && localStorage.getItem('_time_btn_hr') < 12 ){\n//         var night_rem_time = 12 - localStorage.getItem('_time_btn_hr')\n//         return_time = night_rem_time + 6\n//     }\n// }\n// console.log(return_time)\n// if(this.output_hour >= 6 && this.output_hour < 12){ \n//     const max_calculation = (12 - this.output_hour) + 6\n//     if(max_calculation >= day_limit){ \n//         return max_calculation * hour_wheel_calc\n//         console.log(max_calculation)\n//     }\n//     if(max_calculation < day_limit){ \n//         return (max_calculation + 12) * hour_wheel_calc\n//         console.log(max_calculation + 12)\n//     }\n// }\n// if(this.output_hour < 6){ \n//     const night_max_calculation = 6 - this.output_hour\n//     if(night_max_calculation < night_limit){ \n//         return (night_max_calculation + 12) * hour_wheel_calc\n//         console.log(night_max_calculation + 12)\n//     }\n//     return night_max_calculation * hour_wheel_calc\n//     console.log(night_max_calculation)\n// }\n// if(this.output_meridian == this.meridian_units[1]){ \n//     if(this.output_hour <= 6){\n//         const calculate_remaining_time = 6 - this.output_hour\n//         if(calculate_remaining_time < day_limit){ \n//             return (calculate_remaining_time + 12) * hour_wheel_calc\n//             console.log(calculate_remaining_time + 12)\n//         }\n//         return calculate_remaining_time * hour_wheel_calc\n//         console.log(calculate_remaining_time)\n//     }\n//     if(this.output_hour > 6 && this.output_hour <= 12){ \n//         const calc_rem_time = (12 - this.output) + 6\n//         if(calc_rem_time < night_limit){ \n//             console.log((calc_rem_time + 12) * hour_wheel_calc)\n//             return (calc_rem_time + 12) * hour_wheel_calc\n//             console.log(calc_rem_time + 12)\n//         }\n//         console.log(calc_rem_time * hour_wheel_calc)\n//         return calc_rem_time * hour_wheel_calc\n//         console.log(calc_rem_time)\n//     }\n//     // console.log(24 - (this.output_hour + 12) + 6)\n// }\n// set_meridian_unit = (hours) => { \n// var time_expression = this.current_hour + hours\n// switch(this.current_hour){ \n//     case(this.current_hour > 12?this.current_hour: null): \n//     break;\n// }\n// }\n// }\n// const twelve_hour_time = () => { \n// \tif(expiredHours > 12){ \n// \t\texpiredHours = expiredHours - 12 \n// \t\ttwelve_hour_time()\n// \t}\n// }\n// twelve_hour_time()\n// const set_meridiem = () => { \n// \tvar time_expression = currentTime.getHours() + hours\n// \tconst start_meridiem = currentTime.getHours()\n// \tswitch(start_meridiem){ \n// \t\tcase(start_meridiem > 12? start_meridiem: null):\n// \t\tstart_time_unit = time_unit_[1]\n// \t\tbreak;\n// \t\tcase (start_meridiem < 12 ? start_meridiem: null): \n// \t\tstart_time_unit = time_unit_[0]\n// \t\tbreak;\n// \t}\n// \tswitch(time_expression){\n// \t\tcase (time_expression >= 12 && time_expression <= 24 ? time_expression : null):\n// \t\t\ttimeUnit = time_unit_[1]\n// \t\t\tbreak; \n// \t\tcase (time_expression > 24 || time_expression < 12 ? time_expression : null): \n// \t\t\ttimeUnit = time_unit_[0]\n// \t\t\tbreak;\n// \t}\n// \tif(expiredMinutes < 10){\n// \t\texpiredMinutes = `${0}${expiredMinutes}`\n// \t}\n// \tif(expiredMinutes == 60){ \n// \t\texpiredHours = expiredHours + 1\n// \t\texpiredMinutes = '00'\n// \t}\n// }\n// set_meridiem()","map":{"version":3,"sources":["/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Components/Timer/Time.js"],"names":["React","Component","Time","constructor","props","set_expTime_to_secs","output","sum_hours","current_mins","start_time","current_hour","output_meridian","genrate_expired_time","scrolled_hours","set_hour_limitors","output_hour","button_meridian","i","length","meridian_units_switch","iterate_set_hour_limitors","_switch_meridian_unit","localStorage","setItem","meridian_ref","meridian_units","button_max_calculation","button_hours","getItem","rate_change_limitors","hour_wheel_calc","min_wheel_calc","generating_hours","parseInt","button_output","calc_output","console","log","__init_date__","Date","getMinutes","days"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n\n\n\n\nclass Time extends Component {\n    constructor(props) {\n        super(props)\n        this.meridian_units = ['am', 'pm']\n        this.__init_date__ = new Date()\n        this.current_hour = 10\n        this.current_mins = this.__init_date__.getMinutes()\n        this.meridian_units_switch = this.current_hour > 12? true: false\n        this.output_hour = ''\n        this.sum_hours = null\n        this.days = 0\n        this.output_meridian = ''\n        this.button_output = ''\n\n    }\n\n    set_expTime_to_secs = () =>{ \n        var output = ((this.sum_hours * 3600) + (this.current_mins * 60))\n        return output\n    }\n\n    start_time = () =>{ \n        return `${this.current_hour}:${this.current_mins}${this.output_meridian}`\n    }\n\n    genrate_expired_time = (scrolled_hours) => {\n        this.sum_hours = this.current_hour + scrolled_hours\n        var set_hour_limitors = [12, 24, 36, 48]\n        this.output_hour = this.sum_hours\n        var button_meridian = this.output_meridian\n\n        // mins check\n        if (this.current_mins == 0) {\n            this.current_mins = '00'\n        }\n\n        for (var i = 0; i < set_hour_limitors.length; i++) {\n            if (this.sum_hours >=set_hour_limitors[i]) {\n                if(this.sum_hours >= set_hour_limitors[0] && this.sum_hours < set_hour_limitors[1] || this.sum_hours >= set_hour_limitors[2] && this.sum_hours < set_hour_limitors[3]){\n                    this.meridian_units_switch = true\n                }\n                if(this.sum_hours >= set_hour_limitors[1] && this.sum_hours < set_hour_limitors[2]){ \n                    this.meridian_units_switch = false\n                }\n                var iterate_set_hour_limitors = this.sum_hours - set_hour_limitors[i]\n                this.output_hour = iterate_set_hour_limitors == 0?12:iterate_set_hour_limitors\n            }\n        }\n        \n        this.set_expTime_to_secs()\n        this.output_meridian = this._switch_meridian_unit(this.meridian_units_switch)\n        localStorage.setItem('_time_mdn_time', this.output_meridian)\n        localStorage.setItem('_time_btn_hr', this.output_hour)\n        return `${this.output_hour}:${this.current_mins < 10 ? `0${this.current_mins}` : this.current_mins}${this.output_meridian}`\n    }\n\n\n\n    _switch_meridian_unit = (meridian_ref) => {\n        if(meridian_ref){\n            return this.meridian_units[1]\n        }\n        else if(!meridian_ref){ \n            return this.meridian_units[0]\n        }\n    }\n\n\n    button_max_calculation = () => { \n        const button_hours = localStorage.getItem('_time_btn_hr')\n        const button_meridian = localStorage.getItem('_time_mdn_time')\n        const rate_change_limitors = [6, 12, 18, 24]\n        const hour_wheel_calc = 0.0417\n        const min_wheel_calc = hour_wheel_calc / 60\n        var generating_hours = button_meridian == this.meridian_units[1]? parseInt(button_hours) + 12: button_hours\n        // returns either 1..12 || 13..23  \"We need to fix a bug 12 turns to 24 and midnight to 12\"\n        if(generating_hours == 12){ \n            generating_hours = 12\n        }\n\n        // Check to see if the time meets either 6 or 18 Then this.ouput would be 12\n \n        \n        // Get daytime calculation\n        if(generating_hours > rate_change_limitors[0] && generating_hours < rate_change_limitors[2]){ \n            this.button_output = rate_change_limitors[2] - generating_hours\n        }\n        if(generating_hours > rate_change_limitors[2] && generating_hours < rate_change_limitors[3]){ \n            this.button_output = (rate_change_limitors[3] - generating_hours) + rate_change_limitors[0]\n        }\n        if(generating_hours < rate_change_limitors[0]){ \n            this.button_output = rate_change_limitors[0] - generating_hours\n        }\n        if(generating_hours == rate_change_limitors[0] || generating_hours == rate_change_limitors[2]){ \n            this.button_output = 12\n        }\n\n        // let's calculate the minutes\n        //  if current mins not equal to 0 then minus on from hour and provide minutes\n        // output then has to be hours and mins attached to each other then the divided to run calc\n        // if(this.current_mins > 0){\n        //     this.button_output = this.button_output - 1\n        // }\n        const calc_output = (this.button_output * hour_wheel_calc) \n        // console.log(`hours: ${this.button_output * hour_wheel_calc} mins: ${this.current_mins * min_wheel_calc}`)\n        console.log(calc_output)\n        return calc_output\n\n\n    }\n\n    // Let's assume 6 is the limit for all time change. \n    // So 6am & 6pm determines if it's night time rate or day time rate. \n    // We need to do the following.\n\n    // First we check to see Which time of the day we are in. This provides our limit Eg. 1800\n    // As per lot. We get the hourly cap base on price. Which means if the max rate is $5 and per hour is $1\n    // Then anything greater than 5 and lesser than 1800 will be considered Max Rate \n    // Else anything lesser than 5 hours will be calculated at daily rate. \n    // if calculated at daily rate surpasses the time cap then it's shift to nightly rate \n    // \n\n}\n\n\n\n\n\n\n\n\nexport default Time;\n\n        \n            \n        // if(localStorage.getItem('_time_mdn_time') == this.meridian_units[0]){\n        //     var remaining_time = 6 - localStorage.getItem('_time_btn_hr')\n        //     if(localStorage.getItem('_time_btn_hr') < 6){ \n        //         remaining_time >= night_limit?return_time=remaining_time:return_time = remaining_time + 12\n        //     }\n        //     if(localStorage.getItem('_time_btn_hr') >= 6 && localStorage.getItem('_time_btn_hr') < 12){ \n        //         var rem_time = 12 - localStorage.getItem('_time_btn_hr')\n        //         return_time=rem_time + 6\n        //         // rem_time >= day_limit?return_time=(rem_time + 12) * hour_wheel_calc:return_time=(rem_time + 12) * hour_wheel_calc\n        //     }\n           \n        // } \n\n        // if(localStorage.getItem('_time_mdn_time') == this.meridian_units[1]){\n        //     var night_remaining_time = 6 - localStorage.getItem('_time_btn_hr')\n        //     // generate daily\n        //     if(localStorage.getItem('_time_btn_hr') < 6){\n        //         var daytime_rem_hr = 6 - localStorage.getItem('_time_btn_hr')\n        //         night_remaining_time >= day_limit?return_time=daytime_rem_hr:return_time=daytime_rem_hr + 12\n        //     }\n        //     if(localStorage.getItem('_time_btn_hr') >= 6 && localStorage.getItem('_time_btn_hr') < 12 ){\n        //         var night_rem_time = 12 - localStorage.getItem('_time_btn_hr')\n        //         return_time = night_rem_time + 6\n        //     }\n        // }\n        // console.log(return_time)\n\n\n\n\n\n            // if(this.output_hour >= 6 && this.output_hour < 12){ \n            //     const max_calculation = (12 - this.output_hour) + 6\n            //     if(max_calculation >= day_limit){ \n            //         return max_calculation * hour_wheel_calc\n            //         console.log(max_calculation)\n            //     }\n            //     if(max_calculation < day_limit){ \n            //         return (max_calculation + 12) * hour_wheel_calc\n            //         console.log(max_calculation + 12)\n            //     }\n\n            // }\n            // if(this.output_hour < 6){ \n            //     const night_max_calculation = 6 - this.output_hour\n            //     if(night_max_calculation < night_limit){ \n            //         return (night_max_calculation + 12) * hour_wheel_calc\n            //         console.log(night_max_calculation + 12)\n            //     }\n            //     return night_max_calculation * hour_wheel_calc\n            //     console.log(night_max_calculation)\n            // }\n\n\n        // if(this.output_meridian == this.meridian_units[1]){ \n        //     if(this.output_hour <= 6){\n        //         const calculate_remaining_time = 6 - this.output_hour\n        //         if(calculate_remaining_time < day_limit){ \n        //             return (calculate_remaining_time + 12) * hour_wheel_calc\n        //             console.log(calculate_remaining_time + 12)\n        //         }\n        //         return calculate_remaining_time * hour_wheel_calc\n        //         console.log(calculate_remaining_time)\n        //     }\n        //     if(this.output_hour > 6 && this.output_hour <= 12){ \n        //         const calc_rem_time = (12 - this.output) + 6\n        //         if(calc_rem_time < night_limit){ \n        //             console.log((calc_rem_time + 12) * hour_wheel_calc)\n        //             return (calc_rem_time + 12) * hour_wheel_calc\n        //             console.log(calc_rem_time + 12)\n        //         }\n        //         console.log(calc_rem_time * hour_wheel_calc)\n        //         return calc_rem_time * hour_wheel_calc\n        //         console.log(calc_rem_time)\n        //     }\n\n        //     // console.log(24 - (this.output_hour + 12) + 6)\n        // }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// set_meridian_unit = (hours) => { \n// var time_expression = this.current_hour + hours\n\n// switch(this.current_hour){ \n//     case(this.current_hour > 12?this.current_hour: null): \n\n//     break;\n// }\n// }\n\n\n\n\n// }\n\n\n\n\t// const twelve_hour_time = () => { \n\t// \tif(expiredHours > 12){ \n\t// \t\texpiredHours = expiredHours - 12 \n\t// \t\ttwelve_hour_time()\n\t// \t}\n\t// }\n\t// twelve_hour_time()\n\n\t// const set_meridiem = () => { \n\t// \tvar time_expression = currentTime.getHours() + hours\n\t// \tconst start_meridiem = currentTime.getHours()\n\n\t// \tswitch(start_meridiem){ \n\t// \t\tcase(start_meridiem > 12? start_meridiem: null):\n\t// \t\tstart_time_unit = time_unit_[1]\n\t// \t\tbreak;\n\t// \t\tcase (start_meridiem < 12 ? start_meridiem: null): \n\t// \t\tstart_time_unit = time_unit_[0]\n\t// \t\tbreak;\n\t// \t}\n\n\n\n\t// \tswitch(time_expression){\n\t// \t\tcase (time_expression >= 12 && time_expression <= 24 ? time_expression : null):\n\t// \t\t\ttimeUnit = time_unit_[1]\n\t// \t\t\tbreak; \n\t// \t\tcase (time_expression > 24 || time_expression < 12 ? time_expression : null): \n\t// \t\t\ttimeUnit = time_unit_[0]\n\t// \t\t\tbreak;\n\t// \t}\n\n\t// \tif(expiredMinutes < 10){\n\t// \t\texpiredMinutes = `${0}${expiredMinutes}`\n\t// \t}\n\t// \tif(expiredMinutes == 60){ \n\t// \t\texpiredHours = expiredHours + 1\n\t// \t\texpiredMinutes = '00'\n\t// \t}\n\n\t// }\n\t// set_meridiem()"]},"metadata":{},"sourceType":"module"}