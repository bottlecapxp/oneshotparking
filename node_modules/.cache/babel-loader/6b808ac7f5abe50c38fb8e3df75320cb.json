{"ast":null,"code":"var _s = $RefreshSig$();\n\n// import { useStripe } from '@stripe/react-stripe-js'\nimport { useContext } from 'react';\nimport { PaymentContext } from '../../../Context/PaymentContext';\nimport MaxSelection from '../../max_selection/MaxSelection';\nimport Util from './../../Utilities/Utilities';\nimport GeneratePrice from './GeneratePrice';\n\nconst PaymentGenerator = (hours, minutes) => {\n  _s();\n\n  console.log(`hours - ${hours} mins - ${minutes}`);\n  const {\n    setNightTime,\n    setNightTimeBilling,\n    setDayTime,\n    setDayTimeBilling,\n    setBilling,\n    setTime\n  } = useContext(PaymentContext);\n  const timeDate = new Date();\n  const night_hourly_rate = 2.0;\n  const hourly_rate = 1.75;\n  const day_max_limit = 3;\n  const night_max_limit = 4;\n  var day_max_rate = 5.50;\n  var night_max_rate = 8;\n  const genPrice = new GeneratePrice();\n  const util = new Util();\n  var maxLimit_overflow;\n  const day_minute_rate = hourly_rate / 60;\n  const night_minute_rate = night_hourly_rate / 60;\n  const check_expired_hour = localStorage.getItem('_time_btn_hr'); //parseInt(`${timeDate.getHours()}${timeDate.getMinutes()}`)\n\n  var currentTime = parseInt(`${timeDate.getHours()}${timeDate.getMinutes() < 10 ? `0${timeDate.getMinutes()}` : timeDate.getMinutes()}`);\n  var setLimit = parseInt(`${hours}${minutes}0`);\n  var accumalatedTime = currentTime + setLimit;\n  var minuteCheck = accumalatedTime % 100;\n  var hourCheck = Math.floor(accumalatedTime / 100);\n  var newMinutes, newHours, dayTime, nightTime, extraTime, sumTotal;\n\n  const check_and_adjust = () => {\n    // Accumulated Time Check\n    if (hourCheck > 23) {\n      hourCheck = hourCheck - 24;\n    }\n\n    if (minuteCheck >= 60) {\n      newMinutes = minuteCheck - 60;\n      newHours = Math.floor(hourCheck + 1);\n      accumalatedTime = parseInt(`${newHours}${newMinutes}`);\n\n      if (newMinutes < 10) {\n        accumalatedTime = parseInt(`${newHours}0${newMinutes}`);\n      }\n\n      if (newMinutes === 0) {\n        accumalatedTime = parseInt(`${newHours}00`);\n      }\n    } else {\n      accumalatedTime = currentTime + setLimit; //Current time + Set Limit time\n    }\n  };\n\n  check_and_adjust();\n\n  const setbillings = (set_day_time, set_daytime_billing, set_night_time, set_nighttime_billing, total_billing) => {\n    setDayTime(set_day_time);\n    setDayTimeBilling(set_daytime_billing);\n    setNightTime(set_night_time);\n    setNightTimeBilling(set_nighttime_billing);\n    setBilling(total_billing);\n  };\n\n  const max_calculations = () => {\n    var timeSlot_bool = null;\n\n    if (minutes > 0) {\n      var maxBtn_timeSkip = parseInt(`${hours}${minutes}`);\n      const currentMinuteCheck = currentTime % 100;\n      var sumTime = currentTime + maxBtn_timeSkip;\n\n      if (currentMinuteCheck + minutes == 60) {\n        sumTime = sumTime + 40;\n      } // Check parameters timeSlot of current time => (True = Night \\ False = Day)\n\n\n      currentTime > 1800 || currentTime < 600 ? timeSlot_bool = true : timeSlot_bool = false;\n      var max_cost_calc = 0;\n      const max_limits = [1800, 3000, 4200, 600]; //day // night // day\n\n      if (timeSlot_bool == false && sumTime == max_limits[0]) {\n        var dayTimes = util.round(max_limits[0], currentTime, 100);\n        console.log(dayTimes);\n        const dayPrice = genPrice.max_calculate_daytime_payments(dayTimes, hourly_rate, day_max_limit, day_max_rate);\n        console.log('max Trigger - ' + dayPrice);\n        setbillings(dayTime, dayPrice, 0, 0, dayPrice);\n      }\n\n      if (timeSlot_bool == false && sumTime == max_limits[1]) {\n        dayTime = util.round(max_limits[0], currentTime, 100);\n        nightTime = util.round(sumTime, max_limits[0], 100);\n        const dayPrice = genPrice.max_calculate_daytime_payments(dayTime, hourly_rate, day_max_limit, day_max_rate);\n        const nightPrice = genPrice.max_calculate_nighttime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate);\n        sumTotal = nightPrice + dayPrice;\n        setbillings(dayTime, dayPrice, nightTime, nightPrice, sumTotal);\n      }\n\n      if (timeSlot_bool == false && sumTime == max_limits[2]) {\n        dayTime = util.round(max_limits[0], currentTime, 100);\n        nightTime = util.round(max_limits[1], max_limits[0], 100);\n        extraTime = util.round(sumTime, max_limits[1], 100);\n        const dayPrice = genPrice.max_calculate_daytime_payments(dayTime, hourly_rate, day_max_limit, day_max_rate);\n        const nightPrice = genPrice.max_calculate_nighttime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate);\n        const extraPrice = genPrice.max_calculate_extratime_payments(extraTime, night_hourly_rate, night_max_limit, night_max_rate);\n        sumTotal = nightPrice + dayPrice + extraPrice;\n        setbillings(dayTime, dayPrice, nightTime, nightPrice, sumTotal);\n      } // Night\n\n\n      if (timeSlot_bool == true && sumTime == max_limits[1]) {\n        nightTime = util.round(max_limits[1], currentTime, 100);\n        console.log(nightTime);\n        const nightPrice = genPrice.max_calculate_daytime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate);\n        console.log('max Trigger - ' + nightPrice);\n        setbillings(nightTime, nightPrice, 0, 0, nightPrice);\n      } // if(timeSlot_bool == true && sumTime == max_limits[1]){ \n      //     dayTime = util.round(max_limits[0], currentTime, 100)\n      //     nightTime = util.round(sumTime, max_limits[0], 100)\n      //     const dayPrice = genPrice.max_calculate_daytime_payments(dayTime, hourly_rate, day_max_limit, day_max_rate)\n      //     const nightPrice = genPrice.max_calculate_nighttime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate)\n      //     sumTotal = nightPrice + dayPrice\n      //     setbillings(dayTime, dayPrice, nightTime, nightPrice, sumTotal)\n      // }\n      // if(timeSlot_bool == true && sumTime == max_limits[2]){ \n      //     dayTime = util.round(max_limits[0], currentTime, 100)\n      //     nightTime = util.round(max_limits[1], max_limits[0], 100)\n      //     extraTime = util.round(sumTime, max_limits[1], 100)\n      //     const dayPrice = genPrice.max_calculate_daytime_payments(dayTime, hourly_rate, day_max_limit, day_max_rate)\n      //     const nightPrice = genPrice.max_calculate_nighttime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate)\n      //     const extraPrice = genPrice.max_calculate_extratime_payments(extraTime, night_hourly_rate, night_max_limit, night_max_rate)\n      //     sumTotal = nightPrice + dayPrice + extraPrice\n      //     setbillings(dayTime, dayPrice, nightTime, nightPrice, sumTotal)\n      // }\n\n    }\n  };\n\n  const night_time = () => {\n    // NEED TO SET CONDITIONS FOR ROLL OVER MINUTES\n    if (currentTime >= 1800 && accumalatedTime <= 3000 || currentTime < 600 && accumalatedTime <= 600) {\n      nightTime = util.round(accumalatedTime, currentTime, 100);\n      const nightPrice = genPrice.calculate_nighttime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate);\n      console.log(nightPrice);\n      setbillings(0, 0, nightTime, nightPrice, nightPrice);\n    } // overlap_time\n\n\n    if (currentTime >= 1800 && accumalatedTime > 3000 && accumalatedTime <= 4200) {\n      // if current time is greater than 6pm & setTime is > 6am and setTime is < 6pm\n      dayTime = util.round(accumalatedTime, 3000, 100); // util.round (setTime - nighttime) / 100   \n\n      nightTime = util.round(3000, currentTime, 100);\n      maxLimit_overflow = util.overlap_limit(3000, 4200, accumalatedTime, day_minute_rate);\n      console.log(maxLimit_overflow);\n      const dayPrice = genPrice.calculate_daytime_payments(dayTime, hourly_rate, day_max_limit, day_max_rate, maxLimit_overflow);\n      const nightPrice = genPrice.calculate_nighttime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate);\n      sumTotal = nightPrice + dayPrice;\n      setbillings(0, 0, nightTime, nightPrice, parseFloat(sumTotal).toFixed(2));\n    } //night => day => night\n\n\n    if (currentTime >= 1800 && accumalatedTime > 4200) {\n      nightTime = util.round(3000, currentTime, 100);\n      dayTime = util.round(accumalatedTime, 3000, 100);\n      extraTime = util.round(accumalatedTime, 4200, 100);\n      maxLimit_overflow = util.overlap_limit(4200, accumalatedTime, accumalatedTime, day_minute_rate);\n      const dayPrice = genPrice.calculate_daytime_payments(dayTime, hourly_rate, day_max_limit, day_max_rate);\n      const nightPrice = genPrice.calculate_nighttime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate);\n      const extraPrice = genPrice.calculate_extratime_payments(extraTime, night_hourly_rate, night_max_limit, night_max_rate, maxLimit_overflow);\n      sumTotal = dayPrice + nightPrice + extraPrice;\n      setbillings(0, 0, nightTime, nightPrice, parseFloat(sumTotal).toFixed(2));\n    } // night below 6am => day below => 6pm\n\n\n    if (currentTime < 600 && accumalatedTime > 600 && accumalatedTime <= 1800) {\n      // if current time is < 6am and setTime is greater than\n      dayTime = util.round(accumalatedTime, 600, 100);\n      nightTime = util.round(600, currentTime, 100);\n      const dayPrice = genPrice.calculate_daytime_payments(dayTime, hourly_rate, day_max_limit, day_max_rate);\n      const nightPrice = genPrice.calculate_nighttime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate);\n      sumTotal = dayPrice + nightPrice;\n      setbillings(dayTime, dayPrice, nightTime, nightPrice, parseFloat(sumTotal).toFixed(2));\n    } // night below 6am => pass day => night again\n\n\n    if (currentTime < 600 && accumalatedTime > 1800 && accumalatedTime <= 3000) {\n      dayTime = util.round(1800, 600, 100);\n      nightTime = util.round(600, currentTime, 100);\n      extraTime = util.round(accumalatedTime, 1800, 100);\n      const dayPrice = genPrice.calculate_daytime_payments(dayTime, hourly_rate, day_max_limit, day_max_rate);\n      const nightPrice = genPrice.calculate_nighttime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate);\n      const extraPrice = genPrice.calculate_extratime_payments(extraTime, night_hourly_rate, night_max_limit, night_max_rate);\n      sumTotal = dayPrice + nightPrice + extraPrice;\n      setbillings(dayTime, dayPrice, nightTime, nightPrice, parseFloat(sumTotal).toFixed(2));\n    }\n  };\n\n  const day_time = () => {\n    // NEED TO SET CONDITIONS FOR ROLL OVER MINUTES \n    if (currentTime > 600 && accumalatedTime <= 1800) {\n      dayTime = util.round(accumalatedTime, currentTime, 100);\n      var dayPrice = genPrice.calculate_daytime_payments(dayTime, hourly_rate, day_max_limit, day_max_rate);\n      setbillings(dayTime, dayPrice, 0, 0, parseFloat(dayPrice).toFixed(2));\n    } // overlaping day => night\n\n\n    if (currentTime < 1800 && accumalatedTime > 1800 && accumalatedTime <= 3000) {\n      //current_time < 6pm(daytime) && setTime > 6pm & setTime is <= 6am then do something\n      dayTime = util.round(1800, currentTime, 100);\n      nightTime = util.round(accumalatedTime, 1800, 100); // Generate night time\n\n      maxLimit_overflow = util.overlap_limit(1800, 3000, accumalatedTime, night_minute_rate);\n      var dayPrice = genPrice.calculate_daytime_payments(dayTime, hourly_rate, day_max_limit, day_max_rate);\n      var nightPrice = genPrice.calculate_nighttime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate, maxLimit_overflow);\n      console.log(currentTime);\n      console.log(accumalatedTime);\n      console.log(maxLimit_overflow);\n      sumTotal = eval(dayPrice + nightPrice);\n      console.log(sumTotal);\n      setbillings(dayTime, dayPrice, nightTime, nightPrice, parseFloat(sumTotal).toFixed(2));\n    } // day => night => day\n\n\n    if (currentTime < 1800 && accumalatedTime > 1800 && accumalatedTime > 3000) {\n      dayTime = util.round(1800, currentTime, 100);\n      nightTime = util.round(3000, 1800, 100);\n      extraTime = util.round(accumalatedTime, 3000, 100);\n      maxLimit_overflow = util.overlap_limit(3000, 4200, accumalatedTime, day_minute_rate);\n      const dayPrice = genPrice.calculate_daytime_payments(dayTime, hourly_rate, day_max_limit, day_max_rate);\n      const nightPrice = genPrice.calculate_nighttime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate);\n      const extraPrice = genPrice.calculate_extratime_payments(extraTime, hourly_rate, day_max_limit, day_max_rate, maxLimit_overflow);\n      sumTotal = eval(dayPrice + nightPrice + extraPrice);\n      console.log('this triggered too');\n      setbillings(dayTime, dayPrice, nightTime, nightPrice, parseFloat(sumTotal).toFixed(2));\n    }\n  };\n\n  if (minutes > 0) {\n    max_calculations();\n  }\n\n  if (minutes <= 0) {\n    night_time();\n    day_time();\n  }\n};\n\n_s(PaymentGenerator, \"VO2z2oiBoC6H12FIzKuigBjz7nk=\");\n\n_c = PaymentGenerator;\nexport default PaymentGenerator;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentGenerator\");","map":{"version":3,"sources":["/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Components/Financials/Calculator/PaymentGenerator.js"],"names":["useContext","PaymentContext","MaxSelection","Util","GeneratePrice","PaymentGenerator","hours","minutes","console","log","setNightTime","setNightTimeBilling","setDayTime","setDayTimeBilling","setBilling","setTime","timeDate","Date","night_hourly_rate","hourly_rate","day_max_limit","night_max_limit","day_max_rate","night_max_rate","genPrice","util","maxLimit_overflow","day_minute_rate","night_minute_rate","check_expired_hour","localStorage","getItem","currentTime","parseInt","getHours","getMinutes","setLimit","accumalatedTime","minuteCheck","hourCheck","Math","floor","newMinutes","newHours","dayTime","nightTime","extraTime","sumTotal","check_and_adjust","setbillings","set_day_time","set_daytime_billing","set_night_time","set_nighttime_billing","total_billing","max_calculations","timeSlot_bool","maxBtn_timeSkip","currentMinuteCheck","sumTime","max_cost_calc","max_limits","dayTimes","round","dayPrice","max_calculate_daytime_payments","nightPrice","max_calculate_nighttime_payments","extraPrice","max_calculate_extratime_payments","night_time","calculate_nighttime_payments","overlap_limit","calculate_daytime_payments","parseFloat","toFixed","calculate_extratime_payments","day_time","eval"],"mappings":"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","sourcesContent":["// import { useStripe } from '@stripe/react-stripe-js'\nimport { useContext} from 'react'\nimport { PaymentContext } from '../../../Context/PaymentContext'\nimport MaxSelection from '../../max_selection/MaxSelection'\nimport Util from './../../Utilities/Utilities'\nimport GeneratePrice from './GeneratePrice'\n\n\n\n\n\nconst PaymentGenerator = (hours, minutes) => {\n\n    console.log(`hours - ${hours} mins - ${minutes}`)\n    const { setNightTime, setNightTimeBilling, setDayTime, setDayTimeBilling, setBilling, setTime } = useContext(PaymentContext)\n    const timeDate = new Date()\n    const night_hourly_rate = 2.0\n    const hourly_rate = 1.75\n    const day_max_limit = 3\n    const night_max_limit = 4\n    var day_max_rate = 5.50\n    var night_max_rate = 8\n    const genPrice = new GeneratePrice()\n    const util = new Util()\n    var maxLimit_overflow\n    const day_minute_rate = hourly_rate / 60\n    const night_minute_rate = night_hourly_rate / 60\n    const check_expired_hour = localStorage.getItem('_time_btn_hr')\n\n    //parseInt(`${timeDate.getHours()}${timeDate.getMinutes()}`)\n    var currentTime = parseInt(`${timeDate.getHours()}${timeDate.getMinutes() < 10?`0${timeDate.getMinutes()}`:timeDate.getMinutes()}`)\n    var setLimit = parseInt(`${hours}${minutes}0`)\n    var accumalatedTime = currentTime + setLimit\n    var minuteCheck = accumalatedTime % 100\n    var hourCheck = Math.floor(accumalatedTime / 100)\n    var newMinutes, newHours, dayTime, nightTime, extraTime, sumTotal\n    \n\n\n    const check_and_adjust = () => {\n        // Accumulated Time Check\n        if (hourCheck > 23) {\n            hourCheck = hourCheck - 24\n        }\n        if (minuteCheck >= 60) {\n            newMinutes = minuteCheck - 60\n            newHours = Math.floor((hourCheck) + 1)\n            accumalatedTime = parseInt(`${newHours}${newMinutes}`)\n            if (newMinutes < 10) {\n                accumalatedTime = parseInt(`${newHours}0${newMinutes}`)\n            }\n            if (newMinutes === 0) {\n                accumalatedTime = parseInt(`${newHours}00`)\n            }\n        } else {\n            accumalatedTime = currentTime + setLimit //Current time + Set Limit time\n\n        }\n    }\n    check_and_adjust()\n\n\n    const setbillings = (set_day_time, set_daytime_billing, set_night_time, set_nighttime_billing, total_billing) => {\n        setDayTime(set_day_time)\n        setDayTimeBilling(set_daytime_billing)\n        setNightTime(set_night_time)\n        setNightTimeBilling(set_nighttime_billing)\n        setBilling(total_billing)\n    }\n\n\n    const max_calculations = () => { \n        var timeSlot_bool = null\n\n        if(minutes > 0){ \n            var maxBtn_timeSkip = parseInt(`${hours}${minutes}`)\n            const currentMinuteCheck = currentTime % 100\n            var sumTime = (currentTime + maxBtn_timeSkip)\n            if(currentMinuteCheck + minutes == 60){ \n                sumTime = sumTime + 40\n            }\n\n            // Check parameters timeSlot of current time => (True = Night \\ False = Day)\n            currentTime > 1800 || currentTime < 600?timeSlot_bool = true:timeSlot_bool = false \n            \n\n            var max_cost_calc = 0\n            const max_limits = [1800,3000,4200, 600] //day // night // day\n            \n            if(timeSlot_bool == false && sumTime == max_limits[0]){ \n                var dayTimes = util.round(max_limits[0], currentTime, 100)\n                console.log(dayTimes)\n                const dayPrice = genPrice.max_calculate_daytime_payments(dayTimes, hourly_rate, day_max_limit, day_max_rate)\n                console.log('max Trigger - ' + dayPrice)\n                setbillings(dayTime, dayPrice, 0, 0, dayPrice)\n            }\n            if(timeSlot_bool == false && sumTime == max_limits[1]){ \n                dayTime = util.round(max_limits[0], currentTime, 100)\n                nightTime = util.round(sumTime, max_limits[0], 100)\n                const dayPrice = genPrice.max_calculate_daytime_payments(dayTime, hourly_rate, day_max_limit, day_max_rate)\n                const nightPrice = genPrice.max_calculate_nighttime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate)\n                sumTotal = nightPrice + dayPrice\n                setbillings(dayTime, dayPrice, nightTime, nightPrice, sumTotal)\n            }\n            if(timeSlot_bool == false && sumTime == max_limits[2]){ \n                dayTime = util.round(max_limits[0], currentTime, 100)\n                nightTime = util.round(max_limits[1], max_limits[0], 100)\n                extraTime = util.round(sumTime, max_limits[1], 100)\n                const dayPrice = genPrice.max_calculate_daytime_payments(dayTime, hourly_rate, day_max_limit, day_max_rate)\n                const nightPrice = genPrice.max_calculate_nighttime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate)\n                const extraPrice = genPrice.max_calculate_extratime_payments(extraTime, night_hourly_rate, night_max_limit, night_max_rate)\n                sumTotal = nightPrice + dayPrice + extraPrice\n                setbillings(dayTime, dayPrice, nightTime, nightPrice, sumTotal)\n            }\n\n            // Night\n            if(timeSlot_bool == true && sumTime == max_limits[1]){ \n                nightTime = util.round(max_limits[1], currentTime, 100)\n                console.log(nightTime)\n                const nightPrice = genPrice.max_calculate_daytime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate)\n                console.log('max Trigger - ' + nightPrice)\n                setbillings(nightTime, nightPrice, 0, 0, nightPrice)\n            }\n            // if(timeSlot_bool == true && sumTime == max_limits[1]){ \n            //     dayTime = util.round(max_limits[0], currentTime, 100)\n            //     nightTime = util.round(sumTime, max_limits[0], 100)\n            //     const dayPrice = genPrice.max_calculate_daytime_payments(dayTime, hourly_rate, day_max_limit, day_max_rate)\n            //     const nightPrice = genPrice.max_calculate_nighttime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate)\n            //     sumTotal = nightPrice + dayPrice\n            //     setbillings(dayTime, dayPrice, nightTime, nightPrice, sumTotal)\n            // }\n            // if(timeSlot_bool == true && sumTime == max_limits[2]){ \n            //     dayTime = util.round(max_limits[0], currentTime, 100)\n            //     nightTime = util.round(max_limits[1], max_limits[0], 100)\n            //     extraTime = util.round(sumTime, max_limits[1], 100)\n            //     const dayPrice = genPrice.max_calculate_daytime_payments(dayTime, hourly_rate, day_max_limit, day_max_rate)\n            //     const nightPrice = genPrice.max_calculate_nighttime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate)\n            //     const extraPrice = genPrice.max_calculate_extratime_payments(extraTime, night_hourly_rate, night_max_limit, night_max_rate)\n            //     sumTotal = nightPrice + dayPrice + extraPrice\n            //     setbillings(dayTime, dayPrice, nightTime, nightPrice, sumTotal)\n            // }\n        }\n    }\n\n\n\n    const night_time = () => {\n        // NEED TO SET CONDITIONS FOR ROLL OVER MINUTES\n        if (currentTime >= 1800 && accumalatedTime <= 3000 || currentTime < 600 && accumalatedTime <= 600) {\n            nightTime = util.round(accumalatedTime, currentTime, 100)\n            const nightPrice = genPrice.calculate_nighttime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate)\n            console.log(nightPrice)\n            setbillings(0, 0, nightTime, nightPrice, nightPrice) \n        }\n        // overlap_time\n        if(currentTime >= 1800 && accumalatedTime > 3000 && accumalatedTime <= 4200){ // if current time is greater than 6pm & setTime is > 6am and setTime is < 6pm\n            dayTime = util.round(accumalatedTime, 3000, 100)           // util.round (setTime - nighttime) / 100   \n            nightTime = util.round(3000, currentTime, 100)\n            maxLimit_overflow = util.overlap_limit(3000,4200, accumalatedTime, day_minute_rate)\n            console.log(maxLimit_overflow)\n            const dayPrice = genPrice.calculate_daytime_payments(dayTime, hourly_rate, day_max_limit, day_max_rate, maxLimit_overflow)\n            const nightPrice = genPrice.calculate_nighttime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate)\n            sumTotal = nightPrice + dayPrice\n            setbillings(0, 0, nightTime, nightPrice, parseFloat(sumTotal).toFixed(2)) \n        }\n        //night => day => night\n        if(currentTime >= 1800 && accumalatedTime > 4200){ \n            nightTime = util.round(3000, currentTime, 100)\n            dayTime = util.round(accumalatedTime, 3000, 100)  \n            extraTime = util.round(accumalatedTime, 4200, 100)\n            maxLimit_overflow = util.overlap_limit(4200,accumalatedTime, accumalatedTime, day_minute_rate)\n            const dayPrice = genPrice.calculate_daytime_payments(dayTime, hourly_rate, day_max_limit, day_max_rate)\n            const nightPrice = genPrice.calculate_nighttime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate)\n            const extraPrice = genPrice.calculate_extratime_payments(extraTime, night_hourly_rate,night_max_limit, night_max_rate, maxLimit_overflow)\n            sumTotal = dayPrice + nightPrice + extraPrice\n            setbillings(0,0, nightTime, nightPrice, parseFloat(sumTotal).toFixed(2))\n        }\n\n        // night below 6am => day below => 6pm\n        if(currentTime < 600 && accumalatedTime > 600 && accumalatedTime <= 1800){ // if current time is < 6am and setTime is greater than\n            dayTime = util.round(accumalatedTime, 600, 100)  \n            nightTime = util.round(600, currentTime, 100)\n            const dayPrice = genPrice.calculate_daytime_payments(dayTime, hourly_rate, day_max_limit, day_max_rate)\n            const nightPrice = genPrice.calculate_nighttime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate)\n            sumTotal = dayPrice + nightPrice\n            setbillings(dayTime,dayPrice, nightTime, nightPrice, parseFloat(sumTotal).toFixed(2))\n        }\n        // night below 6am => pass day => night again\n        if(currentTime < 600 && accumalatedTime > 1800 && accumalatedTime <= 3000){ \n            dayTime = util.round(1800, 600, 100)  \n            nightTime = util.round(600, currentTime, 100)\n            extraTime = util.round(accumalatedTime, 1800, 100)\n            const dayPrice = genPrice.calculate_daytime_payments(dayTime, hourly_rate, day_max_limit, day_max_rate)\n            const nightPrice = genPrice.calculate_nighttime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate)\n            const extraPrice = genPrice.calculate_extratime_payments(extraTime, night_hourly_rate, night_max_limit, night_max_rate)\n            sumTotal = dayPrice + nightPrice + extraPrice\n            setbillings(dayTime,dayPrice, nightTime, nightPrice, parseFloat(sumTotal).toFixed(2))\n        }\n    }\n\n\n    const day_time = () => {\n        // NEED TO SET CONDITIONS FOR ROLL OVER MINUTES \n        if (currentTime > 600 && accumalatedTime <= 1800) {\n            dayTime = util.round(accumalatedTime, currentTime, 100)\n            var dayPrice = genPrice.calculate_daytime_payments(dayTime, hourly_rate, day_max_limit, day_max_rate)\n            setbillings(dayTime, dayPrice, 0, 0, parseFloat(dayPrice).toFixed(2))\n            \n        }\n        // overlaping day => night\n        if (currentTime < 1800 && (accumalatedTime > 1800 && accumalatedTime <= 3000)) { //current_time < 6pm(daytime) && setTime > 6pm & setTime is <= 6am then do something\n            dayTime = util.round(1800, currentTime, 100)\n            nightTime = util.round(accumalatedTime, 1800, 100)  // Generate night time\n            maxLimit_overflow = util.overlap_limit(1800,3000, accumalatedTime, night_minute_rate)\n            var dayPrice = genPrice.calculate_daytime_payments(dayTime, hourly_rate, day_max_limit, day_max_rate)\n            var nightPrice = genPrice.calculate_nighttime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate, maxLimit_overflow)\n\n\n            console.log(currentTime)\n            console.log(accumalatedTime)\n            console.log(maxLimit_overflow)\n            sumTotal = eval(dayPrice + nightPrice)\n            console.log(sumTotal)\n            setbillings(dayTime, dayPrice, nightTime, nightPrice, parseFloat(sumTotal).toFixed(2))\n        }\n        // day => night => day\n        if(currentTime < 1800 && (accumalatedTime > 1800 && accumalatedTime > 3000)){ \n            dayTime = util.round(1800, currentTime, 100)\n            nightTime = util.round(3000, 1800, 100)\n            extraTime = util.round(accumalatedTime, 3000, 100)\n            maxLimit_overflow = util.overlap_limit(3000,4200, accumalatedTime, day_minute_rate)\n            const dayPrice = genPrice.calculate_daytime_payments(dayTime, hourly_rate, day_max_limit, day_max_rate)\n            const nightPrice = genPrice.calculate_nighttime_payments(nightTime, night_hourly_rate, night_max_limit, night_max_rate)\n            const extraPrice = genPrice.calculate_extratime_payments(extraTime, hourly_rate, day_max_limit, day_max_rate, maxLimit_overflow)\n            sumTotal = eval(dayPrice + nightPrice + extraPrice)\n            console.log('this triggered too')\n            setbillings(dayTime, dayPrice, nightTime, nightPrice, parseFloat(sumTotal).toFixed(2))\n        }\n    }\n\n    if(minutes > 0){ \n        max_calculations()\n    }\n    if(minutes <= 0){ \n        night_time()\n        day_time()\n    }\n\n\n\n}\n\nexport default PaymentGenerator;\n\n\n"]},"metadata":{},"sourceType":"module"}