{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport { PaymentContext } from '../../../Context/PaymentContext';\n\nconst PaymentGenerator = (hours, minutes) => {\n  _s();\n\n  const {\n    setNightTime,\n    setNightTimeBilling,\n    setDayTime,\n    setDayTimeBilling,\n    setBilling,\n    setTime\n  } = useContext(PaymentContext);\n  const timeDate = new Date();\n  const night_hourly_rate = 6;\n  const night_minute_rate = 1.5;\n  const hourly_rate = 4;\n  const minute_rate = 1;\n  var currentTime = parseInt(`${timeDate.getHours()}${timeDate.getMinutes()}`);\n  var setLimit = parseInt(`${hours}${minutes}`);\n  var accumalatedTime = 1700 + setLimit;\n  var minuteCheck = accumalatedTime % 100;\n  var hourCheck = Math.floor(accumalatedTime / 100);\n  var night_overlap_time;\n  var night_overlap_cost;\n  var day_overlap_time;\n  var day_overlap_cost;\n  var newNightTIme_hour;\n  var newNightTIme_min;\n  var newMinutes;\n  var newHours;\n  var daytime_billing;\n  var overlap_billing;\n  var daytimeHour;\n  var daytimeMin;\n  var dayTime;\n  var totalbilling;\n  var nightTime;\n  var night_time_billing;\n\n  if (hourCheck > 23) {\n    hourCheck = hourCheck - 24;\n  }\n\n  if (minuteCheck >= 60) {\n    newMinutes = minuteCheck - 60;\n    newHours = Math.floor(hourCheck + 1);\n    accumalatedTime = parseInt(`${newHours}${newMinutes}`);\n\n    if (newMinutes < 10) {\n      accumalatedTime = parseInt(`${newHours}0${newMinutes}`);\n    }\n\n    if (newMinutes === 0) {\n      accumalatedTime = parseInt(`${newHours}00`);\n    }\n  } else {\n    accumalatedTime = 1700 + setLimit; //Current time + Set Limit time\n  }\n\n  useEffect(() => {\n    // STRICTLY DAYTIME\n    if (1700 <= 1800 && accumalatedTime <= 1800) {\n      // current_time < \n      dayTime = parseInt(`${hours}${minutes}`);\n      night_overlap_time = 0;\n      overlap_billing = 0;\n      daytime_billing = hours * hourly_rate + minutes / 15 * minute_rate;\n      totalbilling = daytime_billing + overlap_billing; // how much day time \n\n      console.log(`/daytime: ${dayTime}`); //day time cost \n\n      console.log(`/daytime_billing: ${daytime_billing}`); //how much night time\n\n      console.log(`/nighttime: ${night_overlap_time}`); // night time cost \n\n      console.log(`night Cost: $${overlap_billing}`);\n      setDayTime(dayTime);\n      setDayTimeBilling(daytime_billing);\n      setNightTime(night_overlap_time);\n      setNightTimeBilling(overlap_billing);\n      setBilling(totalbilling);\n    } // DAYTIME OVERLAPPING TO NIGHT \n    else if (1700 <= 1800 && accumalatedTime > 1800) {\n        //current_time >\n        night_overlap_time = accumalatedTime - 1800;\n        night_overlap_cost = night_overlap_time * .1; //.1 is dollar value of 6 dollars per hour\n\n        daytimeHour = Math.floor((1800 - 1700) / 100); // selected hours before night time\n\n        daytimeMin = Math.floor((1800 - 1700) % 100); // selected mins before night time\n\n        dayTime = parseInt(`${daytimeHour}${daytimeMin}`);\n        daytime_billing = daytimeHour * hourly_rate + Math.floor(daytimeMin * 0.27);\n\n        if (night_overlap_time > 99) {\n          newNightTIme_hour = Math.floor(night_overlap_time / 100);\n          newNightTIme_min = Math.floor(night_overlap_time % 100);\n          overlap_billing = newNightTIme_hour * 6 + newNightTIme_min * 0.1;\n          night_overlap_time = parseInt(`${newNightTIme_hour}${newNightTIme_min}`);\n        } else {\n          overlap_billing = Math.round((night_overlap_cost + Number.EPSILON) * 100) / 100;\n        } // how much day time \n\n\n        console.log(`/daytime: ${dayTime}`); //day time cost \n\n        console.log(`/daytime_billing: ${daytime_billing + overlap_billing}`); //how much night time\n\n        console.log(`/nighttime: ${night_overlap_time}`); // night time cost \n\n        console.log(`night Cost: $${overlap_billing}`);\n        setDayTime(dayTime);\n        setDayTimeBilling(daytime_billing);\n        setNightTime(night_overlap_time);\n        setNightTimeBilling(overlap_billing); // daytime_billing = 1800 - currentTime\n\n        totalbilling = daytime_billing + overlap_billing;\n        setBilling(totalbilling); //daytime billing\n      } // STRICTLY NIGHT CALCULATIONS\n      else if (1700 > 1800 && accumalatedTime > 1800) {\n          dayTime = 0;\n          night_overlap_time = 0;\n          overlap_billing = 0;\n          daytime_billing = 0;\n          nightTime = parseInt(`${hours}${minutes}`); // Might need\n\n          night_time_billing = daytime_billing = hours * night_hourly_rate + minutes / 15 * night_minute_rate;\n          setDayTime(dayTime);\n          setDayTimeBilling(daytime_billing);\n          setNightTime(night_overlap_time);\n          setNightTimeBilling(overlap_billing);\n          setBilling(night_time_billing);\n        } // DAYTIME OVERLAPPING TO NIGHT \n        else if (1700 <= 600 && accumalatedTime > 600) {\n            //current_time >\n            day_overlap_time = accumalatedTime - 600;\n            day_overlap_cost = Math.floor(day_overlap_time * .07); //.07 is dollar value of 4 dollars per hour\n\n            nighttimeHour = Math.floor((600 - 1700) / 100); // selected hours before night time\n\n            nighttimeMin = Math.floor((600 - 1700) % 100); // selected mins before night time\n\n            nightTime = parseInt(`${nighttimeHour}${nighttimeMin}`);\n            nighttime_billing = nighttimeHour * night_hourly_rate + Math.floor(nighttimeMin * 0.07);\n\n            if (day_overlap_time > 99) {\n              newDayTime_hour = Math.floor(day_overlap_time / 100);\n              newDayTime_min = Math.floor(day_overlap_time % 100);\n              overlap_billing = newDayTime_hour * 4 + newDayTime_min * 0.07;\n              day_overlap_time = parseInt(`${newDayTime_hour}${newDayTime_min}`);\n            } else {\n              overlap_billing = Math.round((day_overlap_cost + Number.EPSILON) * 100) / 100;\n            } // night_overlap_time = Math.round((night_overlap_cost + Number.EPSILON) * 100) / 100\n            // how much day time \n\n\n            console.log(`/daytime: ${day_overlap_time}`); //day time cost \n\n            console.log(`/daytime_billing: ${daytime_billing + overlap_billing}`); //how much night time\n\n            console.log(`/nighttime: ${night_overlap_time}`); // night time cost \n\n            console.log(`night Cost: $${overlap_billing}`);\n            setDayTime(day_overlap_time);\n            setDayTimeBilling(daytime_billing);\n            setNightTime(night_overlap_time);\n            setNightTimeBilling(overlap_billing); // daytime_billing = 1800 - currentTime\n\n            totalbilling = daytime_billing + overlap_billing;\n            setBilling(totalbilling); //daytime billing\n          } // NIGHT GOING INTO DAY BREAK\n    // Set Selected time here for tracking and to be pushed to local storage by confirm BTN\n\n\n    setTime(parseInt(`${hours}${minutes}`));\n  }, [hours, minutes]);\n};\n\n_s(PaymentGenerator, \"I4fejVgDR9RCjmNne9S9Kn77axg=\");\n\n_c = PaymentGenerator;\nexport default PaymentGenerator;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentGenerator\");","map":{"version":3,"sources":["/Users/bottlecapmedia/Desktop/OneShot Parking/src/Components/Financials/Calculator/PaymentGenerator.js"],"names":["React","useEffect","useState","useContext","PaymentContext","PaymentGenerator","hours","minutes","setNightTime","setNightTimeBilling","setDayTime","setDayTimeBilling","setBilling","setTime","timeDate","Date","night_hourly_rate","night_minute_rate","hourly_rate","minute_rate","currentTime","parseInt","getHours","getMinutes","setLimit","accumalatedTime","minuteCheck","hourCheck","Math","floor","night_overlap_time","night_overlap_cost","day_overlap_time","day_overlap_cost","newNightTIme_hour","newNightTIme_min","newMinutes","newHours","daytime_billing","overlap_billing","daytimeHour","daytimeMin","dayTime","totalbilling","nightTime","night_time_billing","console","log","round","Number","EPSILON","nighttimeHour","nighttimeMin","nighttime_billing","newDayTime_hour","newDayTime_min"],"mappings":"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","sourcesContent":["import React, { useEffect, useState,useContext } from 'react'\nimport { PaymentContext } from '../../../Context/PaymentContext'\n\n\n\n\n\n\nconst PaymentGenerator = (hours, minutes) => {\n    const {setNightTime, setNightTimeBilling, setDayTime, setDayTimeBilling, setBilling, setTime,} = useContext(PaymentContext)\n    const timeDate = new Date()\n    const night_hourly_rate = 6\n    const night_minute_rate = 1.5\n    const hourly_rate = 4\n    const minute_rate = 1\n    var currentTime = parseInt(`${timeDate.getHours()}${timeDate.getMinutes()}`)\n    var setLimit = parseInt(`${hours}${minutes}`)\n    var accumalatedTime = 1700 + setLimit\n    var minuteCheck = accumalatedTime % 100\n    var hourCheck =  Math.floor(accumalatedTime / 100)\n    var night_overlap_time\n    var night_overlap_cost\n    var day_overlap_time\n    var day_overlap_cost\n    var newNightTIme_hour\n    var newNightTIme_min\n    var newMinutes\n    var newHours\n    var daytime_billing\n    var overlap_billing\n    var daytimeHour\n    var daytimeMin\n    var dayTime\n    var totalbilling\n    var nightTime\n    var night_time_billing\n\n\n\n    if(hourCheck > 23){\n        hourCheck = hourCheck - 24\n    }\n    if( minuteCheck >= 60){\n        newMinutes = minuteCheck - 60\n        newHours = Math.floor((hourCheck) + 1)\n        accumalatedTime = parseInt(`${newHours}${newMinutes}`)\n    if(newMinutes < 10){\n            accumalatedTime = parseInt(`${newHours}0${newMinutes}`)\n    }\n    if(newMinutes === 0){\n        accumalatedTime = parseInt(`${newHours}00`)\n    }\n    }else {\n        accumalatedTime = 1700 + setLimit //Current time + Set Limit time\n   \n    }\n\n\n    \n    useEffect(()=>{\n        // STRICTLY DAYTIME\n        if(1700 <= 1800 && accumalatedTime <= 1800){ // current_time < \n            dayTime = parseInt(`${hours}${minutes}`)\n            night_overlap_time = 0\n            overlap_billing = 0\n            daytime_billing = hours * hourly_rate + (minutes / 15) * minute_rate\n            totalbilling = daytime_billing + overlap_billing\n\n            // how much day time \n            console.log(`/daytime: ${dayTime}`)\n\n            //day time cost \n            console.log(`/daytime_billing: ${daytime_billing}`)\n            //how much night time\n            console.log(`/nighttime: ${night_overlap_time}`)\n            // night time cost \n            console.log(`night Cost: $${overlap_billing}`)\n\n            setDayTime(dayTime)\n            setDayTimeBilling(daytime_billing)\n            setNightTime(night_overlap_time)\n            setNightTimeBilling(overlap_billing)\n            setBilling(totalbilling)\n        }        \n\n        // DAYTIME OVERLAPPING TO NIGHT \n        else if(1700 <= 1800 && accumalatedTime > 1800){ //current_time >\n            \n            night_overlap_time = accumalatedTime - 1800\n            night_overlap_cost = night_overlap_time * .1 //.1 is dollar value of 6 dollars per hour\n\n            daytimeHour = Math.floor((1800-1700) / 100) // selected hours before night time\n            daytimeMin = Math.floor((1800-1700) % 100)// selected mins before night time\n            dayTime = parseInt(`${daytimeHour}${daytimeMin}`)\n            daytime_billing = daytimeHour * hourly_rate + Math.floor(daytimeMin * 0.27)\n        \n\n            if(night_overlap_time > 99){\n             newNightTIme_hour = Math.floor(night_overlap_time / 100)\n             newNightTIme_min = Math.floor(night_overlap_time % 100)\n             overlap_billing = (newNightTIme_hour * 6) + (newNightTIme_min * 0.1)\n             night_overlap_time = parseInt(`${newNightTIme_hour}${newNightTIme_min}`)\n           }else{\n               overlap_billing = Math.round((night_overlap_cost + Number.EPSILON) * 100) / 100\n           }\n           \n       \n            // how much day time \n            console.log(`/daytime: ${dayTime}`)\n            //day time cost \n            console.log(`/daytime_billing: ${daytime_billing + overlap_billing}`)\n            //how much night time\n            console.log(`/nighttime: ${night_overlap_time}`)\n            // night time cost \n            console.log(`night Cost: $${overlap_billing}`)\n            \n\n            \n            setDayTime(dayTime)\n            setDayTimeBilling(daytime_billing)\n            setNightTime(night_overlap_time)\n            setNightTimeBilling(overlap_billing)\n           \n            // daytime_billing = 1800 - currentTime\n            totalbilling = daytime_billing + overlap_billing\n            setBilling(totalbilling) //daytime billing\n        }\n        \n        // STRICTLY NIGHT CALCULATIONS\n        else if(1700 > 1800 && accumalatedTime > 1800){\n            dayTime=0\n            night_overlap_time = 0\n            overlap_billing = 0\n            daytime_billing = 0\n            nightTime = parseInt(`${hours}${minutes}`) // Might need\n            night_time_billing = daytime_billing = hours * night_hourly_rate + (minutes / 15) * night_minute_rate\n\n   \n            setDayTime(dayTime)\n            setDayTimeBilling(daytime_billing)\n            setNightTime(night_overlap_time)\n            setNightTimeBilling(overlap_billing)\n            setBilling(night_time_billing) \n           \n        } // DAYTIME OVERLAPPING TO NIGHT \n        else if(1700 <= 600 && accumalatedTime > 600){ //current_time >\n            \n            day_overlap_time = accumalatedTime - 600\n            day_overlap_cost = Math.floor(day_overlap_time * .07) //.07 is dollar value of 4 dollars per hour\n\n            nighttimeHour = Math.floor((600-1700) / 100) // selected hours before night time\n            nighttimeMin = Math.floor((600-1700) % 100)// selected mins before night time\n            nightTime = parseInt(`${nighttimeHour}${nighttimeMin}`)\n            nighttime_billing = nighttimeHour * night_hourly_rate + Math.floor(nighttimeMin * 0.07)\n          \n\n            if(day_overlap_time > 99){\n             newDayTime_hour = Math.floor(day_overlap_time / 100)\n             newDayTime_min = Math.floor(day_overlap_time % 100)\n             overlap_billing = (newDayTime_hour * 4) + (newDayTime_min * 0.07)\n             day_overlap_time = parseInt(`${newDayTime_hour}${newDayTime_min}`)\n           }else{\n               overlap_billing = Math.round((day_overlap_cost + Number.EPSILON) * 100) / 100\n           }\n           \n       \n            // night_overlap_time = Math.round((night_overlap_cost + Number.EPSILON) * 100) / 100\n            // how much day time \n            console.log(`/daytime: ${day_overlap_time}`)\n            //day time cost \n            console.log(`/daytime_billing: ${daytime_billing + overlap_billing}`)\n            //how much night time\n            console.log(`/nighttime: ${night_overlap_time}`)\n            // night time cost \n            console.log(`night Cost: $${overlap_billing}`)\n            \n\n            \n            setDayTime(day_overlap_time)\n            setDayTimeBilling(daytime_billing)\n            setNightTime(night_overlap_time)\n            setNightTimeBilling(overlap_billing)\n           \n            // daytime_billing = 1800 - currentTime\n            totalbilling = daytime_billing + overlap_billing\n            setBilling(totalbilling) //daytime billing\n        }\n\n        // NIGHT GOING INTO DAY BREAK\n\n        // Set Selected time here for tracking and to be pushed to local storage by confirm BTN\n        setTime(parseInt(`${hours}${minutes}`))\n    }, [hours, minutes])\n\n}\n\n\n\nexport default PaymentGenerator;\n \n\n"]},"metadata":{},"sourceType":"module"}