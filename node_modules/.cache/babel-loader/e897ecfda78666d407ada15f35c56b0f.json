{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport { PaymentContext } from '../../../Context/PaymentContext';\n\nconst PaymentGenerator = (hours, minutes) => {\n  _s();\n\n  const {\n    setBilling,\n    setTime,\n    setNightTime\n  } = useContext(PaymentContext);\n  const timeDate = new Date(); // `${timeDate.getHours()}${timeDate.getMinutes()}`\n  // What is the rate per hour? (R$4)\n\n  const night_hourly_rate = 8;\n  const hourly_rate = 4; // what is the rate per 15mins (R$1)\n\n  const night_minute_rate = 2;\n  const minute_rate = 1; // if(minutes === '00'){ \n  //     console.log('true'\n  //     )}\n\n  var currentTime = parseInt(`${timeDate.getHours()}${timeDate.getMinutes()}`);\n  var setLimit = parseInt(`${hours}${minutes}`);\n  var accumalatedTime = 1700 + setLimit;\n  var minuteCheck = accumalatedTime % 100;\n  var hourCheck = Math.floor(accumalatedTime / 100);\n  var newNightTIme_hour;\n  var newNightTIme_min;\n  var newMinutes;\n  var newHours;\n  var daytime_billing;\n  var overlap_billing;\n  var night_time;\n\n  if (hourCheck > 23) {\n    hourCheck = hourCheck - 24;\n  }\n\n  if (minuteCheck >= 60) {\n    newMinutes = minuteCheck - 60;\n    newHours = Math.floor(hourCheck + 1);\n    accumalatedTime = parseInt(`${newHours}${newMinutes}`);\n\n    if (newMinutes < 10) {\n      accumalatedTime = parseInt(`${newHours}0${newMinutes}`);\n    }\n\n    if (newMinutes === 0) {\n      accumalatedTime = parseInt(`${newHours}00`);\n    }\n  } else {\n    accumalatedTime = 1700 + setLimit; //Current time + Set Limit time\n  }\n\n  useEffect(() => {\n    // Check to see if the current time is lesser than 6 if so and with added time then do the following. \n    daytime_billing = hours * hourly_rate + minutes / 15 * minute_rate;\n\n    if (accumalatedTime <= 1800) {\n      // current_time < \n      console.log(accumalatedTime); // This would be the regular day time.\n\n      setBilling(daytime_billing);\n    } else if (1700 <= 1800 && accumalatedTime > 1800) {\n      //current_time >\n      const night_overlap_time = accumalatedTime - 1800;\n      const night_overlap_cost = (accumalatedTime - 1800) * .1; //.1 is dollar value of 6 dollars per hour\n\n      if (night_overlap_time > 99) {\n        newNightTIme_hour = Math.floor(night_overlap_time / 100);\n        newNightTIme_min = Math.floor(night_overlap_time % 100);\n        console.log(`/60: ${newNightTIme_hour}`);\n        console.log(`/min: ${newNightTIme_min}`); // newNightTime_min < 10 then add the extra 0 \n      } // daytime_billing = 1800 - currentTime\n\n\n      var overlapNightTime_ = `${newNightTIme_hour}${newNightTIme_min}`;\n      daytime_billing = hours * hourly_rate + minutes / 15 * minute_rate;\n      overlap_billing = Math.round((night_overlap_cost + Number.EPSILON) * 100) / 100;\n      setBilling(daytime_billing); //daytime billing\n      // overlap_night_time_billing\n\n      console.log(`NightTime: ${overlapNightTime_}`);\n      console.log(`daytime billing: ${daytime_billing}`);\n      console.log(`Overlap time: ${night_overlap_time}`);\n      console.log(`night Cost: $${overlap_billing}`);\n    } // This makes sure that it the time is over 6pm and just bill for night time rates only\n    //if(currentTime > 1800 && accumalatedTime > 1800)\n    else if (1700 > 1800 && accumalatedTime > 1800) {\n        setBilling(daytime_billing); //daytime billing\n\n        console.log('working'); // \n      } // console.log(`limit at: ${setLimit}`)\n    // if currentHour  is > 6 then setNightTIme = current_time - \n    // setBilling()\n    // Set Selected time here for tracking and to be pushed to local storage by confirm BTN\n\n\n    setTime(parseInt(`${hours}${minutes}`));\n  }, [hours, minutes]);\n};\n\n_s(PaymentGenerator, \"sqw8X0J8Cs8y+F+TK1eDLeTO8qE=\");\n\n_c = PaymentGenerator;\nexport default PaymentGenerator;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentGenerator\");","map":{"version":3,"sources":["/Users/bottlecapmedia/Desktop/OneShot Parking/src/Components/Financials/Calculator/PaymentGenerator.js"],"names":["React","useEffect","useState","useContext","PaymentContext","PaymentGenerator","hours","minutes","setBilling","setTime","setNightTime","timeDate","Date","night_hourly_rate","hourly_rate","night_minute_rate","minute_rate","currentTime","parseInt","getHours","getMinutes","setLimit","accumalatedTime","minuteCheck","hourCheck","Math","floor","newNightTIme_hour","newNightTIme_min","newMinutes","newHours","daytime_billing","overlap_billing","night_time","console","log","night_overlap_time","night_overlap_cost","overlapNightTime_","round","Number","EPSILON"],"mappings":"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","sourcesContent":["import React, { useEffect, useState,useContext } from 'react'\nimport { PaymentContext } from '../../../Context/PaymentContext'\n\n\n\n\n\n\nconst PaymentGenerator = (hours, minutes) => {\n    const {setBilling, setTime, setNightTime} = useContext(PaymentContext)\n    const timeDate = new Date()\n\n    // `${timeDate.getHours()}${timeDate.getMinutes()}`\n    // What is the rate per hour? (R$4)\n    const night_hourly_rate = 8\n    const hourly_rate = 4\n    // what is the rate per 15mins (R$1)\n    const night_minute_rate = 2\n    const minute_rate = 1\n    // if(minutes === '00'){ \n    //     console.log('true'\n    //     )}\n    var currentTime = parseInt(`${timeDate.getHours()}${timeDate.getMinutes()}`)\n    var setLimit = parseInt(`${hours}${minutes}`)\n    var accumalatedTime = 1700 + setLimit\n    var minuteCheck = accumalatedTime % 100\n    var hourCheck =  Math.floor(accumalatedTime / 100)\n    var newNightTIme_hour\n    var newNightTIme_min\n    var newMinutes\n    var newHours\n    var daytime_billing\n    var overlap_billing\n    var night_time\n\n\n\n    if(hourCheck > 23){\n        hourCheck = hourCheck - 24\n    }\n    if( minuteCheck >= 60){\n        newMinutes = minuteCheck - 60\n        newHours = Math.floor((hourCheck) + 1)\n        accumalatedTime = parseInt(`${newHours}${newMinutes}`)\n    if(newMinutes < 10){\n            accumalatedTime = parseInt(`${newHours}0${newMinutes}`)\n    }\n    if(newMinutes === 0){\n        accumalatedTime = parseInt(`${newHours}00`)\n    }\n}else {\n        accumalatedTime = 1700 + setLimit //Current time + Set Limit time\n   \n    }\n\n\n    \n\n    useEffect(()=>{\n        // Check to see if the current time is lesser than 6 if so and with added time then do the following. \n        daytime_billing = hours * hourly_rate + (minutes / 15) * minute_rate\n\n        if(accumalatedTime <= 1800){ // current_time < \n            console.log(accumalatedTime) // This would be the regular day time.\n            setBilling(daytime_billing)\n        }        \n        else if(1700 <= 1800 && accumalatedTime > 1800){ //current_time >\n            const night_overlap_time = accumalatedTime - 1800\n            const night_overlap_cost = (accumalatedTime - 1800) * .1 //.1 is dollar value of 6 dollars per hour\n         \n\n            if(night_overlap_time > 99){\n             newNightTIme_hour = Math.floor(night_overlap_time / 100)\n             newNightTIme_min = Math.floor(night_overlap_time % 100)\n           \n            console.log(`/60: ${newNightTIme_hour}`)\n            console.log(`/min: ${newNightTIme_min}`)\n            // newNightTime_min < 10 then add the extra 0 \n            }\n\n            // daytime_billing = 1800 - currentTime\n            var overlapNightTime_ = `${newNightTIme_hour}${newNightTIme_min}`\n            daytime_billing = hours * hourly_rate + (minutes / 15) * minute_rate\n            overlap_billing = Math.round((night_overlap_cost + Number.EPSILON) * 100) / 100\n\n            setBilling(daytime_billing) //daytime billing\n                                        // overlap_night_time_billing\n            console.log(`NightTime: ${overlapNightTime_}`)\n            console.log(`daytime billing: ${daytime_billing}`)\n            console.log(`Overlap time: ${night_overlap_time}`)\n            console.log(`night Cost: $${overlap_billing}`)\n        }\n        // This makes sure that it the time is over 6pm and just bill for night time rates only\n        //if(currentTime > 1800 && accumalatedTime > 1800)\n        else if(1700 > 1800 && accumalatedTime > 1800){\n            setBilling(daytime_billing) //daytime billing\n            console.log('working')\n        // \n        }\n        \n        // console.log(`limit at: ${setLimit}`)\n        \n            \n        // if currentHour  is > 6 then setNightTIme = current_time - \n\n        // setBilling()\n        // Set Selected time here for tracking and to be pushed to local storage by confirm BTN\n        setTime(parseInt(`${hours}${minutes}`))\n    }, [hours, minutes])\n\n}\n\n\n\nexport default PaymentGenerator;\n \n\n"]},"metadata":{},"sourceType":"module"}