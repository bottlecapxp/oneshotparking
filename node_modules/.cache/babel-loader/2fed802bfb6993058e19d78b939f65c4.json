{"ast":null,"code":"import _classCallCheck from\"/Users/bottlecapmedia/Documents/Applications/OneShot Parking/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _inherits from\"/Users/bottlecapmedia/Documents/Applications/OneShot Parking/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/bottlecapmedia/Documents/Applications/OneShot Parking/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import{Component}from'react';import PaymentGenerator from'../Financials/Calculator/PaymentGenerator';import Tick from'../../Assets/tick.mp3';import{Howl,Howler}from'howler';// const pGenerator = new PaymentGenerator()\nvar TimerLogic=/*#__PURE__*/function(_Component){_inherits(TimerLogic,_Component);var _super=_createSuper(TimerLogic);function TimerLogic(props){var _this;_classCallCheck(this,TimerLogic);_this=_super.call(this,props);_this.setValue=function(valFunc){_this.value=valFunc;};_this.stepValue=function(v){// v stands for value\nif(v>1){return 1;}else{return Math.round(v*24)/24;}};_this.scrollTime=function(stepVal){var givenValue=Math.round(stepVal*24);var minutes=0;//300 is max for 5 hours\n_this.hours=givenValue;// PaymentGenerator(this.hours, this.stagedMinutes)\n// Sound generator\n// Keeps track of time changes\nvar sound=new Howl({src:[Tick],volume:0.7});sound.play();return parseInt(\"\".concat(_this.hours).concat(minutes));};_this.hour=0;_this.stagedMinutes=0;_this.value=0.0;return _this;}return TimerLogic;}(Component);// End of Class\nexport default TimerLogic;// minutes =  Math.round(6000 * givenValue / 100)\n// // get hours\n// if (minutes > 60){\n//     this.hours = Math.floor(minutes / 100)\n// } else if(minutes / 60 === 1){\n//     this.hours = 1\n// }else{\n//     this.hours = 0\n// }\n// // First Check if you're at a full hour\n// if(minutes === 60 || (minutes / 60) === this.hours){\n//     this.stagedMinutes = '00'\n// }\n// // Else run algorithm\n// else{\n//  this.stagedMinutes = (minutes % 60 % 100)\n// }\n// var sound = new Howl({\n//     src: [Tick], \n//     volume: 0.7\n// })","map":{"version":3,"sources":["/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Components/Timer/TimerLogic.js"],"names":["Component","PaymentGenerator","Tick","Howl","Howler","TimerLogic","props","setValue","valFunc","value","stepValue","v","Math","round","scrollTime","stepVal","givenValue","minutes","hours","sound","src","volume","play","parseInt","hour","stagedMinutes"],"mappings":"6gBAAA,OAASA,SAAT,KAA0B,OAA1B,CACA,MAAOC,CAAAA,gBAAP,KAA6B,2CAA7B,CACA,MAAOC,CAAAA,IAAP,KAAiB,uBAAjB,CACA,OAAQC,IAAR,CAAcC,MAAd,KAA2B,QAA3B,CAEA;GAEMC,CAAAA,U,wGACF,oBAAYC,KAAZ,CAAkB,4CACd,uBAAMA,KAAN,EADc,MAQtBC,QARsB,CAQX,SAAAC,OAAO,CAAG,CACrB,MAAKC,KAAL,CAAaD,OAAb,CACC,CAVqB,OAYtBE,SAZsB,CAYV,SAAAC,CAAC,CAAG,CAAE;AACd,GAAGA,CAAC,CAAG,CAAP,CAAS,CACL,MAAO,EAAP,CACH,CAFD,IAEK,CACD,MAAOC,CAAAA,IAAI,CAACC,KAAL,CAAWF,CAAC,CAAG,EAAf,EAAqB,EAA5B,CACH,CACJ,CAlBqB,OAqBtBG,UArBsB,CAqBT,SAAAC,OAAO,CAAI,CAChB,GAAIC,CAAAA,UAAU,CAAGJ,IAAI,CAACC,KAAL,CAAWE,OAAO,CAAC,EAAnB,CAAjB,CACA,GAAKE,CAAAA,OAAO,CAAG,CAAf,CAAiB;AACjB,MAAKC,KAAL,CAAcF,UAAd,CACA;AACA;AAEC;AACR,GAAMG,CAAAA,KAAK,CAAG,GAAIhB,CAAAA,IAAJ,CAAS,CACtBiB,GAAG,CAAE,CAAClB,IAAD,CADiB,CAEtBmB,MAAM,CAAE,GAFc,CAAT,CAAd,CAIGF,KAAK,CAACG,IAAN,GAEI,MACIC,CAAAA,QAAQ,WAAI,MAAKL,KAAT,SAAiBD,OAAjB,EADZ,CAIP,CAvCqB,CAEd,MAAKO,IAAL,CAAY,CAAZ,CACA,MAAKC,aAAL,CAAqB,CAArB,CACA,MAAKhB,KAAL,CAAa,GAAb,CAJc,aAKjB,C,oBANoBT,S,EAoDvB;AAEF,cAAeK,CAAAA,UAAf,CAIA;AAEQ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGR;AACA;AACA;AACA","sourcesContent":["import { Component } from 'react'\nimport PaymentGenerator from '../Financials/Calculator/PaymentGenerator'\nimport Tick from '../../Assets/tick.mp3'\nimport {Howl, Howler} from 'howler'\n\n// const pGenerator = new PaymentGenerator()\n\nclass TimerLogic extends Component {\n    constructor(props){\n        super(props)\n        this.hour = 0\n        this.stagedMinutes = 0\n        this.value = 0.0\n    }\n\n\nsetValue = valFunc =>{\nthis.value = valFunc\n}\n\nstepValue = v =>{ // v stands for value\n    if(v > 1){\n        return 1\n    }else{\n        return Math.round(v * 24) / 24 \n    }\n}\n\n\nscrollTime = stepVal => {\n        var givenValue = Math.round(stepVal*24)\n        var  minutes = 0 //300 is max for 5 hours\n        this.hours = (givenValue)\n        // PaymentGenerator(this.hours, this.stagedMinutes)\n        // Sound generator\n\n        \t// Keeps track of time changes\n\tconst sound = new Howl({\n\t\tsrc: [Tick], \n\t\tvolume: 0.7\n\t})\n    sound.play()\n\n        return(\n            parseInt(`${this.hours}${minutes}`)\n        )\n\n}\n\n\n\n\n\n\n\n\n\n\n\n} // End of Class\n\nexport default TimerLogic\n\n\n\n// minutes =  Math.round(6000 * givenValue / 100)\n\n        // // get hours\n        // if (minutes > 60){\n        //     this.hours = Math.floor(minutes / 100)\n        // } else if(minutes / 60 === 1){\n        //     this.hours = 1\n        // }else{\n        //     this.hours = 0\n        // }\n        // // First Check if you're at a full hour\n        // if(minutes === 60 || (minutes / 60) === this.hours){\n        //     this.stagedMinutes = '00'\n        // }\n        // // Else run algorithm\n        // else{\n        //  this.stagedMinutes = (minutes % 60 % 100)\n        // }\n\n\n// var sound = new Howl({\n//     src: [Tick], \n//     volume: 0.7\n// })"]},"metadata":{},"sourceType":"module"}