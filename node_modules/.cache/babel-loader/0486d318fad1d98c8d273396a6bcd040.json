{"ast":null,"code":"import { Component } from 'react';\nimport PaymentGenerator from '../Financials/Calculator/PaymentGenerator';\nimport Tick from '../../Assets/tick.mp3';\nimport { Howl, Howler } from 'howler'; // const pGenerator = new PaymentGenerator()\n\nclass TimerLogic extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setValue = valFunc => {\n      this.value = valFunc;\n    };\n\n    this.stepValue = v => {\n      // v stands for value\n      if (v > 1) {\n        return 1;\n      } else {\n        return Math.round(v * 24) / 24;\n      }\n    };\n\n    this.scrollTime = stepVal => {\n      var givenValue = Math.round(stepVal * 24);\n      var minutes = 0; //300 is max for 5 hours\n\n      this.hours = givenValue;\n      console.log(this.hours); // PaymentGenerator(this.hours, this.stagedMinutes)\n      // Sound generator\n      // Keeps track of time changes\n\n      const sound = new Howl({\n        src: [Tick],\n        volume: 0.7\n      });\n      sound.play();\n      return parseInt(`${this.hours}${minutes}`);\n    };\n\n    this.hour = 0;\n    this.stagedMinutes = 0;\n    this.value = 0.0;\n  }\n\n} // End of Class\n\n\nexport default TimerLogic; // minutes =  Math.round(6000 * givenValue / 100)\n// // get hours\n// if (minutes > 60){\n//     this.hours = Math.floor(minutes / 100)\n// } else if(minutes / 60 === 1){\n//     this.hours = 1\n// }else{\n//     this.hours = 0\n// }\n// // First Check if you're at a full hour\n// if(minutes === 60 || (minutes / 60) === this.hours){\n//     this.stagedMinutes = '00'\n// }\n// // Else run algorithm\n// else{\n//  this.stagedMinutes = (minutes % 60 % 100)\n// }\n// var sound = new Howl({\n//     src: [Tick], \n//     volume: 0.7\n// })","map":{"version":3,"sources":["/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Components/Timer/TimerLogic.js"],"names":["Component","PaymentGenerator","Tick","Howl","Howler","TimerLogic","constructor","props","setValue","valFunc","value","stepValue","v","Math","round","scrollTime","stepVal","givenValue","minutes","hours","console","log","sound","src","volume","play","parseInt","hour","stagedMinutes"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,gBAAP,MAA6B,2CAA7B;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,SAAQC,IAAR,EAAcC,MAAd,QAA2B,QAA3B,C,CAEA;;AAEA,MAAMC,UAAN,SAAyBL,SAAzB,CAAmC;AAC/BM,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SAQtBC,QARsB,GAQXC,OAAO,IAAG;AACrB,WAAKC,KAAL,GAAaD,OAAb;AACC,KAVqB;;AAAA,SAYtBE,SAZsB,GAYVC,CAAC,IAAG;AAAE;AACd,UAAGA,CAAC,GAAG,CAAP,EAAS;AACL,eAAO,CAAP;AACH,OAFD,MAEK;AACD,eAAOC,IAAI,CAACC,KAAL,CAAWF,CAAC,GAAG,EAAf,IAAqB,EAA5B;AACH;AACJ,KAlBqB;;AAAA,SAqBtBG,UArBsB,GAqBTC,OAAO,IAAI;AAChB,UAAIC,UAAU,GAAGJ,IAAI,CAACC,KAAL,CAAWE,OAAO,GAAC,EAAnB,CAAjB;AACA,UAAKE,OAAO,GAAG,CAAf,CAFgB,CAEC;;AACjB,WAAKC,KAAL,GAAcF,UAAd;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKF,KAAjB,EAJgB,CAKhB;AACA;AAEC;;AACR,YAAMG,KAAK,GAAG,IAAInB,IAAJ,CAAS;AACtBoB,QAAAA,GAAG,EAAE,CAACrB,IAAD,CADiB;AAEtBsB,QAAAA,MAAM,EAAE;AAFc,OAAT,CAAd;AAIGF,MAAAA,KAAK,CAACG,IAAN;AAEI,aACIC,QAAQ,CAAE,GAAE,KAAKP,KAAM,GAAED,OAAQ,EAAzB,CADZ;AAIP,KAxCqB;;AAEd,SAAKS,IAAL,GAAY,CAAZ;AACA,SAAKC,aAAL,GAAqB,CAArB;AACA,SAAKlB,KAAL,GAAa,GAAb;AACH;;AAN8B,C,CAqDjC;;;AAEF,eAAeL,UAAf,C,CAIA;AAEQ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGR;AACA;AACA;AACA","sourcesContent":["import { Component } from 'react'\nimport PaymentGenerator from '../Financials/Calculator/PaymentGenerator'\nimport Tick from '../../Assets/tick.mp3'\nimport {Howl, Howler} from 'howler'\n\n// const pGenerator = new PaymentGenerator()\n\nclass TimerLogic extends Component {\n    constructor(props){\n        super(props)\n        this.hour = 0\n        this.stagedMinutes = 0\n        this.value = 0.0\n    }\n\n\nsetValue = valFunc =>{\nthis.value = valFunc\n}\n\nstepValue = v =>{ // v stands for value\n    if(v > 1){\n        return 1\n    }else{\n        return Math.round(v * 24) / 24 \n    }\n}\n\n\nscrollTime = stepVal => {\n        var givenValue = Math.round(stepVal*24)\n        var  minutes = 0 //300 is max for 5 hours\n        this.hours = (givenValue)\n        console.log(this.hours)\n        // PaymentGenerator(this.hours, this.stagedMinutes)\n        // Sound generator\n\n        \t// Keeps track of time changes\n\tconst sound = new Howl({\n\t\tsrc: [Tick], \n\t\tvolume: 0.7\n\t})\n    sound.play()\n    \n        return(\n            parseInt(`${this.hours}${minutes}`)\n        )\n\n}\n\n\n\n\n\n\n\n\n\n\n\n} // End of Class\n\nexport default TimerLogic\n\n\n\n// minutes =  Math.round(6000 * givenValue / 100)\n\n        // // get hours\n        // if (minutes > 60){\n        //     this.hours = Math.floor(minutes / 100)\n        // } else if(minutes / 60 === 1){\n        //     this.hours = 1\n        // }else{\n        //     this.hours = 0\n        // }\n        // // First Check if you're at a full hour\n        // if(minutes === 60 || (minutes / 60) === this.hours){\n        //     this.stagedMinutes = '00'\n        // }\n        // // Else run algorithm\n        // else{\n        //  this.stagedMinutes = (minutes % 60 % 100)\n        // }\n\n\n// var sound = new Howl({\n//     src: [Tick], \n//     volume: 0.7\n// })"]},"metadata":{},"sourceType":"module"}