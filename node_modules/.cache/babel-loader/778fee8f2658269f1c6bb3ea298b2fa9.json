{"ast":null,"code":"var _jsxFileName = \"/Users/bottlecapmedia/Desktop/OneShot Parking/src/Pages/CountDown.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CountDown = () => {\n  _s();\n\n  const [countDown, setCountDown] = useState({\n    hours: 0,\n    mins: 0,\n    secs: 0,\n    ms: 0\n  });\n  const getSetTime = localStorage.getItem('timeStore');\n  useEffect(() => {\n    setCountDown({\n      hours: Math.round(getSetTime / 100),\n      mins: getSetTime % 100,\n      secs: 60,\n      ms: 1000\n    });\n    console.log(getSetTime);\n  }, [getSetTime]); // Set mutable variables for updates\n\n  var updated_hours = countDown.hours,\n      updated_mins = countDown.mins,\n      updated_secs = countDown.secs,\n      updated_ms = countDown.ms;\n\n  const run = () => {\n    updated_secs--; // if(updated_ms === 0){\n    //     updated_secs--\n    //     updated_ms = 100\n    // }\n    // if(updated_secs === 0){\n    //     updated_mins--\n    //     updated_secs = 60\n    // }\n    // if(updated_mins === 0)\n    //     updated_hours--\n    //     updated_mins = 60\n    // if(updated_hours === 0){\n    //     updated_hours = '00'\n    // }\n    //    setCountDown({\n    //         hours: updated_hours,\n    //         mins: updated_mins, \n    //         secs: updated_secs,\n    //         ms: updated_ms\n    //     })\n\n    setTimeout(run, 1000);\n  };\n\n  run(); // setInterval(run, 1000)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"global_container choose_lot\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"countdown_digits_holder\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Remaing Time\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"countdown_adjustment\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"countdown_digits\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"digits\",\n            children: `${countDown.hours}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"digits\",\n            children: `${countDown.mins}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"digits\",\n            children: [`${countDown.secs}`, \"s\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CountDown, \"aczZwiB3TKV6l5aOiXEtfYfQ2Q4=\");\n\n_c = CountDown;\n\nvar _c;\n\n$RefreshReg$(_c, \"CountDown\");","map":{"version":3,"sources":["/Users/bottlecapmedia/Desktop/OneShot Parking/src/Pages/CountDown.js"],"names":["React","useState","useContext","useEffect","CountDown","countDown","setCountDown","hours","mins","secs","ms","getSetTime","localStorage","getItem","Math","round","console","log","updated_hours","updated_mins","updated_secs","updated_ms","run","setTimeout"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;;AAIA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAC3B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC;AACvCM,IAAAA,KAAK,EAAE,CADgC;AAEvCC,IAAAA,IAAI,EAAE,CAFiC;AAGvCC,IAAAA,IAAI,EAAE,CAHiC;AAIvCC,IAAAA,EAAE,EAAE;AAJmC,GAAD,CAA1C;AAMJ,QAAMC,UAAU,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAnB;AAGIV,EAAAA,SAAS,CAAC,MAAI;AACVG,IAAAA,YAAY,CAAC;AACTC,MAAAA,KAAK,EAAEO,IAAI,CAACC,KAAL,CAAWJ,UAAU,GAAG,GAAxB,CADE;AAETH,MAAAA,IAAI,EAAEG,UAAU,GAAG,GAFV;AAGTF,MAAAA,IAAI,EAAE,EAHG;AAITC,MAAAA,EAAE,EAAE;AAJK,KAAD,CAAZ;AAMAM,IAAAA,OAAO,CAACC,GAAR,CAAYN,UAAZ;AAEH,GATQ,EASP,CAACA,UAAD,CATO,CAAT,CAV2B,CAwB3B;;AACA,MAAIO,aAAa,GAAGb,SAAS,CAACE,KAA9B;AAAA,MAAqCY,YAAY,GAAGd,SAAS,CAACG,IAA9D;AAAA,MAAqEY,YAAY,GAAGf,SAAS,CAACI,IAA9F;AAAA,MAAoGY,UAAU,GAAGhB,SAAS,CAACK,EAA3H;;AAGA,QAAMY,GAAG,GAAG,MAAM;AACdF,IAAAA,YAAY,GADE,CAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGJ;AACA;AACA;AACA;AACA;AACA;;AAEIG,IAAAA,UAAU,CAACD,GAAD,EAAM,IAAN,CAAV;AACH,GA1BD;;AA2BJA,EAAAA,GAAG,GAvD4B,CAwD3B;;AAGA,sBACI;AAAK,IAAA,SAAS,EAAC,6BAAf;AAAA,2BAEI;AAAK,MAAA,SAAS,EAAC,yBAAf;AAAA,8BAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAII;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA,+BACA;AAAK,UAAA,SAAS,EAAC,kBAAf;AAAA,kCACI;AAAM,YAAA,SAAS,EAAC,QAAhB;AAAA,sBAA2B,GAAEjB,SAAS,CAACE,KAAM;AAA7C;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAM,YAAA,SAAS,EAAC,QAAhB;AAAA,sBAA2B,GAAEF,SAAS,CAACG,IAAK;AAA5C;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAGI;AAAM,YAAA,SAAS,EAAC,QAAhB;AAAA,uBAA4B,GAAEH,SAAS,CAACI,IAAK,EAA7C;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,UADJ;AA4BH,CAvFM;;GAAML,S;;KAAAA,S","sourcesContent":["import React, { useState, useContext, useEffect } from 'react'\n\n\n\nexport const CountDown = () => {\n    const [countDown, setCountDown] = useState({\n        hours: 0,\n        mins: 0,\n        secs: 0,\n        ms: 0\n    })\nconst getSetTime = localStorage.getItem('timeStore')\n   \n\n    useEffect(()=>{\n        setCountDown({\n            hours: Math.round(getSetTime / 100),\n            mins: getSetTime % 100, \n            secs: 60,\n            ms: 1000\n        })\n        console.log(getSetTime)\n\n    },[getSetTime])\n\n \n\n   \n    // Set mutable variables for updates\n    var updated_hours = countDown.hours, updated_mins = countDown.mins,  updated_secs = countDown.secs, updated_ms = countDown.ms\n\n   \n    const run = () => { \n        updated_secs--\n        // if(updated_ms === 0){\n        //     updated_secs--\n        //     updated_ms = 100\n        // }\n        // if(updated_secs === 0){\n        //     updated_mins--\n        //     updated_secs = 60\n        // }\n        // if(updated_mins === 0)\n        //     updated_hours--\n        //     updated_mins = 60\n        // if(updated_hours === 0){\n        //     updated_hours = '00'\n        // }\n\n        \n    //    setCountDown({\n    //         hours: updated_hours,\n    //         mins: updated_mins, \n    //         secs: updated_secs,\n    //         ms: updated_ms\n    //     })\n\n        setTimeout(run, 1000)\n    }\nrun()\n    // setInterval(run, 1000)\n\n    \n    return (\n        <div className='global_container choose_lot'>\n\n            <div className='countdown_digits_holder'>\n\n                <span>Remaing Time</span>\n\n                <div className='countdown_adjustment'>\n                <div className='countdown_digits'>\n                    <span className='digits'>{`${countDown.hours}`}</span>\n                    <span className='digits'>{`${countDown.mins}`}</span>\n                    <span className='digits' >{`${countDown.secs}`}s</span>\n                </div>\n                </div>\n\n              \n\n\n            </div>\n\n\n            {/* Count down time */}\n\n\n\n            {/* Buttone to Extend time here */}\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}