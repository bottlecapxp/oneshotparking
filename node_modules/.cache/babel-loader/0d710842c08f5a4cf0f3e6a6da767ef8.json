{"ast":null,"code":"import { Component } from \"react\";\n\nclass Utilities extends Component {\n  constructor(props) {\n    super(props);\n\n    this.round = (limit, set_target, true_value) => {\n      const output = Math.round((limit - set_target) / true_value);\n      return output;\n    };\n\n    this.overlap_limit = (limit, next_hr, acc_time, rate) => {\n      const newDate = new Date();\n      const mins = newDate.getMinutes();\n      const output = parseFloat(acc_time > limit && acc_time < next_hr ? mins * rate : 0).toFixed(2);\n      return output;\n    };\n  }\n\n}\n\nexport default Utilities;","map":{"version":3,"sources":["/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Components/Utilities/Utilities.js"],"names":["Component","Utilities","constructor","props","round","limit","set_target","true_value","output","Math","overlap_limit","next_hr","acc_time","rate","newDate","Date","mins","getMinutes","parseFloat","toFixed"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;;AAIA,MAAMC,SAAN,SAAwBD,SAAxB,CAAiC;AAC7BE,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SAKtBC,KALsB,GAKd,CAACC,KAAD,EAAQC,UAAR,EAAoBC,UAApB,KAAkC;AACtC,YAAMC,MAAM,GAAGC,IAAI,CAACL,KAAL,CAAW,CAACC,KAAK,GAAGC,UAAT,IAAuBC,UAAlC,CAAf;AACA,aAAOC,MAAP;AACH,KARqB;;AAAA,SAUtBE,aAVsB,GAUN,CAACL,KAAD,EAAQM,OAAR,EAAiBC,QAAjB,EAA2BC,IAA3B,KAAoC;AAChD,YAAMC,OAAO,GAAG,IAAIC,IAAJ,EAAhB;AACA,YAAMC,IAAI,GAAGF,OAAO,CAACG,UAAR,EAAb;AACA,YAAMT,MAAM,GAAGU,UAAU,CAACN,QAAQ,GAAGP,KAAX,IAAoBO,QAAQ,GAAGD,OAA/B,GAAwCK,IAAI,GAAGH,IAA/C,GAAqD,CAAtD,CAAV,CAAmEM,OAAnE,CAA2E,CAA3E,CAAf;AACA,aAAOX,MAAP;AACH,KAfqB;AAEjB;;AAH4B;;AAsBjC,eAAeP,SAAf","sourcesContent":["import { Component } from \"react\";\n\n\n\nclass Utilities extends Component{\n    constructor(props){\n        super(props)\n    }\n\n\nround = (limit, set_target, true_value) =>{ \n    const output = Math.round((limit - set_target) / true_value)\n    return output\n}\n\noverlap_limit = (limit, next_hr, acc_time, rate) => {\n    const newDate = new Date()\n    const mins = newDate.getMinutes()\n    const output = parseFloat(acc_time > limit && acc_time < next_hr? mins * rate: 0).toFixed(2)\n    return output\n}\n\n\n\n}\n\nexport default Utilities;"]},"metadata":{},"sourceType":"module"}