{"ast":null,"code":"import { Component } from 'react';\n\nclass MaxSelection extends Component {\n  constructor(props) {\n    super(props);\n\n    this.set_conditions = () => {\n      if (this.hour < 18 && this.hour > 6) {\n        const remaining_time = this.hour;\n        this.max_num = parseFloat(`0.0${remaining_time}`);\n      }\n\n      if (this.hour >= 18 && this.hour < 24) {\n        const rem_time = 24 - this.hour + 6;\n        this.max_num = rem_time > 9 ? this.max_num = parseFloat(`0.${rem_time}`) : parseFloat(`0.0${rem_time}`);\n      }\n\n      if (this.hour < 6) {\n        const rem_hr = this.hour;\n        this.max_num = `0.0${rem_hr}`;\n      }\n\n      return this.max_num;\n    };\n\n    this.date = new Date();\n    this.getExpTime = localStorage.getItem('expTime').split(':');\n    this.hours = this.getExpTime[0];\n    this.hour = this.date.getHours();\n    this.localStorage = localStorage.getItem('max');\n    this.localStorateMax = localStorage.getItem('max');\n    this.max_num = 0.00;\n  } // init_check = () =>{ \n  //     if (this.localStorateMax == 0) {\n  //         console.log('localStorage = 0')\n  //                     switch (this.hour) {\n  //                     case(this.hour < 18 && this.hour >6):\n  //                         const remaining_time = this.hour\n  //                         this.max_num = parseFloat(`0.0${remaining_time}`)\n  //                         break;\n  //                     case (this.hour >= 18 && this.hour < 24 ?):\n  //                         const rem_time = (24 - this.hour) + 6\n  //                         this.max_num = (rem_time > 9 ? this.max_num = parseFloat(`0.${rem_time}`) : parseFloat(`0.0${rem_time}`))\n  //                         break;\n  //                     case(this.hour <6):\n  //                         const rem_hr = this.hour\n  //                         this.max_num = `0.0${rem_hr}`\n  //                         break;\n  //                 }\n  //                     localStorage.setItem('max', 1)\n  //     }\n  // }\n\n\n}\n\nexport default MaxSelection; // if (this.localStorateMax == 0) {\n//     this.init_check()\n//     console.log('sero')\n// }\n// else if(this.localStorateMax == 1){ \n//     this.max_num = '0.12'\n// }\n// get the localstorage exp time and match it with 6\n// if match, we're going to assign the this.max_num variable to 12\n// if it is not 6, then we're going to switch case and return the result to this.max_num\n// \tif (localStorage_ == 1) {\n// \t\tthis.max_num = '0.12'\n// \t\tconsole.log('still shows under condition')\n// \t}\n// \tif (localStorage_ = 0){ \n// \t\tconsole.log('Not equal to 6')\n// \t}\n// }","map":{"version":3,"sources":["/Users/bottlecapmedia/Documents/Applications/OneShot Parking/src/Components/max_selection/MaxSelection.js"],"names":["Component","MaxSelection","constructor","props","set_conditions","hour","remaining_time","max_num","parseFloat","rem_time","rem_hr","date","Date","getExpTime","localStorage","getItem","split","hours","getHours","localStorateMax"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;;AAIA,MAAMC,YAAN,SAA2BD,SAA3B,CAAqC;AACjCE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAmCnBC,cAnCmB,GAmCF,MAAM;AACnB,UAAG,KAAKC,IAAL,GAAY,EAAZ,IAAkB,KAAKA,IAAL,GAAY,CAAjC,EAAmC;AAC/B,cAAMC,cAAc,GAAG,KAAKD,IAA5B;AACA,aAAKE,OAAL,GAAeC,UAAU,CAAE,MAAKF,cAAe,EAAtB,CAAzB;AACH;;AACD,UAAG,KAAKD,IAAL,IAAa,EAAb,IAAmB,KAAKA,IAAL,GAAY,EAAlC,EAAqC;AACjC,cAAMI,QAAQ,GAAI,KAAK,KAAKJ,IAAX,GAAmB,CAApC;AACA,aAAKE,OAAL,GAAgBE,QAAQ,GAAG,CAAX,GAAe,KAAKF,OAAL,GAAeC,UAAU,CAAE,KAAIC,QAAS,EAAf,CAAxC,GAA4DD,UAAU,CAAE,MAAKC,QAAS,EAAhB,CAAtF;AACH;;AACD,UAAG,KAAKJ,IAAL,GAAW,CAAd,EAAgB;AACZ,cAAMK,MAAM,GAAG,KAAKL,IAApB;AACA,aAAKE,OAAL,GAAgB,MAAKG,MAAO,EAA5B;AACH;;AAED,aAAO,KAAKH,OAAZ;AAEH,KAnDkB;;AAEf,SAAKI,IAAL,GAAY,IAAIC,IAAJ,EAAZ;AACA,SAAKC,UAAL,GAAkBC,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAgCC,KAAhC,CAAsC,GAAtC,CAAlB;AACA,SAAKC,KAAL,GAAa,KAAKJ,UAAL,CAAgB,CAAhB,CAAb;AACA,SAAKR,IAAL,GAAY,KAAKM,IAAL,CAAUO,QAAV,EAAZ;AACA,SAAKJ,YAAL,GAAoBA,YAAY,CAACC,OAAb,CAAqB,KAArB,CAApB;AACA,SAAKI,eAAL,GAAuBL,YAAY,CAACC,OAAb,CAAqB,KAArB,CAAvB;AACA,SAAKR,OAAL,GAAe,IAAf;AAEH,GAXgC,CAcjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAlCiC;;AAuDrC,eAAeN,YAAf,C,CAEQ;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEN;AACA;AACA;AACD;AACA;AACA;AACA;AACA;AAEA;AACA;AACA","sourcesContent":["import { Component } from 'react'\n\n\n\nclass MaxSelection extends Component {\n    constructor(props) {\n        super(props)\n        this.date = new Date()\n        this.getExpTime = localStorage.getItem('expTime').split(':')\n        this.hours = this.getExpTime[0]\n        this.hour = this.date.getHours()\n        this.localStorage = localStorage.getItem('max')\n        this.localStorateMax = localStorage.getItem('max')\n        this.max_num = 0.00\n\n    }\n\n\n    // init_check = () =>{ \n    //     if (this.localStorateMax == 0) {\n    //         console.log('localStorage = 0')\n    //                     switch (this.hour) {\n    //                     case(this.hour < 18 && this.hour >6):\n    //                         const remaining_time = this.hour\n    //                         this.max_num = parseFloat(`0.0${remaining_time}`)\n    //                         break;\n    //                     case (this.hour >= 18 && this.hour < 24 ?):\n    //                         const rem_time = (24 - this.hour) + 6\n    //                         this.max_num = (rem_time > 9 ? this.max_num = parseFloat(`0.${rem_time}`) : parseFloat(`0.0${rem_time}`))\n    //                         break;\n    //                     case(this.hour <6):\n    //                         const rem_hr = this.hour\n    //                         this.max_num = `0.0${rem_hr}`\n\n    //                         break;\n    //                 }\n    //                     localStorage.setItem('max', 1)\n    //     }\n    // }\n\n    set_conditions = () => {\n        if(this.hour < 18 && this.hour > 6){\n            const remaining_time = this.hour\n            this.max_num = parseFloat(`0.0${remaining_time}`)\n        }\n        if(this.hour >= 18 && this.hour < 24){\n            const rem_time = (24 - this.hour) + 6\n            this.max_num = (rem_time > 9 ? this.max_num = parseFloat(`0.${rem_time}`) : parseFloat(`0.0${rem_time}`))\n        }\n        if(this.hour <6){\n            const rem_hr = this.hour\n            this.max_num = `0.0${rem_hr}`\n        }\n\n        return this.max_num\n\n    }\n}\n\nexport default MaxSelection;\n\n        // if (this.localStorateMax == 0) {\n        //     this.init_check()\n        //     console.log('sero')\n        // }\n        // else if(this.localStorateMax == 1){ \n\n        //     this.max_num = '0.12'\n\n        // }\n\n\t\t// get the localstorage exp time and match it with 6\n\t\t// if match, we're going to assign the this.max_num variable to 12\n\t\t// if it is not 6, then we're going to switch case and return the result to this.max_num\n\t// \tif (localStorage_ == 1) {\n\t// \t\tthis.max_num = '0.12'\n\t// \t\tconsole.log('still shows under condition')\n\t// \t}\n\t// \tif (localStorage_ = 0){ \n\n\t// \t\tconsole.log('Not equal to 6')\n\t// \t}\n\t// }\n"]},"metadata":{},"sourceType":"module"}