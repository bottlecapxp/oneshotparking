{"ast":null,"code":"var _jsxFileName = \"/Users/bottlecapmedia/Desktop/OneShot Parking/src/Pages/CardPayment.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport CreditCardIcon from \"../Assets/ccIcon.svg\";\nimport Lock from '../Assets/lock.png';\nimport { useHistory } from 'react-router-dom';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CardPayment = () => {\n  _s();\n\n  // using state to keep track of stripe payment, show errors, and manange user interface\n  const [succeeded, setSucceeded] = useState(false);\n  const [error, serError] = useState(null);\n  const [processing, setProcessing] = useState('');\n  const [disabled, setDisabled] = useState(true);\n  const [clientSecret, setClientSecrete] = useState(''); // extract stripe and element \n\n  const stripe = useStripe();\n  const elements = useElements();\n  useEffect(() => {\n    window.fetch('/create-payment-intent', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        items: [{\n          parking_id: 'xl-lot23w'\n        }]\n      })\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      setClientSecrete(data.clientSecret);\n    });\n  }, []);\n  const cardElementOptions = {\n    style: {\n      base: {\n        fontSize: '16px'\n      },\n      invalid: {},\n      complete: {}\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(CardElement, {\n        id: \"card-element\",\n        options: cardElementOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: !stripe,\n        children: \"Pay Now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CardPayment, \"Hrnd3js2Ik/hqjxGYIk+6Wu3PGw=\", false, function () {\n  return [useStripe, useElements];\n});\n\n_c = CardPayment;\nexport default CardPayment; // <div>\n// <h1 className='global_content_title slim' style={{textAlign: 'center',marginTop: '-50%'}}>Enter your card's information below</h1>\n// <div className='card_'>\n//     {/* Enter your card numner */}\n//     <div className='stacked_'>\n//     <label id='CCnumberLabel'>Enter Your Card Number</label>\n//     <input id='CCnumber'></input>\n//     </div>\n//     {/* Expiration CVC & Icon */}\n//     <div className='auth_holder'>\n//         <div className='stacked_'>\n//         <label>Expiration</label>\n//         <input id='expiration'></input>\n//         </div>\n//         <div className='stacked_'>\n//         <label>CVC</label>\n//         <input id='cvc'></input>\n//         </div>\n//         <div>\n//             <img className='ccIcon' src={CreditCardIcon} alt='creditCard_logo'></img>\n//         </div>\n//     </div>\n//     <div className='securePaymentHolder'>\n//         <div className='securePayment_'>  {/* display flex */}\n//             {/* image */}\n//             <img className='lock' src={Lock}></img>\n//             <p>Secure Payment</p>\n//             {/* text info */}\n//         </div>\n//     </div>\n//     {/* Button here */}\n//     <div className='ccCardSubmissionHolder'>\n//     <input style={{color: '#FF5759'}} className='submitBtn box-shadow ccCardSubmission' onClick={pay_now} type='submit' value='Pay Now'></input>\n//     </div>\n// </div>\n// </div>\n//const pay_now = () =>{\n//     history.push('/remaining-time/')\n// }\n//const history = useHistory()\n//     //CREATE PAYMENT INTENT ON THE SERVER\n//     const {error: backendError, clientSecret} = await fetch('/create-payment-intent', {\n//         method: 'POST',\n//         headers: {\n//             'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify({\n//             amount: .10,\n//             currency: 'CAD'\n//         }),\n//     }).then(r => r.json())\n//     if(backendError){\n//         console.log(backendError.message)\n//         return;\n//     }\n//     // CONFIRMTHE PAYMENT ON THE CLIENT\n//     const {error: stripeError, paymentIntent} = await stripe.confirmCardPayment(\n//         clientSecret, {\n//             payment_method: {\n//                 card: elements.getElement(CardElement),\n//             }\n//         }\n//     )\n//     if(stripeError){\n//         console.log(stripeError.message)\n//         return;\n//     }else{\n//         console.log('[PaymentMethod]', clientSecret);\n//     }\n//     console.log(`PaymentIntent ${paymentIntent.id}: ${paymentIntent.status}`)\n// }\n\n{\n  /* <form onSubmit={handleSubmit}>\n     <input type='text' name='name' placeholder='Jane Doe' required></input>\n     <input type='email' name='email' placeholder='JaneDoe@example.com' required></input>\n     <input type='address' name='address' placeholder='1 place rd' required></input>\n     <input type='text' name='city' placeholder='Toronto' required></input>\n     \n      <CardElement options={cardElementOptions}/>\n     <button type='submit' disabled={!stripe}>\n         Pay Now\n     </button>\n  </form> */\n} // const handleSubmit = async (e) =>{\n//     e.preventDefault();\n//     // if stripe and elements not loaded return null\n//     if(!stripe || !elements){\n//         return;\n//     }\n\nvar _c;\n\n$RefreshReg$(_c, \"CardPayment\");","map":{"version":3,"sources":["/Users/bottlecapmedia/Desktop/OneShot Parking/src/Pages/CardPayment.js"],"names":["React","useEffect","useState","Lock","useHistory","CardElement","useStripe","useElements","CardPayment","succeeded","setSucceeded","error","serError","processing","setProcessing","disabled","setDisabled","clientSecret","setClientSecrete","stripe","elements","window","fetch","method","headers","body","JSON","stringify","items","parking_id","then","res","json","data","cardElementOptions","style","base","fontSize","invalid","complete"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;AAEA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAAQC,UAAR,QAAyB,kBAAzB;AACA,SAAQC,WAAR,EAAqBC,SAArB,EAAgCC,WAAhC,QAAkD,yBAAlD;;;AAGA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AAG1B;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACe,YAAD,EAAeC,gBAAf,IAAmChB,QAAQ,CAAC,EAAD,CAAjD,CAR0B,CAW1B;;AACA,QAAMiB,MAAM,GAAGb,SAAS,EAAxB;AACA,QAAMc,QAAQ,GAAGb,WAAW,EAA5B;AAEAN,EAAAA,SAAS,CAAC,MAAI;AACVoB,IAAAA,MAAM,CAACC,KAAP,CAAa,wBAAb,EAAuC;AACnCC,MAAAA,MAAM,EAAE,MAD2B;AAEnCC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OAF0B;AAKnCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACC,QAAAA,KAAK,EAAE,CAAC;AAACC,UAAAA,UAAU,EAAE;AAAb,SAAD;AAAR,OAAf;AAL6B,KAAvC,EAMGC,IANH,CAMQC,GAAG,IAAI;AACX,aAAOA,GAAG,CAACC,IAAJ,EAAP;AACH,KARD,EAQGF,IARH,CAQQG,IAAI,IAAI;AACZf,MAAAA,gBAAgB,CAACe,IAAI,CAAChB,YAAN,CAAhB;AAEH,KAXD;AAYH,GAbQ,EAaN,EAbM,CAAT;AAiBA,QAAMiB,kBAAkB,GAAG;AACvBC,IAAAA,KAAK,EAAE;AACHC,MAAAA,IAAI,EAAC;AACDC,QAAAA,QAAQ,EAAE;AADT,OADF;AAKHC,MAAAA,OAAO,EAAC,EALL;AAQHC,MAAAA,QAAQ,EAAE;AARP;AADgB,GAA3B;AAiBA,sBACI;AAAK,IAAA,SAAS,EAAC,EAAf;AAAA,2BACA;AAAA,8BAGA,QAAC,WAAD;AAAa,QAAA,EAAE,EAAC,cAAhB;AAA+B,QAAA,OAAO,EAAEL;AAAxC;AAAA;AAAA;AAAA;AAAA,cAHA,eAIA;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,QAAQ,EAAE,CAACf,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UADJ;AAYC,CA7DD;;GAAMX,W;UAYSF,S,EACEC,W;;;KAbXC,W;AA8DN,eAAeA,WAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACI;AACA;AAEA;AAGJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;;AAEA;AAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACW,C,CAEX;AACI;AAEA;AACA;AACA;AACA","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport CreditCardIcon from '../Assets/ccIcon.svg'\nimport Lock from '../Assets/lock.png'\nimport {useHistory} from 'react-router-dom'\nimport {CardElement, useStripe, useElements} from '@stripe/react-stripe-js'; \n\n\nconst CardPayment = () => {\n\n\n// using state to keep track of stripe payment, show errors, and manange user interface\nconst [succeeded, setSucceeded] = useState(false)\nconst [error, serError] = useState(null)\nconst [processing, setProcessing] = useState('')\nconst [disabled, setDisabled] = useState(true)\nconst [clientSecret, setClientSecrete] = useState('')\n\n\n// extract stripe and element \nconst stripe = useStripe()\nconst elements = useElements()\n    \nuseEffect(()=>{\n    window.fetch('/create-payment-intent', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({items: [{parking_id: 'xl-lot23w'}]})\n    }).then(res => {\n        return res.json();\n    }).then(data => {\n        setClientSecrete(data.clientSecret)\n\n    })\n}, [])\n\n\n\nconst cardElementOptions = {\n    style: {\n        base:{\n            fontSize: '16px',\n\n        },\n        invalid:{\n            \n        },\n        complete: {\n\n        }\n    }\n}\n\n\n\nreturn(\n    <div className=''>\n    <form>\n\n\n    <CardElement id='card-element' options={cardElementOptions}/>\n    <button type='submit' disabled={!stripe}>\n        Pay Now\n    </button>\n</form>\n    </div>\n)\n}\nexport default CardPayment;\n\n// <div>\n// <h1 className='global_content_title slim' style={{textAlign: 'center',marginTop: '-50%'}}>Enter your card's information below</h1>\n// <div className='card_'>\n//     {/* Enter your card numner */}\n//     <div className='stacked_'>\n//     <label id='CCnumberLabel'>Enter Your Card Number</label>\n//     <input id='CCnumber'></input>\n//     </div>\n//     {/* Expiration CVC & Icon */}\n//     <div className='auth_holder'>\n//         <div className='stacked_'>\n//         <label>Expiration</label>\n//         <input id='expiration'></input>\n//         </div>\n//         <div className='stacked_'>\n//         <label>CVC</label>\n//         <input id='cvc'></input>\n//         </div>\n//         <div>\n//             <img className='ccIcon' src={CreditCardIcon} alt='creditCard_logo'></img>\n//         </div>\n//     </div>\n//     <div className='securePaymentHolder'>\n//         <div className='securePayment_'>  {/* display flex */}\n//             {/* image */}\n//             <img className='lock' src={Lock}></img>\n//             <p>Secure Payment</p>\n//             {/* text info */}\n//         </div>\n//     </div>\n\n//     {/* Button here */}\n//     <div className='ccCardSubmissionHolder'>\n//     <input style={{color: '#FF5759'}} className='submitBtn box-shadow ccCardSubmission' onClick={pay_now} type='submit' value='Pay Now'></input>\n//     </div>\n    \n    \n// </div>\n// </div>\n\n//const pay_now = () =>{\n    //     history.push('/remaining-time/')\n    // }\n\n    //const history = useHistory()\n\n\n//     //CREATE PAYMENT INTENT ON THE SERVER\n//     const {error: backendError, clientSecret} = await fetch('/create-payment-intent', {\n//         method: 'POST',\n//         headers: {\n//             'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify({\n//             amount: .10,\n//             currency: 'CAD'\n//         }),\n//     }).then(r => r.json())\n\n//     if(backendError){\n//         console.log(backendError.message)\n//         return;\n//     }\n\n//     // CONFIRMTHE PAYMENT ON THE CLIENT\n//     const {error: stripeError, paymentIntent} = await stripe.confirmCardPayment(\n//         clientSecret, {\n//             payment_method: {\n//                 card: elements.getElement(CardElement),\n//             }\n//         }\n//     )\n\n//     if(stripeError){\n//         console.log(stripeError.message)\n//         return;\n//     }else{\n//         console.log('[PaymentMethod]', clientSecret);\n//     }\n\n//     console.log(`PaymentIntent ${paymentIntent.id}: ${paymentIntent.status}`)\n\n   \n// }\n\n{/* <form onSubmit={handleSubmit}>\n    <input type='text' name='name' placeholder='Jane Doe' required></input>\n    <input type='email' name='email' placeholder='JaneDoe@example.com' required></input>\n    <input type='address' name='address' placeholder='1 place rd' required></input>\n    <input type='text' name='city' placeholder='Toronto' required></input>\n    \n\n    <CardElement options={cardElementOptions}/>\n    <button type='submit' disabled={!stripe}>\n        Pay Now\n    </button>\n</form> */}\n\n// const handleSubmit = async (e) =>{\n    //     e.preventDefault();\n    \n    //     // if stripe and elements not loaded return null\n    //     if(!stripe || !elements){\n    //         return;\n    //     }"]},"metadata":{},"sourceType":"module"}